{
    "accordion": {
        "components": {
            "AccordionTab": {
                "description": "AccordionTab is a helper component for Accordion.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define the header of the tab."
                        },
                        {
                            "name": "headerStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the tab header."
                        },
                        {
                            "name": "tabStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the tab."
                        },
                        {
                            "name": "contentStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the tab content."
                        },
                        {
                            "name": "tabStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tab."
                        },
                        {
                            "name": "headerStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tab header."
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tab content."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "cache",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether a lazy loaded panel should avoid getting loaded again on reselection."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "400ms cubic-bezier(0.86, 0, 0.07, 1)",
                            "description": "Transition options of the animation."
                        },
                        {
                            "name": "iconPos",
                            "optional": false,
                            "readonly": false,
                            "type": "\"end\" | \"start\"",
                            "default": "start",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "The value that returns the selection."
                        },
                        {
                            "name": "headerAriaLevel",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "2",
                            "description": "The aria-level that each accordion header will have. The default value is 2 as per W3C specifications"
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "selectedChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Event triggered by changing the choice."
                        }
                    ]
                }
            },
            "Accordion": {
                "description": "Accordion groups a collection of contents in tabs.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "multiple",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, multiple tabs can be activated at the same time."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the tab header and content."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "expandIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of a collapsed tab."
                        },
                        {
                            "name": "collapseIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of an expanded tab."
                        },
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number | number[]",
                            "description": "Index of the active tab or an array of indexes in multiple mode."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "headerAriaLevel",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The aria-level that each accordion header will have. The default value is 2 as per W3C specifications"
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onClose",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AccordionTabCloseEvent"
                                }
                            ],
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header."
                        },
                        {
                            "name": "onOpen",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AccordionTabOpenEvent"
                                }
                            ],
                            "description": "Callback to invoke when a tab gets expanded."
                        },
                        {
                            "name": "activeIndexChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "number | number[]"
                                }
                            ],
                            "description": "Returns the active index."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "AccordionTabOpenEvent",
                        "description": "Custom tab open event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "index",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Opened tab index."
                            }
                        ]
                    },
                    {
                        "name": "AccordionTabCloseEvent",
                        "description": "Custom tab close event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "index",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Opened tab index."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "accordion",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "accordion",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom template of header."
                    },
                    {
                        "parent": "accordion",
                        "name": "icon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Data of the selected.\n  }"
                            }
                        ],
                        "description": "Custom template of icon."
                    }
                ]
            }
        }
    },
    "animate": {
        "components": {
            "Animate": {
                "description": "Animate manages PrimeFlex CSS classes declaratively to during enter/leave animations on scroll or on page load.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "enterClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Selector to define the CSS class for enter animation."
                        },
                        {
                            "name": "leaveClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Selector to define the CSS class for leave animation."
                        }
                    ]
                }
            }
        }
    },
    "animateonscroll": {
        "components": {
            "AnimateOnScroll": {
                "description": "AnimateOnScroll is used to apply animations to elements when entering or leaving the viewport during scrolling.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "enterClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Selector to define the CSS class for enter animation."
                        },
                        {
                            "name": "leaveClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Selector to define the CSS class for leave animation."
                        },
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "Specifies the root option of the IntersectionObserver API."
                        },
                        {
                            "name": "rootMargin",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies the rootMargin option of the IntersectionObserver API."
                        },
                        {
                            "name": "threshold",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Specifies the threshold option of the IntersectionObserver API"
                        },
                        {
                            "name": "once",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the scroll event listener should be removed after initial run."
                        }
                    ]
                }
            }
        }
    },
    "blockableui": {
        "components": {}
    },
    "confirmaeventtype": {
        "components": {}
    },
    "confirmation": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "Confirmation",
                    "description": "Represents a confirmation dialog configuration.",
                    "props": [
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The message to be displayed in the confirmation dialog."
                        },
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "A unique key to identify the confirmation dialog."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The name of the icon to be displayed in the confirmation dialog."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The header text of the confirmation dialog."
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "description": "The callback function to be executed when the accept button is clicked."
                        },
                        {
                            "name": "reject",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "description": "The callback function to be executed when the reject button is clicked."
                        },
                        {
                            "name": "acceptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The label text for the accept button."
                        },
                        {
                            "name": "rejectLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The label text for the reject button."
                        },
                        {
                            "name": "acceptIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The name of the icon to be displayed on the accept button."
                        },
                        {
                            "name": "rejectIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The name of the icon to be displayed on the reject button."
                        },
                        {
                            "name": "acceptVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies whether the accept button should be visible."
                        },
                        {
                            "name": "rejectVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies whether the reject button should be visible."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies whether to block scrolling on the page when the confirmation dialog is displayed."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies whether the confirmation dialog should be closed when the escape key is pressed."
                        },
                        {
                            "name": "dismissableMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies whether clicking outside the confirmation dialog should dismiss it."
                        },
                        {
                            "name": "defaultFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The ID or class name of the element to receive focus by default when the confirmation dialog is opened."
                        },
                        {
                            "name": "acceptButtonStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The CSS class name to be applied to the accept button."
                        },
                        {
                            "name": "rejectButtonStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The CSS class name to be applied to the reject button."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "EventTarget",
                            "description": "The target event where the confirmation dialog is triggered from."
                        },
                        {
                            "name": "acceptEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "EventEmitter<any>",
                            "description": "An event emitter for the accept event."
                        },
                        {
                            "name": "rejectEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "EventEmitter<any>",
                            "description": "An event emitter for the reject event."
                        }
                    ]
                }
            ]
        }
    },
    "confirmationservice": {
        "description": "Defines the service used by the component",
        "methods": {
            "description": "Methods used in service.",
            "values": [
                {
                    "name": "confirm",
                    "parameters": [
                        {
                            "name": "confirmation",
                            "type": "Confirmation",
                            "description": "Represents a confirmation dialog configuration."
                        }
                    ],
                    "returnType": "ConfirmationService",
                    "description": "Callback to invoke on confirm."
                },
                {
                    "name": "close",
                    "parameters": [],
                    "returnType": "ConfirmationService",
                    "description": "Closes the dialog."
                },
                {
                    "name": "onAccept",
                    "parameters": [],
                    "returnType": "void",
                    "description": "Accepts the dialog."
                }
            ]
        }
    },
    "contextmenuservice": {
        "components": {}
    },
    "filtermatchmode": {
        "components": {}
    },
    "filtermetadata": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "FilterMetadata",
                    "description": "Represents metadata for filtering a data set.",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The value used for filtering."
                        },
                        {
                            "name": "matchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The match mode for filtering."
                        },
                        {
                            "name": "operator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The operator for filtering."
                        }
                    ]
                }
            ]
        }
    },
    "filteroperator": {
        "components": {}
    },
    "filterservice": {
        "components": {}
    },
    "lazyloadevent": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "LazyLoadEvent",
                    "description": "Represents an event object for lazy loading data.",
                    "props": [
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The index of the first record to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The index of the last record to be loaded."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The number of rows to load."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The field to be used for sorting."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The sort order for the field."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "SortMeta[]",
                            "description": "An array of sort metadata objects for multiple column sorting."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "An object containing filter metadata for filtering the data.\nThe keys represent the field names, and the values represent the corresponding filter metadata."
                        },
                        {
                            "name": "globalFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The global filter value for filtering across all columns."
                        },
                        {
                            "name": "forceUpdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        }
                    ]
                }
            ]
        }
    },
    "lazyloadmeta": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "LazyLoadMeta",
                    "description": "Meta data for lazy load event.",
                    "props": [
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number"
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number"
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[]"
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number"
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "Object"
                        },
                        {
                            "name": "globalFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[]"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "SortMeta[]"
                        },
                        {
                            "name": "forceUpdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "last",
                            "optional": true,
                            "readonly": false,
                            "type": "number"
                        }
                    ]
                }
            ]
        }
    },
    "megamenuitem": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "MegaMenuItem",
                    "description": "MegaMenuItem API provides the following properties.",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Text of the item."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the item."
                        },
                        {
                            "name": "command",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "External link to navigate when item is clicked."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[][]",
                            "description": "An array of children menuitems."
                        },
                        {
                            "name": "expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies whether the mega menu item is expanded."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When set as true, disables the menuitem."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the dom element of menuitem is created or not."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies where to open the linked document."
                        },
                        {
                            "name": "routerLinkActiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Configuration for active router link."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines the item as a separator."
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Value of the badge."
                        },
                        {
                            "name": "badgeStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the badge."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the menuitem."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the menuitem."
                        },
                        {
                            "name": "iconStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the item's icon."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Tooltip text of the item."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the element."
                        },
                        {
                            "name": "automationId",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Value of HTML data-* attribute."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies tab order of the item."
                        },
                        {
                            "name": "routerLink",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "RouterLink definition for internal navigation."
                        },
                        {
                            "name": "queryParams",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "Query parameters for internal navigation via routerLink."
                        },
                        {
                            "name": "fragment",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Sets the hash fragment for the URL."
                        },
                        {
                            "name": "queryParamsHandling",
                            "optional": true,
                            "readonly": false,
                            "type": "QueryParamsHandling",
                            "description": "How to handle query parameters in the router link for the next navigation. One of:\n   merge : Merge new with current parameters.\n   preserve : Preserve current parameters.k."
                        },
                        {
                            "name": "preserveFragment",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When true, preserves the URL fragment for the next navigation."
                        },
                        {
                            "name": "skipLocationChange",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When true, navigates without pushing a new state into history."
                        },
                        {
                            "name": "replaceUrl",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When true, navigates while replacing the current state in history."
                        },
                        {
                            "name": "state",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "Developer-defined state that can be passed to any navigation."
                        }
                    ]
                }
            ]
        }
    },
    "menuitem": {
        "components": {},
        "events": {
            "description": "Defines the custom events used by the component's emitters.",
            "values": [
                {
                    "name": "MenuItemCommandEvent",
                    "description": "Custom command event",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "Event",
                            "description": "Browser event."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem | MegaMenuItem",
                            "description": "Selected menu item."
                        },
                        {
                            "name": "index",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the selected item."
                        }
                    ]
                }
            ]
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "MenuItem",
                    "description": "MenuItem provides the following properties. Note that not all of them may be utilized by the tabmenu component.",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Text of the item."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the item."
                        },
                        {
                            "name": "command",
                            "optional": true,
                            "readonly": false
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "External link to navigate when item is clicked."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "description": "An array of children menuitems."
                        },
                        {
                            "name": "expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Visibility of submenu."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When set as true, disables the menuitem."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the dom element of menuitem is created or not."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies where to open the linked document."
                        },
                        {
                            "name": "escape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether to escape the label or not. Set to false to display html content."
                        },
                        {
                            "name": "routerLinkActiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Configuration for active router link."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines the item as a separator."
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Value of the badge."
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Tooltip of the item."
                        },
                        {
                            "name": "tooltipPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Position of the tooltip item."
                        },
                        {
                            "name": "badgeStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the badge."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the menuitem."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the menuitem."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Tooltip text of the item."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the element."
                        },
                        {
                            "name": "automationId",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Value of HTML data-* attribute."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies tab order of the item."
                        },
                        {
                            "name": "routerLink",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "RouterLink definition for internal navigation."
                        },
                        {
                            "name": "queryParams",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "Query parameters for internal navigation via routerLink."
                        },
                        {
                            "name": "fragment",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Sets the hash fragment for the URL."
                        },
                        {
                            "name": "queryParamsHandling",
                            "optional": true,
                            "readonly": false,
                            "type": "QueryParamsHandling",
                            "description": "How to handle query parameters in the router link for the next navigation. One of:\n   merge : Merge new with current parameters.\n   preserve : Preserve current parameters.k."
                        },
                        {
                            "name": "preserveFragment",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When true, preserves the URL fragment for the next navigation."
                        },
                        {
                            "name": "skipLocationChange",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When true, navigates without pushing a new state into history."
                        },
                        {
                            "name": "replaceUrl",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When true, navigates while replacing the current state in history."
                        },
                        {
                            "name": "iconStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the item's icon."
                        },
                        {
                            "name": "iconClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the item's icon."
                        },
                        {
                            "name": "state",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "Developer-defined state that can be passed to any navigation."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "description": "Options of the item's tooltip."
                        }
                    ]
                }
            ]
        }
    },
    "message": {
        "components": {
            "UIMessage": {
                "description": "Message groups a collection of contents in tabs.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "severity",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "text",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text content."
                        },
                        {
                            "name": "escape",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether displaying messages would be escaped or not."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "Message",
                    "description": "Deines valid options for the message.",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number"
                        },
                        {
                            "name": "sticky",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        }
                    ]
                }
            ]
        }
    },
    "messageservice": {
        "description": "Defines the service used by the component",
        "methods": {
            "description": "Methods used in service.",
            "values": [
                {
                    "name": "add",
                    "parameters": [
                        {
                            "name": "message",
                            "type": "Message",
                            "description": "Message to be added."
                        }
                    ],
                    "returnType": "void",
                    "description": "Inserts single message."
                },
                {
                    "name": "addAll",
                    "parameters": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "description": "Messages to be added."
                        }
                    ],
                    "returnType": "void",
                    "description": "Insterts new messages."
                },
                {
                    "name": "clear",
                    "parameters": [
                        {
                            "name": "key",
                            "type": "string",
                            "description": "Key of the message to be cleared."
                        }
                    ],
                    "returnType": "void",
                    "description": "Clears the message with the given key."
                }
            ]
        }
    },
    "overlayoptions": {
        "components": {},
        "events": {
            "description": "Defines the custom events used by the component's emitters.",
            "values": [
                {
                    "name": "ResponsiveOverlayOptions",
                    "description": "Represents the options for a responsive overlay.",
                    "props": [
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The inline style for the responsive overlay."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The CSS class for the responsive overlay."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The inline style for the content of the responsive overlay."
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The CSS class for the content of the responsive overlay."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The breakpoint for the responsive overlay."
                        },
                        {
                            "name": "media",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The media query for the responsive overlay."
                        },
                        {
                            "name": "direction",
                            "optional": true,
                            "readonly": false,
                            "type": "ResponsiveOverlayDirectionType",
                            "description": "The direction for the responsive overlay."
                        }
                    ]
                },
                {
                    "name": "OverlayOnShowEvent",
                    "description": "Represents an event that occurs when an overlay is shown.",
                    "props": [
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "The overlay element."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "The target element."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayModeType",
                            "description": "The mode of the overlay."
                        }
                    ]
                },
                {
                    "name": "OverlayOnBeforeShowEvent",
                    "description": "Represents an event that occurs before an overlay is shown.",
                    "props": [
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "The overlay element."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "The target element."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayModeType",
                            "description": "The mode of the overlay."
                        }
                    ]
                },
                {
                    "name": "OverlayOnBeforeHideEvent",
                    "description": "Represents an event that occurs before an overlay is hidden.",
                    "props": [
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "The overlay element."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "The target element."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayModeType",
                            "description": "The mode of the overlay."
                        }
                    ]
                },
                {
                    "name": "OverlayOnHideEvent",
                    "description": "Represents an event that occurs when an overlay is hidden.",
                    "props": [
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "The overlay element."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "description": "The target element."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayModeType",
                            "description": "The mode of the overlay."
                        }
                    ]
                }
            ]
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "OverlayListenerOptions",
                    "description": "Represents the options for an overlay listener.",
                    "props": [
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"resize\" | \"scroll\" | \"outside\"",
                            "description": "The type of listener, which can be 'scroll', 'outside', 'resize', or undefined."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayModeType",
                            "description": "The mode of the overlay listener."
                        },
                        {
                            "name": "valid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Indicates whether the overlay listener is valid."
                        }
                    ]
                },
                {
                    "name": "OverlayOptions",
                    "description": "Represents the options for an overlay.",
                    "props": [
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayModeType",
                            "description": "The mode of the overlay."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The inline style for the overlay."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The CSS class for the overlay."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The inline style for the content of the overlay."
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The CSS class for the content of the overlay."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The target element."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | \"body\"",
                            "description": "The element or location where the overlay should be appended."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Indicates whether the overlay should have an auto-generated z-index."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The base z-index value for the overlay."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The transition options for showing the overlay."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The transition options for hiding the overlay."
                        },
                        {
                            "name": "hideOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Indicates whether the overlay should be hidden when the escape key is pressed."
                        },
                        {
                            "name": "listener",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "responsive",
                            "optional": true,
                            "readonly": false,
                            "type": "ResponsiveOverlayOptions",
                            "description": "The options for a responsive overlay."
                        },
                        {
                            "name": "onBeforeShow",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "onShow",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "onBeforeHide",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "onHide",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "onAnimationStart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        },
                        {
                            "name": "onAnimationDone",
                            "optional": true,
                            "readonly": false,
                            "type": "Function"
                        }
                    ]
                }
            ]
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": [
                {
                    "name": "OverlayModeType",
                    "value": "\"modal\" | \"overlay\" | undefined",
                    "description": "Represents the type of overlay mode, which can be 'modal', 'overlay', or undefined."
                },
                {
                    "name": "ResponsiveOverlayDirectionType",
                    "value": "\"center\" | \"top\" | \"top-start\" | \"top-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\" | \"right\" | \"right-start\" | \"right-end\" | undefined",
                    "description": "Represents the type of direction for a responsive overlay, which can be one of the specified values or undefined."
                }
            ]
        }
    },
    "overlayservice": {
        "components": {}
    },
    "primengconfig": {
        "components": {}
    },
    "scrolleroptions": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "ScrollerOptions",
                    "description": "Options for the scroller.",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "itemSize",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The height/width of item according to orientation."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Height of the scroll viewport."
                        },
                        {
                            "name": "scrollWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Width of the scroll viewport."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"vertical\" | \"horizontal\"",
                            "description": "The orientation of scrollbar."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Used to specify how many items to load in each load method in lazy mode."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay in scroll before new data is loaded."
                        },
                        {
                            "name": "resizeDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay after window's resize finishes."
                        },
                        {
                            "name": "appendOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies whether the scroller should be displayed inline or not."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "If disabled, the scroller feature is eliminated and the content is displayed directly."
                        },
                        {
                            "name": "loaderDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Used to implement a custom loader instead of using the loader feature in the scroller."
                        },
                        {
                            "name": "columns",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Columns to display."
                        },
                        {
                            "name": "showSpacer",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Used to implement a custom spacer instead of using the spacer feature in the scroller."
                        },
                        {
                            "name": "showLoader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines whether to show loader."
                        },
                        {
                            "name": "numToleratedItems",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Determines how many additional elements to add to the DOM outside of the view. According to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number. Default value is half the number of items shown in the view."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines whether the data is loaded."
                        },
                        {
                            "name": "autoSize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines whether to dynamically change the height or width of scrollable container."
                        },
                        {
                            "name": "trackBy",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "description": "Function to optimize the dom operations by delegating to ngForTrackBy, default algoritm checks for object identity."
                        },
                        {
                            "name": "onLazyLoad",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "description": "Callback to invoke in lazy mode to load new data."
                        },
                        {
                            "name": "onScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "description": "Callback to invoke when scroll position changes."
                        },
                        {
                            "name": "onScrollIndexChange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "description": "Callback to invoke when scroll position and item's range in view changes."
                        }
                    ]
                }
            ]
        }
    },
    "selectitem": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "SelectItem",
                    "description": "Represents an option item.",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "T"
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ]
                }
            ]
        }
    },
    "selectitemgroup": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "SelectItemGroup",
                    "description": "Represents a group of select items.",
                    "props": [
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectItem<any>[]"
                        }
                    ]
                }
            ]
        }
    },
    "shared": {
        "components": {}
    },
    "sortevent": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "SortEvent",
                    "description": "Represents an event triggered when sorting is applied.",
                    "props": [
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]"
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "field",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "order",
                            "optional": true,
                            "readonly": false,
                            "type": "number"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "SortMeta[]"
                        }
                    ]
                }
            ]
        }
    },
    "sortmeta": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "SortMeta",
                    "description": "Represents metadata for sorting.",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "number"
                        }
                    ]
                }
            ]
        }
    },
    "tablestate": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "TableState",
                    "description": "Represents the state of a table component.",
                    "props": [
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The index of the first row to be displayed."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The number of rows to be displayed per page."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The field used for sorting."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "The sort order."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "SortMeta[]",
                            "description": "An array of sort metadata when multiple sorting is applied."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "The filters to be applied to the table."
                        },
                        {
                            "name": "columnWidths",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The column widths for the table."
                        },
                        {
                            "name": "tableWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The width of the table."
                        },
                        {
                            "name": "wrapperWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "The width of the wrapper element containing the table."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "The selected item(s) in the table."
                        },
                        {
                            "name": "columnOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "description": "The order of the columns in the table."
                        },
                        {
                            "name": "expandedRowKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "The keys of the expanded rows in the table."
                        }
                    ]
                }
            ]
        }
    },
    "tooltipoptions": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "TooltipOptions",
                    "description": "Defines options of Tooltip.",
                    "props": [
                        {
                            "name": "tooltipLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of tooltip."
                        },
                        {
                            "name": "tooltipPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "description": "Position of tooltip."
                        },
                        {
                            "name": "tooltipEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "\"focus\" | \"hover\"",
                            "description": "Event to show the tooltip."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "positionStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Type of CSS position."
                        },
                        {
                            "name": "tooltipStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tooltip."
                        },
                        {
                            "name": "tooltipZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Whether the z-index should be managed automatically to always go on top or have a fixed value."
                        },
                        {
                            "name": "escape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "By default the tooltip contents are rendered as text. Set to false to support html tags in the content."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "positionTop",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Specifies the additional vertical offset of the tooltip from its default position."
                        },
                        {
                            "name": "positionLeft",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Specifies the additional horizontal offset of the tooltip from its default position."
                        },
                        {
                            "name": "showDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay to show the tooltip in milliseconds."
                        },
                        {
                            "name": "hideDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay to hide the tooltip in milliseconds."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Time to wait in milliseconds to hide the tooltip even it is active."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "When present, it adds a custom id to the tooltip."
                        }
                    ]
                }
            ]
        }
    },
    "translation": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "Translation",
                    "description": "Represents a set of translated strings used in a component or application.",
                    "props": [
                        {
                            "name": "startsWith",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "contains",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "notContains",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "endsWith",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "equals",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "notEquals",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "noFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "lt",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "lte",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "gt",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "gte",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "is",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "isNot",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "before",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "after",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "dateIs",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "dateIsNot",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "dateBefore",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "dateAfter",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "clear",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "apply",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "matchAll",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "matchAny",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "addRule",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "removeRule",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "reject",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "choose",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "upload",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "cancel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "fileSizeTypes",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]"
                        },
                        {
                            "name": "dayNames",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]"
                        },
                        {
                            "name": "dayNamesShort",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]"
                        },
                        {
                            "name": "dayNamesMin",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]"
                        },
                        {
                            "name": "monthNames",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]"
                        },
                        {
                            "name": "monthNamesShort",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]"
                        },
                        {
                            "name": "dateFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "firstDayOfWeek",
                            "optional": true,
                            "readonly": false,
                            "type": "number"
                        },
                        {
                            "name": "today",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "weekHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "weak",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "medium",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "strong",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "passwordPrompt",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "pending",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "chooseYear",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "chooseMonth",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "chooseDate",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "prevDecade",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "nextDecade",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "prevYear",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "nextYear",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "prevMonth",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "nextMonth",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "prevHour",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "nextHour",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "prevMinute",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "nextMinute",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "prevSecond",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "nextSecond",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "am",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "pm",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "searchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "emptySearchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "aria",
                            "optional": true,
                            "readonly": false,
                            "type": "Aria"
                        }
                    ]
                },
                {
                    "name": "Aria",
                    "description": "Represents a set of translated HTML attributes used in a component or application.",
                    "props": [
                        {
                            "name": "trueLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "falseLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "nullLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "star",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "stars",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "unselectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "close",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "previous",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "next",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "navigation",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "scrollTop",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "moveTop",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "moveUp",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "moveDown",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "moveBottom",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "moveToTarget",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "moveToSource",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "moveAllToTarget",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "moveAllToSource",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "pageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "firstPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "lastPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "nextPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "prevPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "rowsPerPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "previousPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "jumpToPageDropdownLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "jumpToPageInputLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "selectRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "unselectRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "expandRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "collapseRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "showFilterMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "hideFilterMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "filterOperator",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "filterConstraint",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "editRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "saveEdit",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "cancelEdit",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "listView",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "gridView",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "slide",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "slideNumber",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "zoomImage",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "zoomIn",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "zoomOut",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "rotateRight",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "rotateLeft",
                            "optional": true,
                            "readonly": false,
                            "type": "string"
                        }
                    ]
                }
            ]
        }
    },
    "translationkeys": {
        "components": {}
    },
    "treedragdropservice": {
        "components": {}
    },
    "treenode": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "TreeNode",
                    "description": "Represents a node in a tree data structure.",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the node."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "T",
                            "description": "Data represented by the node."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the node to display next to content."
                        },
                        {
                            "name": "expandedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon to use in expanded state."
                        },
                        {
                            "name": "collapsedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon to use in collapsed state."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode<T>[]",
                            "description": "An array of treenodes as children."
                        },
                        {
                            "name": "leaf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies if the node has children. Used in lazy loading."
                        },
                        {
                            "name": "expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Expanded state of the node."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Type of the node to match a template."
                        },
                        {
                            "name": "parent",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode<T>",
                            "description": "Parent of the node."
                        },
                        {
                            "name": "partialSelected",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if value is partially selected."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the node."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the node."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if the node is draggable."
                        },
                        {
                            "name": "droppable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if the node is droppable."
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the node is selectable when selection mode is enabled."
                        },
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Mandatory unique key of the node."
                        }
                    ]
                }
            ]
        }
    },
    "treenodedragevent": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "TreeNodeDragEvent",
                    "description": "Represents the event data for a tree node drag operation.",
                    "props": [
                        {
                            "name": "tree",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Tree instance."
                        },
                        {
                            "name": "node",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode<any>",
                            "description": "Node to be dragged."
                        },
                        {
                            "name": "subNodes",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode<any>[]",
                            "description": "Child nodes of dragged node."
                        },
                        {
                            "name": "index",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of dragged node."
                        },
                        {
                            "name": "scope",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Scope of dragged node."
                        }
                    ]
                }
            ]
        }
    },
    "treetablenode": {
        "components": {},
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "TreeTableNode",
                    "description": "Tree table node element.",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the node."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Data represented by the node."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the node to display next to content."
                        },
                        {
                            "name": "expandedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon to use in expanded state."
                        },
                        {
                            "name": "collapsedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon to use in collapsed state."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode<any>[]",
                            "description": "An array of treenodes as children."
                        },
                        {
                            "name": "leaf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies if the node has children. Used in lazy loading."
                        },
                        {
                            "name": "expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Expanded state of the node."
                        },
                        {
                            "name": "parent",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode<any>",
                            "description": "Parent of the node."
                        },
                        {
                            "name": "partialSelected",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if value is partially selected."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the node."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the node."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if the node is draggable."
                        },
                        {
                            "name": "droppable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if the node is droppable."
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the node is selectable when selection mode is enabled."
                        },
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Mandatory unique key of the node."
                        },
                        {
                            "name": "originalEvent",
                            "optional": true,
                            "readonly": false,
                            "type": "Event",
                            "description": "Browser event."
                        },
                        {
                            "name": "rowNode",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Row of the node."
                        },
                        {
                            "name": "node",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode<T>",
                            "description": "Node instance."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Selection type."
                        },
                        {
                            "name": "index",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Node index."
                        },
                        {
                            "name": "level",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Node level."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Boolean value indicates if node is in viewport."
                        }
                    ]
                }
            ]
        }
    },
    "autocomplete": {
        "components": {
            "AutoComplete": {
                "description": "AutoComplete is an input component that provides real-time suggestions when being typed.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "minLength",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minimum number of characters to initiate a search."
                        },
                        {
                            "name": "delay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Delay between keystrokes to wait before sending a query."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the overlay panel element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "panelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the overlay panel element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "inputStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Hint text for the input field."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the input cannot be typed."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Maximum height of the suggestions panel."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "virtualScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the data should be loaded on demand during scroll."
                        },
                        {
                            "name": "virtualScrollItemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Height of an item in the list for VirtualScrolling."
                        },
                        {
                            "name": "virtualScrollOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollerOptions",
                            "description": "Whether to use the scroller feature. The properties of scroller component can be used like an object in it."
                        },
                        {
                            "name": "maxlength",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Maximum number of character allows in the input field."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "required",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Size of the input field."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "autoHighlight",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, highlights the first item in the list by default."
                        },
                        {
                            "name": "forceSelection",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "text",
                            "description": "Type of the input, defaults to \"text\"."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "dropdownAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the dropdown button for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies one or more IDs in the DOM that labels the input field."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon class of the dropdown icon."
                        },
                        {
                            "name": "unique",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Ensures uniqueness of selected items on multiple mode."
                        },
                        {
                            "name": "group",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display options as grouped when nested options are provided."
                        },
                        {
                            "name": "completeOnFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to run a query when input receives focus."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Field of a suggested object to resolve and display.",
                            "deprecated": "use optionLabel property instead"
                        },
                        {
                            "name": "dropdown",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button next to the input field when enabled."
                        },
                        {
                            "name": "showEmptyMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the empty message or not."
                        },
                        {
                            "name": "dropdownMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "blank",
                            "description": "Specifies the behavior dropdown button. Default \"blank\" mode sends an empty string and \"current\" mode sends the input value."
                        },
                        {
                            "name": "multiple",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if multiple values can be selected."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "A property to uniquely identify a value in options."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when there is no data. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        },
                        {
                            "name": "autofocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "autocomplete",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "off",
                            "description": "Used to define a string that autocomplete attribute the current element."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "items",
                            "description": "Name of the options field of an option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "Name of the label field of an option group."
                        },
                        {
                            "name": "overlayOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayOptions",
                            "description": "Options for the overlay element."
                        },
                        {
                            "name": "suggestions",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of suggestions to display."
                        },
                        {
                            "name": "itemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Element dimensions of option for virtual scrolling.",
                            "deprecated": "use virtualScrollItemSize property instead."
                        },
                        {
                            "name": "optionLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string | Function",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the component."
                        },
                        {
                            "name": "searchMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when the search is active. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when filtering does not return any results. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "searchLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Locale to use in searching. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the hovered option will be focused."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "completeMethod",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteCompleteEvent"
                                }
                            ],
                            "description": "Callback to invoke to search for suggestions."
                        },
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "onUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteUnselectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a selected value is removed."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "onDropdownClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteDropdownClickEvent"
                                }
                            ],
                            "description": "Callback to invoke to when dropdown button is clicked."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when clear button is clicked."
                        },
                        {
                            "name": "onKeyUp",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "KeyboardEvent"
                                }
                            ],
                            "description": "Callback to invoke on input key up."
                        },
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke on overlay is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke on overlay is hidden."
                        },
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteLazyLoadEvent"
                                }
                            ],
                            "description": "Callback to invoke on lazy load data."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "AutoCompleteCompleteEvent",
                        "description": "Custom complete event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "query",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Selected option value."
                            }
                        ]
                    },
                    {
                        "name": "AutoCompleteDropdownClickEvent",
                        "description": "Custom click event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "query",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Selected option value."
                            }
                        ]
                    },
                    {
                        "name": "AutoCompleteSelectEvent",
                        "description": "Custom select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Selected value."
                            }
                        ]
                    },
                    {
                        "name": "AutoCompleteUnselectEvent",
                        "description": "Custom unselect event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Removed value."
                            }
                        ]
                    },
                    {
                        "name": "AutoCompleteLazyLoadEvent",
                        "description": "Custom lazy load event.",
                        "props": [
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "First element in viewport."
                            },
                            {
                                "name": "last",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Last element in viewport."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "autocomplete",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Option.\n  \t index: number, // Option index.\n  }",
                                "description": "option data."
                            }
                        ],
                        "description": "Custom item template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "group",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Option group.\n  }",
                                "description": "group data."
                            }
                        ],
                        "description": "Custom group template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "selectedItem",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Selected value.\n  }",
                                "description": "selected item data."
                            }
                        ],
                        "description": "Custom selected item template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "empty",
                        "parameters": [],
                        "description": "Custom empty template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "loader",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: ScrollerOptions, // Virtual scroller options.\n  }",
                                "description": "scroller options."
                            }
                        ],
                        "description": "Custom loader template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "removetokenicon",
                        "parameters": [],
                        "description": "Custom remove token icon template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "loadingicon",
                        "parameters": [],
                        "description": "Custom loading icon template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    },
                    {
                        "parent": "autocomplete",
                        "name": "dropdownicon",
                        "parameters": [],
                        "description": "Custom dropdown icon template."
                    }
                ]
            }
        }
    },
    "autofocus": {
        "components": {
            "AutoFocus": {
                "description": "AutoFocus manages focus on focusable element on load.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "autofocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        }
                    ]
                }
            }
        }
    },
    "avatar": {
        "components": {
            "Avatar": {
                "description": "Avatar represents people using icons, labels and images.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines the icon to display."
                        },
                        {
                            "name": "image",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "\"normal\" | \"large\" | \"xlarge\"",
                            "default": "normal",
                            "description": "Size of the element."
                        },
                        {
                            "name": "shape",
                            "optional": false,
                            "readonly": false,
                            "type": "\"square\" | \"circle\"",
                            "default": "square",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onImageError",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "This event is triggered if an error occurs while loading an image file."
                        }
                    ]
                }
            }
        }
    },
    "avatargroup": {
        "components": {
            "AvatarGroup": {
                "description": "AvatarGroup is a helper component for Avatar.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component"
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        }
                    ]
                }
            }
        }
    },
    "badge": {
        "components": {
            "BadgeDirective": {
                "description": "Badge Directive is directive usage of badge component.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "iconPos",
                            "optional": false,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "left",
                            "description": "Icon position of the component."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When specified, disables the component."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "\"large\" | \"xlarge\"",
                            "description": "Size of the badge, valid options are \"large\" and \"xlarge\"."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Value to display inside the badge."
                        },
                        {
                            "name": "severity",
                            "optional": false,
                            "readonly": false,
                            "type": "\"success\" | \"warning\" | \"info\" | \"danger\"",
                            "description": "Severity type of the badge."
                        }
                    ]
                }
            },
            "Badge": {
                "description": "Badge is a small status indicator for another element.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "\"large\" | \"xlarge\"",
                            "description": "Size of the badge, valid options are \"large\" and \"xlarge\"."
                        },
                        {
                            "name": "severity",
                            "optional": false,
                            "readonly": false,
                            "type": "\"success\" | \"warning\" | \"info\" | \"danger\"",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Value to display inside the badge."
                        },
                        {
                            "name": "badgeDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, disables the component."
                        }
                    ]
                }
            }
        }
    },
    "baseicon": {
        "components": {}
    },
    "blockui": {
        "components": {
            "BlockUI": {
                "description": "BlockUI can either block other components or the whole page.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Name of the local ng-template variable referring to another component."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "blocked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Current blocked state as a boolean."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "blockui",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    }
                ]
            }
        }
    },
    "breadcrumb": {
        "components": {
            "Breadcrumb": {
                "description": "Breadcrumb provides contextual information about page hierarchy.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "home",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "description": "MenuItem configuration for the home icon."
                        },
                        {
                            "name": "homeAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the home icon for accessibility."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onItemClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "BreadcrumbItemClickEvent"
                                }
                            ],
                            "description": "Fired when an item is selected."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "BreadcrumbItemClickEvent",
                        "description": "Custom select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "item",
                                "optional": false,
                                "readonly": false,
                                "type": "MenuItem",
                                "description": "Selected menu item ."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "breadcrumb",
                        "name": "separator",
                        "parameters": [],
                        "description": "Custom template of separator."
                    }
                ]
            }
        }
    },
    "button": {
        "components": {
            "ButtonDirective": {
                "description": "Button directive is an extension to button component.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "iconPos",
                            "optional": false,
                            "readonly": false,
                            "type": "ButtonIconPosition",
                            "default": "left",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Uses to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text of the button."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the icon."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether the button is in loading state."
                        }
                    ]
                }
            },
            "Button": {
                "description": "Button is an extension to standard button element with icons and theming.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "button",
                            "description": "Type of the button."
                        },
                        {
                            "name": "iconPos",
                            "optional": false,
                            "readonly": false,
                            "type": "ButtonIconPosition",
                            "default": "left",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the icon."
                        },
                        {
                            "name": "badge",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Value of the badge."
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Uses to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the button is in loading state."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "raised",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation."
                        },
                        {
                            "name": "rounded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a circular border radius to the button."
                        },
                        {
                            "name": "text",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially."
                        },
                        {
                            "name": "plain",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a plain textual class to the button without a background initially."
                        },
                        {
                            "name": "severity",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines the style of the button."
                        },
                        {
                            "name": "outlined",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a border class without a background initially."
                        },
                        {
                            "name": "link",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a link style to the button."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "description": "Defines the size of the button."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "badgeClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the badge."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that autocomplete attribute the current element."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent"
                                }
                            ],
                            "description": "Callback to execute when button is clicked.\nThis event is intended to be used with the <p-button> component. Using a regular <button> element, use (click)."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to execute when button is focused.\nThis event is intended to be used with the <p-button> component. Using a regular <button> element, use (focus)."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to execute when button loses focus.\nThis event is intended to be used with the <p-button> component. Using a regular <button> element, use (blur)."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "button",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "button",
                        "name": "icon",
                        "parameters": [],
                        "description": "Custom template of icon."
                    },
                    {
                        "parent": "button",
                        "name": "loadingicon",
                        "parameters": [],
                        "description": "Custom template of loadingicon."
                    }
                ]
            }
        }
    },
    "calendar": {
        "components": {
            "Calendar": {
                "description": "Calendar also known as DatePicker, is a form component to work with dates.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "inputStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "iconAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the icon button for accessibility."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, disables the component."
                        },
                        {
                            "name": "dateFormat",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Format of the date which can also be defined at locale settings."
                        },
                        {
                            "name": "multipleSeparator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ",",
                            "description": "Separator for multiple selection mode."
                        },
                        {
                            "name": "rangeSeparator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "-",
                            "description": "Separator for joining start and end dates on range selection mode."
                        },
                        {
                            "name": "inline",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays the calendar as inline. Default is false for popup mode."
                        },
                        {
                            "name": "showOtherMonths",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the selectOtherMonths option."
                        },
                        {
                            "name": "selectOtherMonths",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether days in other months shown before or after the current month are selectable. This only applies if the showOtherMonths option is set to true."
                        },
                        {
                            "name": "showIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays a button with icon next to input."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the calendar button."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having#mydiv as variable name)."
                        },
                        {
                            "name": "readonlyInput",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, prevents entering the date manually with keyboard."
                        },
                        {
                            "name": "shortYearCutoff",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "+10",
                            "description": "The cutoff year for determining the century for a date."
                        },
                        {
                            "name": "monthNavigator",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the month should be rendered as a dropdown instead of text.",
                            "deprecated": "Navigator is always on."
                        },
                        {
                            "name": "yearNavigator",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the year should be rendered as a dropdown instead of text.",
                            "deprecated": "Navigator is always on."
                        },
                        {
                            "name": "hourFormat",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "24",
                            "description": "Specifies 12 or 24 hour format."
                        },
                        {
                            "name": "timeOnly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display timepicker only."
                        },
                        {
                            "name": "stepHour",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Hours to change per step."
                        },
                        {
                            "name": "stepMinute",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minutes to change per step."
                        },
                        {
                            "name": "stepSecond",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Seconds to change per step."
                        },
                        {
                            "name": "showSeconds",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the seconds in time picker."
                        },
                        {
                            "name": "required",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "showOnFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When disabled, datepicker will not be visible with input focus."
                        },
                        {
                            "name": "showWeek",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, calendar will show week numbers."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "dataType",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "date",
                            "description": "Type of the value to write back to ngModel, default is date and alternative is string."
                        },
                        {
                            "name": "selectionMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"multiple\" | \"range\" | \"single\"",
                            "default": "single",
                            "description": "Defines the quantity of the selection, valid values are \"single\", \"multiple\" and \"range\"."
                        },
                        {
                            "name": "maxDateCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Maximum number of selectable dates in multiple mode."
                        },
                        {
                            "name": "showButtonBar",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display today and clear buttons at the footer"
                        },
                        {
                            "name": "todayButtonStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "p-button-text",
                            "description": "Style class of the today button."
                        },
                        {
                            "name": "clearButtonStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "p-button-text",
                            "description": "Style class of the clear button."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "panelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the datetimepicker container element."
                        },
                        {
                            "name": "panelStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the datetimepicker container element."
                        },
                        {
                            "name": "keepInvalid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Keep invalid value when input blur."
                        },
                        {
                            "name": "hideOnDateTimeSelect",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to hide the overlay on date selection."
                        },
                        {
                            "name": "touchUI",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, calendar overlay is displayed as optimized for touch devices."
                        },
                        {
                            "name": "timeSeparator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ":",
                            "description": "Separator of time selector."
                        },
                        {
                            "name": "focusTrap",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, can only focus on elements inside the calendar."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "minDate",
                            "optional": false,
                            "readonly": false,
                            "type": "Date",
                            "description": "The minimum selectable date."
                        },
                        {
                            "name": "maxDate",
                            "optional": false,
                            "readonly": false,
                            "type": "Date",
                            "description": "The maximum selectable date."
                        },
                        {
                            "name": "disabledDates",
                            "optional": false,
                            "readonly": false,
                            "type": "Date[]",
                            "description": "Array with dates that should be disabled (not selectable)."
                        },
                        {
                            "name": "disabledDays",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "description": "Array with weekday numbers that should be disabled (not selectable)."
                        },
                        {
                            "name": "yearRange",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The range of years displayed in the year drop-down in (nnnn:nnnn) format such as (2000:2020).",
                            "deprecated": "Years are based on decades by default."
                        },
                        {
                            "name": "showTime",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether to display timepicker."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarResponsiveOptions[]",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "numberOfMonths",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of months to display."
                        },
                        {
                            "name": "firstDayOfWeek",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Defines the first of the week for various date calculations."
                        },
                        {
                            "name": "locale",
                            "optional": false,
                            "readonly": false,
                            "type": "LocaleSettings"
                        },
                        {
                            "name": "view",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarTypeView",
                            "description": "Type of view to display, valid values are \"date\" for datepicker and \"month\" for month picker."
                        },
                        {
                            "name": "defaultDate",
                            "optional": false,
                            "readonly": false,
                            "type": "Date",
                            "description": "Set the date to highlight on first opening if the field is blank."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke on focus of input field."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke on blur of input field."
                        },
                        {
                            "name": "onClose",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AnimationEvent_2"
                                }
                            ],
                            "description": "Callback to invoke when date panel closed."
                        },
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "Date"
                                }
                            ],
                            "description": "Callback to invoke on date select."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when input field cleared."
                        },
                        {
                            "name": "onInput",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when input field is being typed."
                        },
                        {
                            "name": "onTodayClick",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "Date"
                                }
                            ],
                            "description": "Callback to invoke when today button is clicked."
                        },
                        {
                            "name": "onClearClick",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when clear button is clicked."
                        },
                        {
                            "name": "onMonthChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "CalendarMonthChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when a month is changed using the navigators."
                        },
                        {
                            "name": "onYearChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "CalendarYearChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when a year is changed using the navigators."
                        },
                        {
                            "name": "onClickOutside",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when clicked outside of the date panel."
                        },
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when datepicker panel is shown."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "CalendarYearChangeEvent",
                        "description": "Custom Calendar year change event.",
                        "props": [
                            {
                                "name": "month",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "New month."
                            },
                            {
                                "name": "year",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "New year."
                            }
                        ]
                    },
                    {
                        "name": "CalendarMonthChangeEvent",
                        "description": "Custom Calendar month change event.",
                        "props": [
                            {
                                "name": "month",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "New month."
                            },
                            {
                                "name": "year",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "New year."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "calendar",
                        "name": "date",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: Date, // Date value of the component.\n  }",
                                "description": "date value instance."
                            }
                        ],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "calendar",
                        "name": "decade",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: Date, // An array containing the start and and year of a decade to display at header of the year picker.\n  }",
                                "description": "date value instance."
                            }
                        ],
                        "description": "Custom decade template"
                    },
                    {
                        "parent": "calendar",
                        "name": "disabledDate",
                        "parameters": [],
                        "description": "Custom disabled date template."
                    },
                    {
                        "parent": "calendar",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "calendar",
                        "name": "inputIconTemplate",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t clickCallBack: undefined, // undefined\n  }",
                                "description": "input icon template params."
                            }
                        ],
                        "description": "Custom input icon template."
                    },
                    {
                        "parent": "calendar",
                        "name": "previousicon",
                        "parameters": [],
                        "description": "Custom previous icon template."
                    },
                    {
                        "parent": "calendar",
                        "name": "nexticon",
                        "parameters": [],
                        "description": "Custom next icon template."
                    },
                    {
                        "parent": "calendar",
                        "name": "triggericon",
                        "parameters": [],
                        "description": "Custom dropdown trigger icon template."
                    },
                    {
                        "parent": "calendar",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    },
                    {
                        "parent": "calendar",
                        "name": "decrementicon",
                        "parameters": [],
                        "description": "Custom decrement icon template."
                    },
                    {
                        "parent": "calendar",
                        "name": "incrementicon",
                        "parameters": [],
                        "description": "Custom increment icon template."
                    },
                    {
                        "parent": "calendar",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom footer template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "LocaleSettings",
                        "description": "Locale settings options.",
                        "props": [
                            {
                                "name": "firstDayOfWeek",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Day value."
                            },
                            {
                                "name": "dayNames",
                                "optional": true,
                                "readonly": false,
                                "type": "string[]",
                                "description": "Day names."
                            },
                            {
                                "name": "dayNamesShort",
                                "optional": true,
                                "readonly": false,
                                "type": "string[]",
                                "description": "Shortened day names."
                            },
                            {
                                "name": "dayNamesMin",
                                "optional": true,
                                "readonly": false,
                                "type": "string[]",
                                "description": "Minimum days names."
                            },
                            {
                                "name": "monthNames",
                                "optional": true,
                                "readonly": false,
                                "type": "string[]",
                                "description": "Month names."
                            },
                            {
                                "name": "monthNamesShort",
                                "optional": true,
                                "readonly": false,
                                "type": "string[]",
                                "description": "Shortened month names."
                            },
                            {
                                "name": "today",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Value of today date string."
                            },
                            {
                                "name": "clear",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Clear."
                            },
                            {
                                "name": "dateFormat",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Date format."
                            },
                            {
                                "name": "weekHeader",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Week header."
                            }
                        ]
                    },
                    {
                        "name": "Month",
                        "description": "Month interface.",
                        "props": [
                            {
                                "name": "month",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Mont value."
                            },
                            {
                                "name": "year",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Year value."
                            },
                            {
                                "name": "dates",
                                "optional": true,
                                "readonly": false,
                                "type": "Date[]",
                                "description": "Array of dates."
                            },
                            {
                                "name": "weekNumbers",
                                "optional": true,
                                "readonly": false,
                                "type": "number[]",
                                "description": "Array of week numbers."
                            }
                        ]
                    },
                    {
                        "name": "CalendarResponsiveOptions",
                        "description": "Custom Calendar responsive options metadata.",
                        "props": [
                            {
                                "name": "breakpoint",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Breakpoint for responsive mode. Exp;"
                            },
                            {
                                "name": "numMonths",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "The number of visible months on breakpoint."
                            }
                        ]
                    }
                ]
            },
            "types": {
                "description": "Defines the custom types used by the module.",
                "values": [
                    {
                        "name": "CalendarTypeView",
                        "value": "\"date\" | \"month\" | \"year\"",
                        "description": "Custom type for the calendar views."
                    },
                    {
                        "name": "NavigationState",
                        "value": "{\n    \"backward\": \"boolean\",\n    \"button\": \"boolean\"\n}",
                        "description": "Custom type for the calendar navigation state."
                    }
                ]
            }
        }
    },
    "card": {
        "components": {
            "Card": {
                "description": "Card is a flexible container component.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Header of the card."
                        },
                        {
                            "name": "subheader",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Subheader of the card."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "card",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom template of header."
                    },
                    {
                        "parent": "card",
                        "name": "title",
                        "parameters": [],
                        "description": "Custom template of title."
                    },
                    {
                        "parent": "card",
                        "name": "subtitle",
                        "parameters": [],
                        "description": "Custom template of subtitle."
                    },
                    {
                        "parent": "card",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "card",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom template of footer."
                    }
                ]
            }
        }
    },
    "carousel": {
        "components": {
            "Carousel": {
                "description": "Carousel is a content slider featuring various customization options.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "numScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of items to scroll."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselResponsiveOptions[]",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "orientation",
                            "optional": false,
                            "readonly": false,
                            "type": "\"vertical\" | \"horizontal\"",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component."
                        },
                        {
                            "name": "verticalViewPortHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "300px",
                            "description": "Height of the viewport in vertical layout."
                        },
                        {
                            "name": "contentClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of main content."
                        },
                        {
                            "name": "indicatorsContentClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the indicator items."
                        },
                        {
                            "name": "indicatorsContentStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the indicator items."
                        },
                        {
                            "name": "indicatorStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the indicators."
                        },
                        {
                            "name": "indicatorStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Style of the indicators."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "circular",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "showIndicators",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "showNavigators",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in container."
                        },
                        {
                            "name": "autoplayInterval",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Time in milliseconds to scroll items automatically."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the viewport container."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onPage",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "CarouselPageEvent"
                                }
                            ],
                            "description": "Callback to invoke after scroll."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "CarouselPageEvent",
                        "description": "Custom page event.",
                        "props": [
                            {
                                "name": "page",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Current page."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "carousel",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom template of header."
                    },
                    {
                        "parent": "carousel",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Data of the item.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom template of item."
                    },
                    {
                        "parent": "carousel",
                        "name": "previousicon",
                        "parameters": [],
                        "description": "Custom template of previousicon."
                    },
                    {
                        "parent": "carousel",
                        "name": "nexticon",
                        "parameters": [],
                        "description": "Custom template of nexticon."
                    },
                    {
                        "parent": "carousel",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom template of footer."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "CarouselResponsiveOptions",
                        "description": "Responsive options of the component.",
                        "props": [
                            {
                                "name": "breakpoint",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Breakpoint for responsive mode. Exp;"
                            },
                            {
                                "name": "numVisible",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "The number of visible items on breakpoint."
                            },
                            {
                                "name": "numScroll",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "The number of scrolled items on breakpoint."
                            }
                        ]
                    }
                ]
            }
        }
    },
    "cascadeselect": {
        "components": {
            "CascadeSelect": {
                "description": "CascadeSelect is a form component to select a value from a nested structure of options.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the component"
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Determines if the option will be selected on focus."
                        },
                        {
                            "name": "searchMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when the search is active. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when there is no data. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "emptySearchMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeNG locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when filtering does not return any results. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "searchLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in searching. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Name of the disabled field of an option."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "string | string[]",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string | string[]",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": false,
                            "readonly": false,
                            "type": "string | string[]",
                            "description": "Property name or getter function to retrieve the items of a group."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Selected value of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "inputLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the input for accessibility."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Id of the element or \"body\" for document where the overlay should be appended to."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "panelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "overlayOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayOptions",
                            "description": "Whether to use overlay API feature. The properties of overlay API can be used like an object in it."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the show animation.",
                            "deprecated": "deprecated since v14.2.0, use overlayOptions property instead."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the hide animation.",
                            "deprecated": "deprecated since v14.2.0, use overlayOptions property instead."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "CascadeSelectChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "onGroupChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when a group changes."
                        },
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "CascadeSelectShowEvent"
                                }
                            ],
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "CascadeSelectHideEvent"
                                }
                            ],
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when the clear token is clicked."
                        },
                        {
                            "name": "onBeforeShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "CascadeSelectBeforeShowEvent"
                                }
                            ],
                            "description": "Callback to invoke before overlay is shown."
                        },
                        {
                            "name": "onBeforeHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "CascadeSelectBeforeHideEvent"
                                }
                            ],
                            "description": "Callback to invoke before overlay is hidden."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to invoke when input receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to invoke when input loses focus."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "CascadeSelectShowEvent",
                        "description": "Custom panel show event.",
                        "props": [
                            {
                                "name": "overlay",
                                "optional": true,
                                "readonly": false,
                                "type": "HTMLElement | ElementRef<any> | TemplateRef<any> | Overlay",
                                "description": "Overlay element."
                            },
                            {
                                "name": "target",
                                "optional": true,
                                "readonly": false,
                                "type": "HTMLElement | ElementRef<any> | TemplateRef<any> | Overlay",
                                "description": "Target element."
                            },
                            {
                                "name": "overlayMode",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Overlay mode."
                            }
                        ]
                    },
                    {
                        "name": "CascadeSelectHideEvent",
                        "description": "Custom panel hide event.",
                        "props": [
                            {
                                "name": "overlay",
                                "optional": true,
                                "readonly": false,
                                "type": "HTMLElement | ElementRef<any> | TemplateRef<any> | Overlay",
                                "description": "Overlay element."
                            },
                            {
                                "name": "target",
                                "optional": true,
                                "readonly": false,
                                "type": "HTMLElement | ElementRef<any> | TemplateRef<any> | Overlay",
                                "description": "Target element."
                            },
                            {
                                "name": "overlayMode",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Overlay mode."
                            }
                        ]
                    },
                    {
                        "name": "CascadeSelectBeforeShowEvent",
                        "description": "Custom panel show event emits right before the panel is shown.",
                        "props": [
                            {
                                "name": "overlay",
                                "optional": true,
                                "readonly": false,
                                "type": "HTMLElement | ElementRef<any> | TemplateRef<any> | Overlay",
                                "description": "Overlay element."
                            },
                            {
                                "name": "target",
                                "optional": true,
                                "readonly": false,
                                "type": "HTMLElement | ElementRef<any> | TemplateRef<any> | Overlay",
                                "description": "Target element."
                            },
                            {
                                "name": "overlayMode",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Overlay mode."
                            }
                        ]
                    },
                    {
                        "name": "CascadeSelectBeforeHideEvent",
                        "description": "Custom panel hide event emits right before the panel is hidden.",
                        "props": [
                            {
                                "name": "overlay",
                                "optional": true,
                                "readonly": false,
                                "type": "HTMLElement | ElementRef<any> | TemplateRef<any> | Overlay",
                                "description": "Overlay element."
                            },
                            {
                                "name": "target",
                                "optional": true,
                                "readonly": false,
                                "type": "HTMLElement | ElementRef<any> | TemplateRef<any> | Overlay",
                                "description": "Target element."
                            },
                            {
                                "name": "overlayMode",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Overlay mode."
                            }
                        ]
                    },
                    {
                        "name": "CascadeSelectChangeEvent",
                        "description": "Custom panel change event emits when selection changed.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Selected value."
                            },
                            {
                                "name": "isFocus",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Focus state."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "cascadeselect",
                        "name": "value",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Value.\n  \t placeholder: string, // Placeholder.\n  }",
                                "description": "value data."
                            }
                        ],
                        "description": "Custom value template."
                    },
                    {
                        "parent": "cascadeselect",
                        "name": "option",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Option instance.\n  }",
                                "description": "option data."
                            }
                        ],
                        "description": "Custom option template."
                    },
                    {
                        "parent": "cascadeselect",
                        "name": "triggericon",
                        "parameters": [],
                        "description": "Custom dropdown trigger icon template."
                    },
                    {
                        "parent": "cascadeselect",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    },
                    {
                        "parent": "cascadeselect",
                        "name": "optiongroupicon",
                        "parameters": [],
                        "description": "Custom option group icon template."
                    }
                ]
            }
        }
    },
    "chart": {
        "components": {
            "UIChart": {
                "description": "Chart groups a collection of contents in tabs.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Type of the chart."
                        },
                        {
                            "name": "plugins",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "[]",
                            "description": "Array of per-chart plugins to customize the chart behaviour."
                        },
                        {
                            "name": "width",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Width of the chart."
                        },
                        {
                            "name": "height",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Height of the chart."
                        },
                        {
                            "name": "responsive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the chart is redrawn on screen size change."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that autocomplete attribute the current element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Data to display."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Options to customize the chart."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onDataSelect",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to execute when an element on chart is clicked."
                        }
                    ]
                }
            }
        }
    },
    "checkbox": {
        "components": {
            "Checkbox": {
                "description": "Checkbox is an extension to standard checkbox element with theming.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the checkbox group."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "binary",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Allows to select a boolean value instead of multiple values."
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the checkbox."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that labels the input element."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "labelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the label."
                        },
                        {
                            "name": "formControl",
                            "optional": false,
                            "readonly": false,
                            "type": "FormControl<any>",
                            "description": "Form control value."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon class of the checkbox icon."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component cannot be edited."
                        },
                        {
                            "name": "required",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that checkbox must be checked before submitting the form."
                        },
                        {
                            "name": "trueValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "false",
                            "description": "Value in unchecked state."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "CheckboxChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the loses focus."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "CheckboxChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "checked",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Checked value."
                            },
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "checkbox",
                        "name": "icon",
                        "parameters": [],
                        "description": "Custom checkbox icon template"
                    }
                ]
            }
        }
    },
    "chip": {
        "components": {
            "Chip": {
                "description": "Chip represents people using icons, labels and images.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines the icon to display."
                        },
                        {
                            "name": "image",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "removable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a remove icon."
                        },
                        {
                            "name": "removeIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the remove element."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent"
                                }
                            ],
                            "description": "Callback to invoke when a chip is removed."
                        },
                        {
                            "name": "onImageError",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "This event is triggered if an error occurs while loading an image file."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "chip",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "chip",
                        "name": "removeicon",
                        "parameters": [],
                        "description": "Custom template of remove icon."
                    }
                ]
            }
        }
    },
    "chips": {
        "components": {
            "Chips": {
                "description": "Chips groups a collection of contents in tabs.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the property to display on a chip."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Advisory information to display on input."
                        },
                        {
                            "name": "max",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Maximum number of entries allowed."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "allowDuplicate",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to allow duplicate values or not."
                        },
                        {
                            "name": "caseSensitiveDuplication",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines whether duplication check should be case-sensitive"
                        },
                        {
                            "name": "inputStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "addOnTab",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to add an item on tab key press."
                        },
                        {
                            "name": "addOnBlur",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to add an item when the input loses focus."
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "type": "string | RegExp",
                            "description": "Separator char to add an item when pressed in addition to the enter key."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onAdd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ChipsAddEvent"
                                }
                            ],
                            "description": "Callback to invoke on chip add."
                        },
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ChipsRemoveEvent"
                                }
                            ],
                            "description": "Callback to invoke on chip remove."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke on focus of input field."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke on blur of input field."
                        },
                        {
                            "name": "onChipClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ChipsClickEvent"
                                }
                            ],
                            "description": "Callback to invoke on chip clicked."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke on clear token clicked."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "ChipsAddEvent",
                        "description": "Custom add event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Added/Removed item value."
                            }
                        ]
                    },
                    {
                        "name": "ChipsRemoveEvent",
                        "description": "Custom remove event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Added/Removed item value."
                            }
                        ]
                    },
                    {
                        "name": "ChipsClickEvent",
                        "description": "Custom click event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Added/Removed item value."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "chips",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Value of the chip element.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom item template."
                    },
                    {
                        "parent": "chips",
                        "name": "removetokenicon",
                        "parameters": [],
                        "description": "Custom remove icon template."
                    },
                    {
                        "parent": "chips",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    }
                ]
            }
        }
    },
    "colorpicker": {
        "components": {
            "ColorPicker": {
                "description": "ColorPicker groups a collection of contents in tabs.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "inline",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display as an overlay or not."
                        },
                        {
                            "name": "format",
                            "optional": false,
                            "readonly": false,
                            "type": "\"rgb\" | \"hex\" | \"hsb\"",
                            "default": "hex",
                            "description": "Format to use in value binding."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the dropdown."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ColorPickerChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke on panel is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke on panel is hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "ColorPickerChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event"
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "string | object",
                                "description": "Selected color value."
                            }
                        ]
                    }
                ]
            }
        }
    },
    "confirmdialog": {
        "components": {
            "ConfirmDialog": {
                "description": "ConfirmDialog uses a Dialog UI that is integrated with the Confirmation API.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Title text of the dialog."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon to display next to message."
                        },
                        {
                            "name": "message",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Message of the confirmation."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "maskStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specify the CSS class(es) for styling the mask element"
                        },
                        {
                            "name": "acceptIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the accept button."
                        },
                        {
                            "name": "acceptLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the accept button."
                        },
                        {
                            "name": "closeAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the close button for accessibility."
                        },
                        {
                            "name": "acceptAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the accept button for accessibility."
                        },
                        {
                            "name": "acceptVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Visibility of the accept button."
                        },
                        {
                            "name": "rejectIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the reject button."
                        },
                        {
                            "name": "rejectLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the reject button."
                        },
                        {
                            "name": "rejectAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the reject button for accessibility."
                        },
                        {
                            "name": "rejectVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Visibility of the reject button."
                        },
                        {
                            "name": "acceptButtonStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the accept button."
                        },
                        {
                            "name": "rejectButtonStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the reject button."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        },
                        {
                            "name": "dismissableMask",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog."
                        },
                        {
                            "name": "blockScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Determines whether scrolling behavior should be blocked within the component."
                        },
                        {
                            "name": "rtl",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled dialog is displayed in RTL direction."
                        },
                        {
                            "name": "closable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Adds a close icon to the header to hide the dialog."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the dialog, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "key",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Optional key to match the key of confirm object, necessary to use when component tree has multiple confirm dialogs."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "150ms cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the animation."
                        },
                        {
                            "name": "focusTrap",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, can only focus on elements inside the confirm dialog."
                        },
                        {
                            "name": "defaultFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "\"none\" | \"close\" | \"accept\" | \"reject\"",
                            "default": "accept",
                            "description": "Element to receive the focus when the dialog gets visible."
                        },
                        {
                            "name": "breakpoints",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Allows getting the position of the component."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ConfirmEventType"
                                }
                            ],
                            "description": "Callback to invoke when dialog is hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "confirmdialog",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom template of header."
                    },
                    {
                        "parent": "confirmdialog",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom template of footer."
                    },
                    {
                        "parent": "confirmdialog",
                        "name": "message",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // undefined\n  }"
                            }
                        ],
                        "description": "Custom template of message."
                    },
                    {
                        "parent": "confirmdialog",
                        "name": "icon",
                        "parameters": [],
                        "description": "Custom template of icon."
                    },
                    {
                        "parent": "confirmdialog",
                        "name": "rejecticon",
                        "parameters": [],
                        "description": "Custom template of rejecticon."
                    },
                    {
                        "parent": "confirmdialog",
                        "name": "accepticon",
                        "parameters": [],
                        "description": "Custom template of accepticon."
                    },
                    {
                        "parent": "confirmdialog",
                        "name": "headless",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // undefined\n  }"
                            }
                        ],
                        "description": "Headless template."
                    }
                ]
            }
        }
    },
    "confirmpopup": {
        "components": {
            "ConfirmPopup": {
                "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "key",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Optional key to match the key of confirm object, necessary to use when component tree has multiple confirm dialogs."
                        },
                        {
                            "name": "defaultFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "accept",
                            "description": "Element to receive the focus when the popup gets visible, valid values are \"accept\", \"reject\", and \"none\"."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Defines if the component is visible."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "confirmpopup",
                        "name": "content",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // undefined\n  }"
                            }
                        ],
                        "description": "Custom content template."
                    },
                    {
                        "parent": "confirmpopup",
                        "name": "rejecticon",
                        "parameters": [],
                        "description": "Custom template of rejecticon."
                    },
                    {
                        "parent": "confirmpopup",
                        "name": "accepticon",
                        "parameters": [],
                        "description": "Custom template of accepticon."
                    },
                    {
                        "parent": "confirmpopup",
                        "name": "headless",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // undefined\n  }"
                            }
                        ],
                        "description": "Headless template."
                    }
                ]
            }
        }
    },
    "contextmenu": {
        "components": {
            "ContextMenu": {
                "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like Table has special integration with ContextMenu.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]"
                        },
                        {
                            "name": "triggerEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "contextmenu",
                            "description": "Event for which the menu must be displayed."
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "description": "Local template variable name of the element to attach the context menu."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Attaches the menu to document instead of a particular item."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "pressDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "500",
                            "description": "Press delay in touch devices as miliseconds."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "null"
                                }
                            ],
                            "description": "Callback to invoke when overlay menu is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "null"
                                }
                            ],
                            "description": "Callback to invoke when overlay menu is hidden."
                        }
                    ]
                }
            }
        }
    },
    "dataview": {
        "components": {
            "DataView": {
                "description": "DataView displays data in grid or list layout with pagination and sorting features.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "paginator",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "totalRecords",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "pageLinks",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display in paginator."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "any[] | number[]",
                            "description": "Array of integer/object values to display inside rows per page dropdown of paginator"
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator."
                        },
                        {
                            "name": "paginatorStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Custom style class for paginator"
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorDropdownAppendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the paginator dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "paginatorDropdownScrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Paginator dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "{currentPage} of {totalPages}",
                            "description": "Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}"
                        },
                        {
                            "name": "showCurrentPageReport",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display current page report."
                        },
                        {
                            "name": "showJumpToPageDropdown",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a dropdown to navigate to any page."
                        },
                        {
                            "name": "showFirstLastIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, icons are displayed on paginator to go first and last page."
                        },
                        {
                            "name": "showPageLinks",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show page links."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "lazyLoadOnInit",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to call lazy loading on initialization."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display when there is no data. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "gridStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the grid."
                        },
                        {
                            "name": "trackBy",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": "...",
                            "description": "Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity."
                        },
                        {
                            "name": "filterBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Comma separated list of fields in the object graph to search against."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Property name of data to use in sorting by default."
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "layout",
                            "optional": false,
                            "readonly": false,
                            "type": "\"grid\" | \"list\"",
                            "description": "Defines the layout mode."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DataViewLazyLoadEvent"
                                }
                            ],
                            "description": "Callback to invoke when paging, sorting or filtering happens in lazy mode."
                        },
                        {
                            "name": "onPage",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DataViewPageEvent"
                                }
                            ],
                            "description": "Callback to invoke when pagination occurs."
                        },
                        {
                            "name": "onSort",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DataViewSortEvent"
                                }
                            ],
                            "description": "Callback to invoke when sorting occurs."
                        },
                        {
                            "name": "onChangeLayout",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DataViewLayoutChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when changing layout."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "DataViewLazyLoadEvent",
                        "description": "Custom lazy load event.",
                        "props": [
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the first element."
                            },
                            {
                                "name": "rows",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Row count."
                            },
                            {
                                "name": "sortField",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Property name of data to use in sorting by default."
                            },
                            {
                                "name": "sortOrder",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Order to sort the data by default."
                            }
                        ]
                    },
                    {
                        "name": "DataViewPageEvent",
                        "description": "Custom page event.",
                        "props": [
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the first element."
                            },
                            {
                                "name": "rows",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Row count."
                            }
                        ]
                    },
                    {
                        "name": "DataViewSortEvent",
                        "description": "Custom sort event.",
                        "props": [
                            {
                                "name": "sortField",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Sort field."
                            },
                            {
                                "name": "sortOrder",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Sort order."
                            }
                        ]
                    },
                    {
                        "name": "DataViewLayoutChangeEvent",
                        "description": "Custom layout change.",
                        "props": [
                            {
                                "name": "layout",
                                "optional": false,
                                "readonly": false,
                                "type": "\"grid\" | \"list\"",
                                "description": "Layout of the component."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "dataview",
                        "name": "listItem",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Row data.\n  \t rowIndex: number, // Row index.\n  }",
                                "description": "data of the item."
                            }
                        ],
                        "description": "Custom list item template."
                    },
                    {
                        "parent": "dataview",
                        "name": "gridItem",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Row data.\n  \t rowIndex: number, // Row index.\n  }",
                                "description": "data of the item."
                            }
                        ],
                        "description": "Custom grid item template."
                    },
                    {
                        "parent": "dataview",
                        "name": "paginatorleft",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: DataViewPaginatorState, // State of the paginator.\n  }",
                                "description": "paginator state."
                            }
                        ],
                        "description": "Custom paginator left template."
                    },
                    {
                        "parent": "dataview",
                        "name": "paginatorright",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: DataViewPaginatorState, // State of the paginator.\n  }",
                                "description": "paginator state."
                            }
                        ],
                        "description": "Custom paginator right template."
                    },
                    {
                        "parent": "dataview",
                        "name": "paginatordropdownitem",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Dropdown item instance.\n  }",
                                "description": "dropdown item."
                            }
                        ],
                        "description": "Custom paginator dropdown template."
                    },
                    {
                        "parent": "dataview",
                        "name": "empty",
                        "parameters": [],
                        "description": "Custom empty message template."
                    },
                    {
                        "parent": "dataview",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "dataview",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "dataview",
                        "name": "loadingicon",
                        "parameters": [],
                        "description": "Custom loading icon template."
                    },
                    {
                        "parent": "dataview",
                        "name": "listicon",
                        "parameters": [],
                        "description": "Custom list icon template."
                    },
                    {
                        "parent": "dataview",
                        "name": "gridicon",
                        "parameters": [],
                        "description": "Custom grid icon template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "DataViewPaginatorState",
                        "description": "State of the paginator.",
                        "props": [
                            {
                                "name": "page",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Current page."
                            },
                            {
                                "name": "first",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "First item in the current page."
                            },
                            {
                                "name": "rows",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Row count."
                            },
                            {
                                "name": "pageCount",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Page count."
                            }
                        ]
                    }
                ]
            }
        }
    },
    "defer": {
        "components": {
            "DeferredLoader": {
                "description": "Defer postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.",
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when deferred content is loaded."
                        }
                    ]
                }
            }
        }
    },
    "dialog": {
        "components": {
            "Dialog": {
                "description": "Dialog is a container to display content in an overlay window.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Title text of the dialog."
                        },
                        {
                            "name": "draggable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "resizable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables resizing of the content."
                        },
                        {
                            "name": "positionLeft",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Defines the left offset of dialog.",
                            "deprecated": "positionLeft property is deprecated."
                        },
                        {
                            "name": "positionTop",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Defines the top offset of dialog.",
                            "deprecated": "positionTop property is deprecated."
                        },
                        {
                            "name": "contentStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Style of the content section."
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the content."
                        },
                        {
                            "name": "modal",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if background should be blocked when dialog is displayed."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        },
                        {
                            "name": "dismissableMask",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog."
                        },
                        {
                            "name": "rtl",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled dialog is displayed in RTL direction."
                        },
                        {
                            "name": "closable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Adds a close icon to the header to hide the dialog."
                        },
                        {
                            "name": "responsive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if the component is responsive.",
                            "deprecated": "Responsive property is deprecated."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the dialog, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "breakpoints",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "maskStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the mask."
                        },
                        {
                            "name": "maskStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style of the mask."
                        },
                        {
                            "name": "showHeader",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header or not."
                        },
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Defines the breakpoint of the component responsive.",
                            "deprecated": "Breakpoint property is not utilized and deprecated. Use breakpoints or CSS media queries instead."
                        },
                        {
                            "name": "blockScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "minX",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum value for the left coordinate of dialog in dragging."
                        },
                        {
                            "name": "minY",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum value for the top coordinate of dialog in dragging."
                        },
                        {
                            "name": "focusOnShow",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, first button receives focus on show."
                        },
                        {
                            "name": "maximizable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dialog can be displayed full screen."
                        },
                        {
                            "name": "keepInViewport",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Keeps dialog in the viewport."
                        },
                        {
                            "name": "focusTrap",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, can only focus on elements inside the dialog."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "150ms cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the animation."
                        },
                        {
                            "name": "closeIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the close icon."
                        },
                        {
                            "name": "closeAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the close button for accessibility."
                        },
                        {
                            "name": "closeTabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "-1",
                            "description": "Index of the close button in tabbing order."
                        },
                        {
                            "name": "minimizeIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the minimize icon."
                        },
                        {
                            "name": "maximizeIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the maximize icon."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies the visibility of the dialog."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" | \"topleft\" | \"topright\" | \"bottomleft\" | \"bottomright\"",
                            "description": "Position of the dialog."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when dialog is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when dialog is hidden."
                        },
                        {
                            "name": "visibleChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "This EventEmitter is used to notify changes in the visibility state of a component."
                        },
                        {
                            "name": "onResizeInit",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent"
                                }
                            ],
                            "description": "Callback to invoke when dialog resizing is initiated."
                        },
                        {
                            "name": "onResizeEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent"
                                }
                            ],
                            "description": "Callback to invoke when dialog resizing is completed."
                        },
                        {
                            "name": "onDragEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DragEvent"
                                }
                            ],
                            "description": "Callback to invoke when dialog dragging is completed."
                        },
                        {
                            "name": "onMaximize",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when dialog maximized or unmaximized."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "dialog",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom template of header."
                    },
                    {
                        "parent": "dialog",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "dialog",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom template of footer."
                    },
                    {
                        "parent": "dialog",
                        "name": "closeicon",
                        "parameters": [],
                        "description": "Custom template of closeicon."
                    },
                    {
                        "parent": "dialog",
                        "name": "maximizeicon",
                        "parameters": [],
                        "description": "Custom template of maximizeicon."
                    },
                    {
                        "parent": "dialog",
                        "name": "minimizeicon",
                        "parameters": [],
                        "description": "Custom template of minimizeicon."
                    }
                ]
            }
        }
    },
    "divider": {
        "components": {
            "Divider": {
                "description": "Divider is used to separate contents.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "layout",
                            "optional": false,
                            "readonly": false,
                            "type": "\"vertical\" | \"horizontal\"",
                            "default": "horizontal",
                            "description": "Specifies the orientation."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "\"dashed\" | \"dotted\" | \"solid\"",
                            "default": "solid",
                            "description": "Border style type."
                        },
                        {
                            "name": "align",
                            "optional": false,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "description": "Alignment of the content."
                        }
                    ]
                }
            }
        }
    },
    "dock": {
        "components": {
            "Dock": {
                "description": "Dock is a navigation component consisting of menuitems.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "null",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the dropdown button for accessibility."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to execute when button is focused."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "dock",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom template of item."
                    }
                ]
            }
        }
    },
    "connectedoverlayscrollhandler": {
        "components": {}
    },
    "domhandler": {
        "components": {}
    },
    "dragdrop": {
        "components": {
            "Draggable": {
                "description": "pDraggable directive apply draggable behavior to any element.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "dragEffect",
                            "optional": false,
                            "readonly": false,
                            "type": "\"link\" | \"all\" | \"none\" | \"copy\" | \"move\" | \"copyLink\" | \"copyMove\" | \"linkMove\" | \"uninitialized\"",
                            "description": "Defines the cursor style."
                        },
                        {
                            "name": "dragHandle",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Selector to define the drag handle, by default anywhere on the target element is a drag handle to start dragging."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onDragStart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DragEvent"
                                }
                            ],
                            "description": "Callback to invoke when drag begins."
                        },
                        {
                            "name": "onDragEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DragEvent"
                                }
                            ],
                            "description": "Callback to invoke when drag ends."
                        },
                        {
                            "name": "onDrag",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DragEvent"
                                }
                            ],
                            "description": "Callback to invoke on dragging."
                        }
                    ]
                }
            },
            "Droppable": {
                "description": "pDroppable directive apply droppable behavior to any element.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "pDroppableDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the element is droppable, useful for conditional cases."
                        },
                        {
                            "name": "dropEffect",
                            "optional": false,
                            "readonly": false,
                            "type": "\"link\" | \"none\" | \"copy\" | \"move\"",
                            "description": "Defines the cursor style, valid values are none, copy, move, link, copyMove, copyLink, linkMove and all."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onDragEnter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DragEvent"
                                }
                            ],
                            "description": "Callback to invoke when a draggable enters drop area."
                        },
                        {
                            "name": "onDragLeave",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DragEvent"
                                }
                            ],
                            "description": "Callback to invoke when a draggable leave drop area."
                        },
                        {
                            "name": "onDrop",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DragEvent"
                                }
                            ],
                            "description": "Callback to invoke when a draggable is dropped onto drop area."
                        }
                    ]
                }
            }
        }
    },
    "dropdown": {
        "components": {
            "Dropdown": {
                "description": "Dropdown also known as Select, is used to choose an item from a collection of options.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the component"
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items on keyup."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "panelStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the overlay panel element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "panelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the overlay panel element."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component cannot be edited."
                        },
                        {
                            "name": "required",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "editable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, custom value instead of predefined options can be entered using the editable input field."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the accessible input element."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "A property to uniquely identify a value in options."
                        },
                        {
                            "name": "filterBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterFields",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "autofocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon class of the dropdown icon."
                        },
                        {
                            "name": "optionLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the label field of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the value field of an option."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the disabled field of an option."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "Name of the label field of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "items",
                            "description": "Name of the options field of an option group."
                        },
                        {
                            "name": "autoDisplayFirst",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the first item as the label if no placeholder is defined and value is null.",
                            "deprecated": "since v17.3.0, set initial value by model instead."
                        },
                        {
                            "name": "group",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display options as grouped when nested options are provided."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display when filtering does not return any results. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display when there is no data. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "virtualScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the data should be loaded on demand during scroll."
                        },
                        {
                            "name": "virtualScrollItemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Height of an item in the list for VirtualScrolling."
                        },
                        {
                            "name": "virtualScrollOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollerOptions",
                            "description": "Whether to use the scroller feature. The properties of scroller component can be used like an object in it."
                        },
                        {
                            "name": "overlayOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayOptions",
                            "description": "Whether to use overlay API feature. The properties of overlay API can be used like an object in it."
                        },
                        {
                            "name": "ariaFilterLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the filter input."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a aria label attribute the current element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "default": "contains",
                            "description": "Defines how the items are filtered."
                        },
                        {
                            "name": "maxlength",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Maximum number of character allows in the editable input field."
                        },
                        {
                            "name": "tooltip",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Advisory information to display in a tooltip on hover."
                        },
                        {
                            "name": "tooltipPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "right",
                            "description": "Position of the tooltip."
                        },
                        {
                            "name": "tooltipPositionStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "absolute",
                            "description": "Type of CSS position."
                        },
                        {
                            "name": "tooltipStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tooltip."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Determines if the option will be selected on focus."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "autofocusFilter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Applies focus to the filter element when the overlay is shown."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "itemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Item size of item to be virtual scrolled.",
                            "deprecated": "use virtualScrollItemSize property instead."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether to automatically manage layering.",
                            "deprecated": "since v14.2.0, use overlayOptions property instead."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Base zIndex value to use in layering.",
                            "deprecated": "since v14.2.0, use overlayOptions property instead."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the show animation.",
                            "deprecated": "since v14.2.0, use overlayOptions property instead."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the hide animation.",
                            "deprecated": "since v14.2.0, use overlayOptions property instead."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "When specified, filter displays with this value."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display as the available options."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DropdownChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when value of dropdown changes."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DropdownFilterEvent"
                                }
                            ],
                            "description": "Callback to invoke when data is filtered."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when dropdown gets focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when dropdown loses focus."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent"
                                }
                            ],
                            "description": "Callback to invoke when component is clicked."
                        },
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AnimationEvent_2"
                                }
                            ],
                            "description": "Callback to invoke when dropdown overlay gets visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AnimationEvent_2"
                                }
                            ],
                            "description": "Callback to invoke when dropdown overlay gets hidden."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when dropdown clears the value."
                        },
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "DropdownLazyLoadEvent"
                                }
                            ],
                            "description": "Callback to invoke in lazy mode to load new data."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "resetFilter",
                            "parameters": [],
                            "description": "Callback to invoke on filter reset."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "type": "any"
                                }
                            ],
                            "description": "Displays the panel."
                        },
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "type": "any"
                                }
                            ],
                            "description": "Hides the panel."
                        },
                        {
                            "name": "focus",
                            "parameters": [],
                            "description": "Applies focus."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "DropdownChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Selected option value"
                            }
                        ]
                    },
                    {
                        "name": "DropdownFilterEvent",
                        "description": "Custom filter event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "filter",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Filter value."
                            }
                        ]
                    },
                    {
                        "name": "DropdownLazyLoadEvent",
                        "description": "Custom lazy load event.",
                        "props": [
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the first element in viewport."
                            },
                            {
                                "name": "last",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the last element in viewport."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "dropdown",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Data of the option.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "selectedItem",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Selected option value.\n  }",
                                "description": "selected item data."
                            }
                        ],
                        "description": "Custom selected item template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "filter",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: DropdownFilterOptions, // Filter options.\n  }"
                            }
                        ],
                        "description": "Custom filter template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "emptyfilter",
                        "parameters": [],
                        "description": "Custom empty filter template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "empty",
                        "parameters": [],
                        "description": "Custom empty template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "group",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Group option.\n  }"
                            }
                        ],
                        "description": "Custom group template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "loader",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: ScrollerOptions, // Virtual scroller options.\n  }"
                            }
                        ],
                        "description": "Custom loader template. This template can be used with virtualScroll."
                    },
                    {
                        "parent": "dropdown",
                        "name": "dropdownicon",
                        "parameters": [],
                        "description": "Custom dropdown trigger icon template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    },
                    {
                        "parent": "dropdown",
                        "name": "filtericon",
                        "parameters": [],
                        "description": "Custom filter icon template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "DropdownFilterOptions",
                        "description": "Filter callbacks of the dropdown.",
                        "props": [
                            {
                                "name": "filter",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "reset",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            }
                        ]
                    }
                ]
            }
        }
    },
    "dialogservice": {
        "description": "Defines the service used by the component",
        "methods": {
            "description": "Methods used in service.",
            "values": [
                {
                    "name": "open",
                    "parameters": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "description": "Dynamic component for content template."
                        },
                        {
                            "name": "config",
                            "type": "DynamicDialogConfig<any>",
                            "description": "DynamicDialog object."
                        }
                    ],
                    "returnType": "DynamicDialogRef",
                    "description": "Displays the dialog using the dynamic dialog object options."
                },
                {
                    "name": "getInstance",
                    "parameters": [
                        {
                            "name": "ref",
                            "type": "DynamicDialogRef"
                        }
                    ],
                    "returnType": "DynamicDialogComponent",
                    "description": "Returns the dynamic dialog component instance."
                }
            ]
        }
    },
    "dynamicdialog-config": {
        "components": {
            "DynamicDialogConfig": {
                "description": "Dialogs can be created dynamically with any component as the content using a DialogService.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "T",
                            "description": "An object to pass to the component loaded inside the Dialog."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Header text of the dialog."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifies the element (or elements) that labels the element it is applied to."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Footer text of the dialog."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Width of the dialog."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Height of the dialog."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        },
                        {
                            "name": "focusOnShow",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if autofocus should happen on show."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "dismissableMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog."
                        },
                        {
                            "name": "rtl",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the comopnent."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the content."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the animation."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Adds a close icon to the header to hide the dialog."
                        },
                        {
                            "name": "showHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the header or not."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if background should be blocked when dialog is displayed."
                        },
                        {
                            "name": "maskStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the mask."
                        },
                        {
                            "name": "resizable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Enables resizing of the content."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "keepInViewport",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Keeps dialog in the viewport."
                        },
                        {
                            "name": "minX",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Minimum value for the left coordinate of dialog in dragging."
                        },
                        {
                            "name": "minY",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "description": "Minimum value for the top coordinate of dialog in dragging."
                        },
                        {
                            "name": "maximizable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dialog can be displayed full screen."
                        },
                        {
                            "name": "maximizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the maximize icon."
                        },
                        {
                            "name": "minimizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the minimize icon."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Position of the dialog, options are \"center\", \"top\", \"bottom\", \"left\", \"right\", \"top-left\", \"top-right\", \"bottom-left\" or \"bottom-right\"."
                        },
                        {
                            "name": "closeAriaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the close button for accessibility."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "duplicate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "A boolean to determine if it can be duplicate."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "templates",
                            "optional": true,
                            "readonly": false,
                            "type": "DynamicDialogTemplates",
                            "description": "Dialog templates."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "values": [
                {
                    "name": "DynamicDialogTemplates",
                    "description": "Defines valid templates in Dynamic Dialog.",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "Type<any>",
                            "description": "Template of the header."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "Type<any>",
                            "description": "Template of the content."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "Type<any>",
                            "description": "Template of the footer."
                        },
                        {
                            "name": "minimizeicon",
                            "optional": true,
                            "readonly": false,
                            "type": "Type<any>",
                            "description": "Template of the minimize icon."
                        },
                        {
                            "name": "maximizeicon",
                            "optional": true,
                            "readonly": false,
                            "type": "Type<any>",
                            "description": "Template of the maximize icon."
                        },
                        {
                            "name": "closeicon",
                            "optional": true,
                            "readonly": false,
                            "type": "Type<any>",
                            "description": "Template of the close icon."
                        }
                    ]
                }
            ]
        }
    },
    "dynamicdialog-injector": {
        "components": {}
    },
    "dynamicdialog-ref": {
        "components": {
            "DynamicDialogRef": {
                "description": "Dynamic Dialog instance.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "result",
                                    "type": "any"
                                }
                            ],
                            "description": "Closes dialog."
                        },
                        {
                            "name": "destroy",
                            "parameters": [],
                            "description": "Destroys the dialog instance."
                        },
                        {
                            "name": "dragStart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent",
                                    "description": "Mouse event."
                                }
                            ],
                            "description": "Callback to invoke on drag start."
                        },
                        {
                            "name": "dragEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent",
                                    "description": "Mouse event."
                                }
                            ],
                            "description": "Callback to invoke on drag end."
                        },
                        {
                            "name": "resizeInit",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent",
                                    "description": "Mouse event."
                                }
                            ],
                            "description": "Callback to invoke on resize start."
                        },
                        {
                            "name": "resizeEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent",
                                    "description": "Mouse event."
                                }
                            ],
                            "description": "Callback to invoke on resize start."
                        },
                        {
                            "name": "maximize",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "description": "Size value."
                                }
                            ],
                            "description": "Callback to invoke on dialog is maximized."
                        }
                    ]
                },
                "events": {
                    "description": "Defines the custom events used by the component's emitters.",
                    "values": [
                        {
                            "name": "onClose",
                            "description": "Event triggered on dialog is closed."
                        },
                        {
                            "name": "onDestroy",
                            "description": "Event triggered on dialog instance is destroyed."
                        },
                        {
                            "name": "onDragStart",
                            "description": "Event triggered on drag start."
                        },
                        {
                            "name": "onDragEnd",
                            "description": "Event triggered on drag end."
                        },
                        {
                            "name": "onResizeInit",
                            "description": "Event triggered on resize start."
                        },
                        {
                            "name": "onResizeEnd",
                            "description": "Event triggered on resize end."
                        },
                        {
                            "name": "onMaximize",
                            "description": "Event triggered on resize end."
                        }
                    ]
                }
            }
        }
    },
    "dynamicdialog": {
        "components": {}
    },
    "dynamicdialogcontent": {
        "components": {}
    },
    "editor": {
        "components": {
            "Editor": {
                "description": "Editor groups a collection of contents in tabs.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the container."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the container."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Placeholder text to show when editor is empty."
                        },
                        {
                            "name": "formats",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "description": "Whitelist of formats to display, see here for available options."
                        },
                        {
                            "name": "modules",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "description": "Modules configuration of Editor, see here for available options."
                        },
                        {
                            "name": "bounds",
                            "optional": false,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "description": "DOM Element or a CSS selector for a DOM Element, within which the editor’s p elements (i.e. tooltips, etc.) should be confined. Currently, it only considers left and right boundaries."
                        },
                        {
                            "name": "scrollingContainer",
                            "optional": false,
                            "readonly": false,
                            "type": "string | HTMLElement",
                            "description": "DOM Element or a CSS selector for a DOM Element, specifying which container has the scrollbars (i.e. overflow-y: auto), if is has been changed from the default ql-editor with custom CSS. Necessary to fix scroll jumping bugs when Quill is set to auto grow its height, and another ancestor container is responsible from the scrolling.."
                        },
                        {
                            "name": "debug",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Shortcut for debug. Note debug is a static method and will affect other instances of Quill editors on the page. Only warning and error messages are enabled by default."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether to instantiate the editor to read-only mode."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onInit",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "EditorInitEvent"
                                }
                            ],
                            "description": "Callback to invoke when the quill modules are loaded."
                        },
                        {
                            "name": "onTextChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "EditorTextChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when text of editor changes."
                        },
                        {
                            "name": "onSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "EditorSelectionChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when selection of the text changes."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "EditorTextChangeEvent",
                        "description": "Custom text change event.",
                        "props": [
                            {
                                "name": "htmlValue",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Current value as html."
                            },
                            {
                                "name": "textValue",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Current value as text."
                            },
                            {
                                "name": "delta",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Representation of the change."
                            },
                            {
                                "name": "source",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Source of change. Will be either 'user' or 'api'."
                            }
                        ]
                    },
                    {
                        "name": "EditorSelectionChangeEvent",
                        "description": "Custom selection change event.",
                        "props": [
                            {
                                "name": "range",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Representation of the selection boundaries."
                            },
                            {
                                "name": "oldRange",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Representation of the previous selection boundaries."
                            },
                            {
                                "name": "source",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Source of change. Will be either 'user' or 'api'."
                            }
                        ]
                    },
                    {
                        "name": "EditorInitEvent",
                        "description": "Custom load event.",
                        "props": [
                            {
                                "name": "editor",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Text editor instance."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "editor",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    }
                ]
            }
        }
    },
    "fieldset": {
        "components": {
            "Fieldset": {
                "description": "Fieldset is a grouping component with the optional content toggle feature.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "legend",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Header text of the fieldset."
                        },
                        {
                            "name": "toggleable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, content can toggled by clicking the legend."
                        },
                        {
                            "name": "collapsed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the default visibility state of the content.\n*"
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "400ms cubic-bezier(0.86, 0, 0.07, 1)",
                            "description": "Transition options of the panel animation."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "collapsedChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Emits when the collapsed state changes."
                        },
                        {
                            "name": "onBeforeToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FieldsetBeforeToggleEvent"
                                }
                            ],
                            "description": "Callback to invoke before panel toggle."
                        },
                        {
                            "name": "onAfterToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FieldsetAfterToggleEvent"
                                }
                            ],
                            "description": "Callback to invoke after panel toggle."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "FieldsetAfterToggleEvent",
                        "description": "Custom panel toggle event, emits after toggle.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "collapsed",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Collapsed state of the panel."
                            }
                        ]
                    },
                    {
                        "name": "FieldsetBeforeToggleEvent",
                        "description": "Custom panel toggle event, emits before toggle.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "collapsed",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Collapsed state of the panel."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "fieldset",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "fieldset",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom content template."
                    },
                    {
                        "parent": "fieldset",
                        "name": "expandicon",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "fieldset",
                        "name": "collapseicon",
                        "parameters": [],
                        "description": "Custom icons template of the panel toggler."
                    }
                ]
            }
        }
    },
    "fileupload": {
        "components": {
            "FileUpload": {
                "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the request parameter to identify the files at backend."
                        },
                        {
                            "name": "url",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Remote url to upload the files."
                        },
                        {
                            "name": "method",
                            "optional": false,
                            "readonly": false,
                            "type": "\"post\" | \"put\"",
                            "default": "post",
                            "description": "HTTP method to send the files to the url such as \"post\" and \"put\"."
                        },
                        {
                            "name": "multiple",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to select multiple files at once from file dialog."
                        },
                        {
                            "name": "accept",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Comma-separated list of pattern to restrict the allowed file types. Can be any combination of either the MIME types (such as \"image/*\") or the file extensions (such as \".jpg\")."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Disables the upload functionality."
                        },
                        {
                            "name": "auto",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, upload begins automatically after selection is completed."
                        },
                        {
                            "name": "withCredentials",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates."
                        },
                        {
                            "name": "maxFileSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Maximum file size allowed in bytes."
                        },
                        {
                            "name": "invalidFileSizeMessageSummary",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "{0}: Invalid file size, ",
                            "description": "Summary message of the invalid file size."
                        },
                        {
                            "name": "invalidFileSizeMessageDetail",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "maximum upload size is {0}.",
                            "description": "Detail message of the invalid file size."
                        },
                        {
                            "name": "invalidFileTypeMessageSummary",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "{0}: Invalid file type, ",
                            "description": "Summary message of the invalid file type."
                        },
                        {
                            "name": "invalidFileTypeMessageDetail",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "allowed file types: {0}.",
                            "description": "Detail message of the invalid file type."
                        },
                        {
                            "name": "invalidFileLimitMessageDetail",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "limit is {0} at most.",
                            "description": "Detail message of the invalid file type."
                        },
                        {
                            "name": "invalidFileLimitMessageSummary",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "Maximum number of files exceeded, ",
                            "description": "Summary message of the invalid file type."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "previewWidth",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "50",
                            "description": "Width of the image thumbnail in pixels."
                        },
                        {
                            "name": "chooseLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the choose button. Defaults to PrimeNG Locale configuration."
                        },
                        {
                            "name": "uploadLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the upload button. Defaults to PrimeNG Locale configuration."
                        },
                        {
                            "name": "cancelLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the cancel button. Defaults to PrimeNG Locale configuration."
                        },
                        {
                            "name": "chooseIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the choose button."
                        },
                        {
                            "name": "uploadIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the upload button."
                        },
                        {
                            "name": "cancelIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the cancel button."
                        },
                        {
                            "name": "showUploadButton",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the upload button."
                        },
                        {
                            "name": "showCancelButton",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the cancel button."
                        },
                        {
                            "name": "mode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"basic\" | \"advanced\"",
                            "default": "advanced",
                            "description": "Defines the UI of the component."
                        },
                        {
                            "name": "headers",
                            "optional": false,
                            "readonly": false,
                            "type": "HttpHeaders",
                            "description": "HttpHeaders class represents the header configuration options for an HTTP request."
                        },
                        {
                            "name": "customUpload",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to use the default upload or a manual implementation defined in uploadHandler callback. Defaults to PrimeNG Locale configuration."
                        },
                        {
                            "name": "fileLimit",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Maximum number of files that can be uploaded."
                        },
                        {
                            "name": "uploadStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the upload button."
                        },
                        {
                            "name": "cancelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the cancel button."
                        },
                        {
                            "name": "removeStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the remove button."
                        },
                        {
                            "name": "chooseStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the choose button."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onBeforeUpload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FileBeforeUploadEvent"
                                }
                            ],
                            "description": "Callback to invoke before file upload is initialized."
                        },
                        {
                            "name": "onSend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FileSendEvent"
                                }
                            ],
                            "description": "An event indicating that the request was sent to the server. Useful when a request may be retried multiple times, to distinguish between retries on the final event stream."
                        },
                        {
                            "name": "onUpload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FileUploadEvent"
                                }
                            ],
                            "description": "Callback to invoke when file upload is complete."
                        },
                        {
                            "name": "onError",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FileUploadErrorEvent"
                                }
                            ],
                            "description": "Callback to invoke if file upload fails."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when files in queue are removed without uploading using clear all button."
                        },
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FileRemoveEvent"
                                }
                            ],
                            "description": "Callback to invoke when a file is removed without uploading using clear button of a file."
                        },
                        {
                            "name": "onSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FileSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when files are selected."
                        },
                        {
                            "name": "onProgress",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FileProgressEvent"
                                }
                            ],
                            "description": "Callback to invoke when files are being uploaded."
                        },
                        {
                            "name": "uploadHandler",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FileUploadHandlerEvent"
                                }
                            ],
                            "description": "Callback to invoke in custom upload mode to upload the files manually."
                        },
                        {
                            "name": "onImageError",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "This event is triggered if an error occurs while loading an image file."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "upload",
                            "parameters": [],
                            "description": "Uploads the selected files."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "description": "Clears the files list."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "UploadEvent",
                        "description": "Upload event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "HttpEvent<any>",
                                "description": "HTTP event."
                            }
                        ]
                    },
                    {
                        "name": "FormDataEvent",
                        "description": "Form data event.",
                        "props": [
                            {
                                "name": "formData",
                                "optional": false,
                                "readonly": false,
                                "type": "FormData",
                                "description": "FormData object."
                            }
                        ]
                    },
                    {
                        "name": "FileSendEvent",
                        "description": "An event indicating that the request was sent to the server. Useful when a request may be retried multiple times, to distinguish between retries on the final event stream.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "HttpEvent<any>",
                                "description": "HTTP event."
                            },
                            {
                                "name": "formData",
                                "optional": false,
                                "readonly": false,
                                "type": "FormData",
                                "description": "FormData object."
                            }
                        ]
                    },
                    {
                        "name": "FileBeforeUploadEvent",
                        "description": "Callback to invoke before file upload is initialized.",
                        "props": [
                            {
                                "name": "formData",
                                "optional": false,
                                "readonly": false,
                                "type": "FormData",
                                "description": "FormData object."
                            }
                        ]
                    },
                    {
                        "name": "FileUploadEvent",
                        "description": "Callback to invoke when file upload is complete.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "HttpEvent<any>",
                                "description": "HTTP event."
                            },
                            {
                                "name": "files",
                                "optional": false,
                                "readonly": false,
                                "type": "File[]",
                                "description": "Uploaded files."
                            }
                        ]
                    },
                    {
                        "name": "FileRemoveEvent",
                        "description": "Callback to invoke when a file is removed without uploading using clear button of a file.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "file",
                                "optional": false,
                                "readonly": false,
                                "type": "File",
                                "description": "Selected file"
                            }
                        ]
                    },
                    {
                        "name": "FileSelectEvent",
                        "description": "Callback to invoke when files are selected.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "files",
                                "optional": false,
                                "readonly": false,
                                "type": "File[]",
                                "description": "Uploaded files."
                            },
                            {
                                "name": "currentFiles",
                                "optional": false,
                                "readonly": false,
                                "type": "File[]",
                                "description": "All files to be uploaded."
                            }
                        ]
                    },
                    {
                        "name": "FileProgressEvent",
                        "description": "Callback to invoke when files are being uploaded.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "HttpEvent<any>",
                                "description": "HTTP event."
                            },
                            {
                                "name": "progress",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Calculated progress value."
                            }
                        ]
                    },
                    {
                        "name": "FileUploadHandlerEvent",
                        "description": "Callback to invoke in custom upload mode to upload the files manually.",
                        "props": [
                            {
                                "name": "files",
                                "optional": false,
                                "readonly": false,
                                "type": "File[]",
                                "description": "List of selected files."
                            }
                        ]
                    },
                    {
                        "name": "FileUploadErrorEvent",
                        "description": "Callback to invoke on upload error.",
                        "props": [
                            {
                                "name": "error",
                                "optional": true,
                                "readonly": false,
                                "type": "ErrorEvent",
                                "description": "List of selected files."
                            },
                            {
                                "name": "files",
                                "optional": false,
                                "readonly": false,
                                "type": "File[]",
                                "description": "List of selected files."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "fileupload",
                        "name": "file",
                        "parameters": [],
                        "description": "Custom template of file."
                    },
                    {
                        "parent": "fileupload",
                        "name": "content",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // File list.\n  }"
                            }
                        ],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "fileupload",
                        "name": "toolbar",
                        "parameters": [],
                        "description": "Custom template of toolbar."
                    },
                    {
                        "parent": "fileupload",
                        "name": "chooseicon",
                        "parameters": [],
                        "description": "Custom template of chooseicon."
                    },
                    {
                        "parent": "fileupload",
                        "name": "uploadicon",
                        "parameters": [],
                        "description": "Custom template of uploadicon."
                    },
                    {
                        "parent": "fileupload",
                        "name": "cancelicon",
                        "parameters": [],
                        "description": "Custom template of cancelicon."
                    }
                ]
            }
        }
    },
    "focustrap": {
        "components": {
            "FocusTrap": {
                "description": "Focus Trap keeps focus within a certain DOM element while tabbing.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "pFocusTrapDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When set as true, focus wouldn't be managed."
                        }
                    ]
                }
            }
        }
    },
    "galleria": {
        "components": {
            "Galleria": {
                "description": "Galleria is an advanced content gallery component.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "fullScreen",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display the component on fullscreen."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "GalleriaResponsiveOptions[]",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "showItemNavigators",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons in item section."
                        },
                        {
                            "name": "showThumbnailNavigators",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in thumbnail container."
                        },
                        {
                            "name": "showItemNavigatorsOnHover",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons on item hover."
                        },
                        {
                            "name": "changeItemOnIndicatorHover",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, item is changed on indicator hover."
                        },
                        {
                            "name": "circular",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "autoPlay",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Items are displayed with a slideshow in autoPlay mode."
                        },
                        {
                            "name": "shouldStopAutoplayByClick",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, autorun should stop by click."
                        },
                        {
                            "name": "transitionInterval",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "4000",
                            "description": "Time in milliseconds to scroll items."
                        },
                        {
                            "name": "showThumbnails",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display thumbnail container."
                        },
                        {
                            "name": "thumbnailsPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of thumbnails."
                        },
                        {
                            "name": "verticalThumbnailViewPortHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "300px",
                            "description": "Height of the viewport in vertical thumbnail."
                        },
                        {
                            "name": "showIndicators",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "showIndicatorsOnItem",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, indicator container is displayed on item container."
                        },
                        {
                            "name": "indicatorsPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of indicators."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "maskClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the mask on fullscreen mode."
                        },
                        {
                            "name": "containerClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component on fullscreen mode. Otherwise, the 'class' property can be used."
                        },
                        {
                            "name": "containerStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component on fullscreen mode. Otherwise, the 'style' property can be used."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "150ms cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "150ms cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the hide animation."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies the visibility of the mask on fullscreen mode."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "activeIndexChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ],
                            "description": "Callback to invoke on active index change."
                        },
                        {
                            "name": "visibleChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Callback to invoke on visiblity change."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "galleria",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom template of header."
                    },
                    {
                        "parent": "galleria",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom template of footer."
                    },
                    {
                        "parent": "galleria",
                        "name": "indicator",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Index of the item.\n  }",
                                "description": "indicator data."
                            }
                        ],
                        "description": "Custom template of indicator."
                    },
                    {
                        "parent": "galleria",
                        "name": "closeicon",
                        "parameters": [],
                        "description": "Custom template of closeicon."
                    },
                    {
                        "parent": "galleria",
                        "name": "itemnexticon",
                        "parameters": [],
                        "description": "Custom template of itemnexticon."
                    },
                    {
                        "parent": "galleria",
                        "name": "itempreviousicon",
                        "parameters": [],
                        "description": "Custom template of itempreviousicon."
                    },
                    {
                        "parent": "galleria",
                        "name": "previousthumbnailicon",
                        "parameters": [],
                        "description": "Custom template of previousthumbnailicon."
                    },
                    {
                        "parent": "galleria",
                        "name": "nextthumbnailicon",
                        "parameters": [],
                        "description": "Custom template of nextthumbnailicon."
                    },
                    {
                        "parent": "galleria",
                        "name": "caption",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom template of caption."
                    },
                    {
                        "parent": "galleria",
                        "name": "thumbnail",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom template of thumbnail."
                    },
                    {
                        "parent": "galleria",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom template of item."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "GalleriaResponsiveOptions",
                        "description": "Responsive options of the component.",
                        "props": [
                            {
                                "name": "breakpoint",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Breakpoint for responsive mode. Exp;"
                            },
                            {
                                "name": "numVisible",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "The number of visible items on breakpoint."
                            }
                        ]
                    }
                ]
            }
        }
    },
    "angledoubledown": {
        "components": {}
    },
    "angledoubleleft": {
        "components": {}
    },
    "angledoubleright": {
        "components": {}
    },
    "angledoubleup": {
        "components": {}
    },
    "angledown": {
        "components": {}
    },
    "angleleft": {
        "components": {}
    },
    "angleright": {
        "components": {}
    },
    "angleup": {
        "components": {}
    },
    "arrowdown": {
        "components": {}
    },
    "arrowdownleft": {
        "components": {}
    },
    "arrowdownright": {
        "components": {}
    },
    "arrowleft": {
        "components": {}
    },
    "arrowright": {
        "components": {}
    },
    "arrowup": {
        "components": {}
    },
    "ban": {
        "components": {}
    },
    "bars": {
        "components": {}
    },
    "caretleft": {
        "components": {}
    },
    "caretright": {
        "components": {}
    },
    "check": {
        "components": {}
    },
    "chevrondown": {
        "components": {}
    },
    "chevronleft": {
        "components": {}
    },
    "chevronright": {
        "components": {}
    },
    "chevronup": {
        "components": {}
    },
    "exclamationtriangle": {
        "components": {}
    },
    "eye": {
        "components": {}
    },
    "eyeslash": {
        "components": {}
    },
    "filter": {
        "components": {}
    },
    "filterslash": {
        "components": {}
    },
    "home": {
        "components": {}
    },
    "infocircle": {
        "components": {}
    },
    "minus": {
        "components": {}
    },
    "pencil": {
        "components": {}
    },
    "plus": {
        "components": {}
    },
    "refresh": {
        "components": {}
    },
    "search": {
        "components": {}
    },
    "searchminus": {
        "components": {}
    },
    "searchplus": {
        "components": {}
    },
    "sortalt": {
        "components": {}
    },
    "sortamountdown": {
        "components": {}
    },
    "sortamountupalt": {
        "components": {}
    },
    "spinner": {
        "components": {}
    },
    "star": {
        "components": {}
    },
    "starfill": {
        "components": {}
    },
    "thlarge": {
        "components": {}
    },
    "times": {
        "components": {}
    },
    "timescircle": {
        "components": {}
    },
    "trash": {
        "components": {}
    },
    "undo": {
        "components": {}
    },
    "upload": {
        "components": {}
    },
    "windowmaximize": {
        "components": {}
    },
    "windowminimize": {
        "components": {}
    },
    "image": {
        "components": {
            "Image": {
                "description": "Displays an image with preview and tranformation options. For multiple image, see Galleria.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "imageClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the image element."
                        },
                        {
                            "name": "imageStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the image element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "src",
                            "optional": false,
                            "readonly": false,
                            "type": "string | SafeUrl",
                            "description": "The source path for the main image."
                        },
                        {
                            "name": "srcSet",
                            "optional": false,
                            "readonly": false,
                            "type": "string | SafeUrl",
                            "description": "The srcset definition for the main image."
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The sizes definition for the main image."
                        },
                        {
                            "name": "previewImageSrc",
                            "optional": false,
                            "readonly": false,
                            "type": "string | SafeUrl",
                            "description": "The source path for the preview image."
                        },
                        {
                            "name": "previewImageSrcSet",
                            "optional": false,
                            "readonly": false,
                            "type": "string | SafeUrl",
                            "description": "The srcset definition for the preview image."
                        },
                        {
                            "name": "previewImageSizes",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The sizes definition for the preview image."
                        },
                        {
                            "name": "alt",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Attribute of the preview image element."
                        },
                        {
                            "name": "width",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Attribute of the image element."
                        },
                        {
                            "name": "height",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Attribute of the image element."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "\"eager\" | \"lazy\"",
                            "description": "Attribute of the image element."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the dialog, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "preview",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Controls the preview functionality."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "150ms cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation"
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "150ms cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the hide animation"
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Triggered when the preview overlay is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Triggered when the preview overlay is hidden."
                        },
                        {
                            "name": "onImageError",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "This event is triggered if an error occurs while loading an image file."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "image",
                        "name": "indicator",
                        "parameters": [],
                        "description": "Custom template of indicator."
                    },
                    {
                        "parent": "image",
                        "name": "rotaterighticon",
                        "parameters": [],
                        "description": "Custom template of rotaterighticon."
                    },
                    {
                        "parent": "image",
                        "name": "rotatelefticon",
                        "parameters": [],
                        "description": "Custom template of rotatelefticon."
                    },
                    {
                        "parent": "image",
                        "name": "zoomouticon",
                        "parameters": [],
                        "description": "Custom template of zoomouticon."
                    },
                    {
                        "parent": "image",
                        "name": "zoominicon",
                        "parameters": [],
                        "description": "Custom template of zoominicon."
                    },
                    {
                        "parent": "image",
                        "name": "closeicon",
                        "parameters": [],
                        "description": "Custom template of closeicon."
                    }
                ]
            }
        }
    },
    "inplace": {
        "components": {
            "Inplace": {
                "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the content is displayed or not."
                        },
                        {
                            "name": "closable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button to switch back to display mode."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "preventClick",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Allows to prevent clicking."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon to display in the close button."
                        },
                        {
                            "name": "closeAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes a string value that labels the close button."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onActivate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when inplace is opened."
                        },
                        {
                            "name": "onDeactivate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when inplace is closed."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "activate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "description": "Activates the content."
                        },
                        {
                            "name": "deactivate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "description": "Deactivates the content."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "inplace",
                        "name": "display",
                        "parameters": [],
                        "description": "Custom template of display."
                    },
                    {
                        "parent": "inplace",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "inplace",
                        "name": "closeicon",
                        "parameters": [],
                        "description": "Custom template of close icon."
                    }
                ]
            }
        }
    },
    "inputgroup": {
        "components": {
            "InputGroup": {
                "description": "InputGroup displays text, icon, buttons and other content can be grouped next to an input.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        }
                    ]
                }
            }
        }
    },
    "inputgroupaddon": {
        "components": {
            "InputGroupAddon": {
                "description": "InputGroupAddon displays text, icon, buttons and other content can be grouped next to an input.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        }
                    ]
                }
            }
        }
    },
    "inputmask": {
        "components": {
            "InputMask": {
                "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "text",
                            "description": "HTML5 input type."
                        },
                        {
                            "name": "slotChar",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "_",
                            "description": "Placeholder character in mask, default is underscore."
                        },
                        {
                            "name": "autoClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Clears the incomplete value on blur."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Advisory information to display on input."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Size of the input field."
                        },
                        {
                            "name": "maxlength",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Maximum number of character allows in the input field."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies tab order of the element."
                        },
                        {
                            "name": "title",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Title text of the input text."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that labels the input element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaRequired",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to indicate that user input is required on an element before a form can be submitted."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "unmask",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if ngModel sets the raw unmasked value to bound value or the formatted mask value."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the input field."
                        },
                        {
                            "name": "required",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "characterPattern",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "[A-Za-z]",
                            "description": "Regex pattern for alpha characters"
                        },
                        {
                            "name": "autoFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, the input gets a focus automatically on load."
                        },
                        {
                            "name": "autocomplete",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that autocomplete attribute the current element."
                        },
                        {
                            "name": "keepBuffer",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that whether to clean buffer value from model."
                        },
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Mask pattern."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onComplete",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when the mask is completed."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "onInput",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke on input."
                        },
                        {
                            "name": "onKeydown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke on input key press."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when input field is cleared."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "inputmask",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    }
                ]
            },
            "types": {
                "description": "Defines the custom types used by the module.",
                "values": [
                    {
                        "name": "Caret",
                        "value": "{\n    \"begin\": \"number\",\n    \"end\": \"number\"\n}",
                        "description": "Caret positions."
                    }
                ]
            }
        }
    },
    "inputnumber": {
        "components": {
            "InputNumber": {
                "description": "InputNumber is an input component to provide numerical input.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "showButtons",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays spinner buttons."
                        },
                        {
                            "name": "format",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to format the value."
                        },
                        {
                            "name": "buttonLayout",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "stacked",
                            "description": "Layout of the buttons, valid values are \"stacked\" (default), \"horizontal\" and \"vertical\"."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Advisory information to display on input."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Size of the input field."
                        },
                        {
                            "name": "maxlength",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Maximum number of character allows in the input field."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Specifies tab order of the element."
                        },
                        {
                            "name": "title",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Title text of the input text."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies one or more IDs in the DOM that labels the input field."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that labels the input element."
                        },
                        {
                            "name": "ariaRequired",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to indicate that user input is required on an element before a form can be submitted."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the input field."
                        },
                        {
                            "name": "required",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Indicates that whether the input field is required."
                        },
                        {
                            "name": "autocomplete",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that autocomplete attribute the current element."
                        },
                        {
                            "name": "min",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "incrementButtonClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the increment button."
                        },
                        {
                            "name": "decrementButtonClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the decrement button."
                        },
                        {
                            "name": "incrementButtonIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the increment button."
                        },
                        {
                            "name": "decrementButtonIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the decrement button."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "step",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "allowEmpty",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Determines whether the input field is empty."
                        },
                        {
                            "name": "locale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to be used in formatting."
                        },
                        {
                            "name": "localeMatcher",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". See Locale Negotiation for details."
                        },
                        {
                            "name": "mode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "decimal",
                            "description": "Defines the behavior of the component, valid values are \"decimal\" and \"currency\"."
                        },
                        {
                            "name": "currency",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB. There is no default value; if the style is \"currency\", the currency property must be provided."
                        },
                        {
                            "name": "currencyDisplay",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, ü\"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\"."
                        },
                        {
                            "name": "useGrouping",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators."
                        },
                        {
                            "name": "minFractionDigits",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "maxFractionDigits",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the ISO 4217 currency code list (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "prefix",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display before the value."
                        },
                        {
                            "name": "suffix",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display after the value."
                        },
                        {
                            "name": "inputStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When present, it specifies that the element should be disabled."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onInput",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "InputNumberInputEvent"
                                }
                            ],
                            "description": "Callback to invoke on input."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "onKeyDown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "KeyboardEvent"
                                }
                            ],
                            "description": "Callback to invoke on input key press."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "void"
                                }
                            ],
                            "description": "Callback to invoke when clear token is clicked."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "InputNumberInputEvent",
                        "description": "Custom input event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Input value."
                            },
                            {
                                "name": "formattedValue",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Selected option value."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "inputnumber",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    },
                    {
                        "parent": "inputnumber",
                        "name": "incrementbuttonicon",
                        "parameters": [],
                        "description": "Custom increment button icon template."
                    },
                    {
                        "parent": "inputnumber",
                        "name": "decrementbuttonicon",
                        "parameters": [],
                        "description": "Custom decrement button icon template."
                    }
                ]
            }
        }
    },
    "inputswitch": {
        "components": {
            "InputSwitch": {
                "description": "InputSwitch is used to select a boolean value.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the input element."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component cannot be edited."
                        },
                        {
                            "name": "trueValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that autocomplete attribute the current element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "InputSwitchChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when the on value change."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "InputSwitchChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "checked",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Checked state."
                            }
                        ]
                    }
                ]
            }
        }
    },
    "inputtext": {
        "components": {}
    },
    "inputtextarea": {
        "components": {
            "InputTextarea": {
                "description": "InputTextarea adds styling and autoResize functionality to standard textarea element.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "autoResize",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, textarea size changes as being typed."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onResize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Object | Event"
                                }
                            ],
                            "description": "Callback to invoke on textarea resize."
                        }
                    ]
                }
            }
        }
    },
    "keyfilter": {
        "components": {
            "KeyFilter": {
                "description": "KeyFilter Directive is a built-in feature of InputText to restrict user input based on a regular expression.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "pValidateOnly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, instead of blocking keys, input is validated internally to test against the regular expression."
                        },
                        {
                            "name": "pattern",
                            "optional": false,
                            "readonly": false,
                            "type": "RegExp | KeyFilterPattern"
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "ngModelChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "string | number"
                                }
                            ],
                            "description": "Emits a value whenever the ngModel of the component changes."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {}
        }
    },
    "knob": {
        "components": {
            "Knob": {
                "description": "Knob is a form component to define number inputs with a dial.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies one or more IDs in the DOM that labels the input field."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "valueColor",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--primary-color, Black)",
                            "description": "Background of the value."
                        },
                        {
                            "name": "rangeColor",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--surface-border, LightGray)",
                            "description": "Background color of the range."
                        },
                        {
                            "name": "textColor",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--text-color-secondary, Black)",
                            "description": "Color of the value text."
                        },
                        {
                            "name": "valueTemplate",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "{value}",
                            "description": "Template string of the value."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Size of the component in pixels."
                        },
                        {
                            "name": "step",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "min",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "strokeWidth",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "14",
                            "description": "Width of the knob stroke."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "showValue",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the show the value inside the knob."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component value cannot be edited."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ],
                            "description": "Callback to invoke on value change."
                        }
                    ]
                }
            }
        }
    },
    "listbox": {
        "components": {
            "Listbox": {
                "description": "ListBox is used to select one or more values from a list of items.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the component."
                        },
                        {
                            "name": "searchMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when the search is active. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when filtering does not return any results. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "searchLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Locale to use in searching. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the hovered option will be focused."
                        },
                        {
                            "name": "filterMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when filtering."
                        },
                        {
                            "name": "filterFields",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "virtualScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the data should be loaded on demand during scroll."
                        },
                        {
                            "name": "virtualScrollItemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Height of an item in the list for VirtualScrolling."
                        },
                        {
                            "name": "virtualScrollOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollerOptions",
                            "description": "Whether to use the scroller feature. The properties of scroller component can be used like an object in it."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "multiple",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the container."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the container."
                        },
                        {
                            "name": "listStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the list element."
                        },
                        {
                            "name": "listStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the list element."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be changed."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "checkbox",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting items with checkboxes."
                        },
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "default": "contains",
                            "description": "Defines how the items are filtered."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "A property to uniquely identify a value in options."
                        },
                        {
                            "name": "showToggleAll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether header checkbox is shown in multiple mode."
                        },
                        {
                            "name": "optionLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the label field of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the value field of an option."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "items",
                            "description": "Name of the options field of an option group."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "Name of the label field of an option group."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the disabled field of an option."
                        },
                        {
                            "name": "ariaFilterLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the filter input."
                        },
                        {
                            "name": "filterPlaceHolder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines placeholder of the filter input."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when filtering does not return any results."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to display when there is no data. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "group",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display options as grouped when nested options are provided."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "When specified, filter displays with this value."
                        },
                        {
                            "name": "selectAll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether all data is selected."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ListboxChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ListboxClickEvent"
                                }
                            ],
                            "description": "Callback to invoke when option is clicked."
                        },
                        {
                            "name": "onDblClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ListboxDoubleClickEvent"
                                }
                            ],
                            "description": "Callback to invoke when option is double clicked."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ListboxFilterEvent"
                                }
                            ],
                            "description": "Callback to invoke when data is filtered."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to invoke when component receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to invoke when component loses focus."
                        },
                        {
                            "name": "onSelectAllChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ListboxSelectAllChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when all data is selected."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "updateModel",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                },
                                {
                                    "name": "event",
                                    "type": "any"
                                }
                            ],
                            "description": "Updates the model value."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "ListboxChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Original event"
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Selected option value"
                            }
                        ]
                    },
                    {
                        "name": "ListboxSelectAllChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "checked",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Boolean value indicates whether all data is selected."
                            }
                        ]
                    },
                    {
                        "name": "ListboxFilterEvent",
                        "description": "Custom filter event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "filter",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Filter value."
                            }
                        ]
                    },
                    {
                        "name": "ListboxClickEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Value of the component."
                            },
                            {
                                "name": "option",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Selected option"
                            }
                        ]
                    },
                    {
                        "name": "ListboxDoubleClickEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Value of the component."
                            },
                            {
                                "name": "option",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Selected option"
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "listbox",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Data of the option.\n  \t index: number, // Index of the option.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom item template."
                    },
                    {
                        "parent": "listbox",
                        "name": "group",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Group option.\n  }",
                                "description": "group data."
                            }
                        ],
                        "description": "Custom group template."
                    },
                    {
                        "parent": "listbox",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "listbox",
                        "name": "filter",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: ListboxFilterOptions, // Filter options.\n  }",
                                "description": "filter options."
                            }
                        ],
                        "description": "Custom filter template."
                    },
                    {
                        "parent": "listbox",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "listbox",
                        "name": "empty",
                        "parameters": [],
                        "description": "Custom empty template."
                    },
                    {
                        "parent": "listbox",
                        "name": "emptyfilter",
                        "parameters": [],
                        "description": "Custom empty filter template."
                    },
                    {
                        "parent": "listbox",
                        "name": "filtericon",
                        "parameters": [],
                        "description": "Custom filter icon template."
                    },
                    {
                        "parent": "listbox",
                        "name": "checkicon",
                        "parameters": [],
                        "description": "Custom check icon template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "ListboxFilterOptions",
                        "description": "Filter options of listbox.",
                        "props": [
                            {
                                "name": "filter",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "reset",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            }
                        ]
                    }
                ]
            }
        }
    },
    "megamenu": {
        "components": {
            "MegaMenu": {
                "description": "MegaMenu is navigation component that displays submenus together.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuItem[]"
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "orientation",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "horizontal",
                            "description": "Defines the orientation."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "megamenu",
                        "name": "start",
                        "parameters": [],
                        "description": "Custom template of start."
                    },
                    {
                        "parent": "megamenu",
                        "name": "submenuicon",
                        "parameters": [],
                        "description": "Custom template of submenuicon."
                    },
                    {
                        "parent": "megamenu",
                        "name": "end",
                        "parameters": [],
                        "description": "Custom template of end."
                    }
                ]
            }
        }
    },
    "menu": {
        "components": {
            "Menu": {
                "description": "Menu is a navigation / command component that supports dynamic and static positioning.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when overlay menu is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when overlay menu is hidden."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the list loses focus."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the list receives focus."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "description": "Toggles the visibility of the popup menu."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "any",
                                    "description": "Browser event."
                                }
                            ],
                            "description": "Displays the popup menu."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "description": "Hides the popup menu."
                        }
                    ]
                }
            }
        }
    },
    "menubar": {
        "components": {
            "Menubar": {
                "description": "Menubar is a horizontal menu component.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]"
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoDisplay",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show a root submenu on mouse over."
                        },
                        {
                            "name": "autoHide",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to hide a root submenu when mouse leaves."
                        },
                        {
                            "name": "autoHideDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Delay to hide the root submenu in milliseconds when mouse leaves."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to execute when button is focused."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Callback to execute when button loses focus."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "menubar",
                        "name": "start",
                        "parameters": [],
                        "description": "Custom template of start."
                    },
                    {
                        "parent": "menubar",
                        "name": "end",
                        "parameters": [],
                        "description": "Custom template of end."
                    },
                    {
                        "parent": "menubar",
                        "name": "menuicon",
                        "parameters": [],
                        "description": "Custom template of menuicon."
                    },
                    {
                        "parent": "menubar",
                        "name": "submenuicon",
                        "parameters": [],
                        "description": "Custom template of submenuicon."
                    }
                ]
            }
        }
    },
    "messages": {
        "components": {
            "Messages": {
                "description": "Messages is used to display alerts inline.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": null
                        },
                        {
                            "name": "closable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines if message box can be closed by the click icon."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "enableService",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether displaying services messages are enabled."
                        },
                        {
                            "name": "key",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Id to match the key of the message to enable scoping in service based messaging."
                        },
                        {
                            "name": "escape",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether displaying messages would be escaped or not."
                        },
                        {
                            "name": "severity",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "300ms ease-out",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "200ms cubic-bezier(0.86, 0, 0.07, 1)",
                            "description": "Transition options of the hide animation."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "valueChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "Message[]"
                                }
                            ],
                            "description": "This function is executed when the value changes."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "messages",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    }
                ]
            }
        }
    },
    "multiselect": {
        "components": {
            "MultiSelect": {
                "description": "MultiSelect is used to select multiple items from a collection.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the component"
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "panelStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "panelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the overlay panel element."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component cannot be edited."
                        },
                        {
                            "name": "group",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display options as grouped when nested options are provided."
                        },
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When specified, displays an input field to filter the items on keyup."
                        },
                        {
                            "name": "filterPlaceHolder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines placeholder of the filter input."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the options panel."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "A property to uniquely identify a value in options."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "displaySelectedLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        },
                        {
                            "name": "maxSelectedLabels",
                            "optional": false,
                            "readonly": false,
                            "type": "number"
                        },
                        {
                            "name": "selectionLimit",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Decides how many selected item labels to show at most."
                        },
                        {
                            "name": "selectedItemsLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "{0} items selected",
                            "description": "Label to display after exceeding max selected labels e.g. ({0} items selected), defaults \"ellipsis\" keyword to indicate a text-overflow."
                        },
                        {
                            "name": "showToggleAll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the checkbox at header to toggle all items at once."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display when filtering does not return any results."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display when there is no data. Defaults to global value in i18n translation configuration."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon class of the dropdown icon."
                        },
                        {
                            "name": "optionLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the label field of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the value field of an option."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the disabled field of an option."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "Name of the label field of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "items",
                            "description": "Name of the options field of an option group."
                        },
                        {
                            "name": "showHeader",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header."
                        },
                        {
                            "name": "filterBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "virtualScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the data should be loaded on demand during scroll."
                        },
                        {
                            "name": "virtualScrollItemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Height of an item in the list for VirtualScrolling."
                        },
                        {
                            "name": "virtualScrollOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollerOptions",
                            "description": "Whether to use the scroller feature. The properties of scroller component can be used like an object in it."
                        },
                        {
                            "name": "overlayOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayOptions",
                            "description": "Whether to use overlay API feature. The properties of overlay API can be used like an object in it."
                        },
                        {
                            "name": "ariaFilterLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the filter input."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "default": "contains",
                            "description": "Defines how the items are filtered."
                        },
                        {
                            "name": "tooltip",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Advisory information to display in a tooltip on hover."
                        },
                        {
                            "name": "tooltipPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "right",
                            "description": "Position of the tooltip."
                        },
                        {
                            "name": "tooltipPositionStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "absolute",
                            "description": "Type of CSS position."
                        },
                        {
                            "name": "tooltipStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tooltip."
                        },
                        {
                            "name": "autofocusFilter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Applies focus to the filter element when the overlay is shown."
                        },
                        {
                            "name": "display",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed."
                        },
                        {
                            "name": "autocomplete",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "off",
                            "description": "Defines the autocomplete is active."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "",
                            "deprecated": "since v14.2.0, use overlayOptions property instead.\nWhether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "",
                            "deprecated": "since v14.2.0, use overlayOptions property instead.\nBase zIndex value to use in layering."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the show animation.",
                            "deprecated": "since v14.2.0, use overlayOptions property instead."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the hide animation.",
                            "deprecated": "since v14.2.0, use overlayOptions property instead."
                        },
                        {
                            "name": "defaultLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display as the available options."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "When specified, filter displays with this value."
                        },
                        {
                            "name": "itemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Item size of item to be virtual scrolled.",
                            "deprecated": "use virtualScrollItemSize property instead."
                        },
                        {
                            "name": "selectAll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "filterFields",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Determines if the option will be selected on focus."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when value changes."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectFilterEvent"
                                }
                            ],
                            "description": "Callback to invoke when data is filtered."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectFocusEvent"
                                }
                            ],
                            "description": "Callback to invoke when multiselect receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectBlurEvent"
                                }
                            ],
                            "description": "Callback to invoke when multiselect loses focus."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when component is clicked."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "void"
                                }
                            ],
                            "description": "Callback to invoke when input field is cleared."
                        },
                        {
                            "name": "onPanelShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "void"
                                }
                            ],
                            "description": "Callback to invoke when overlay panel becomes visible."
                        },
                        {
                            "name": "onPanelHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "void"
                                }
                            ],
                            "description": "Callback to invoke when overlay panel becomes hidden."
                        },
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectLazyLoadEvent"
                                }
                            ],
                            "description": "Callback to invoke in lazy mode to load new data."
                        },
                        {
                            "name": "onRemove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectRemoveEvent"
                                }
                            ],
                            "description": "Callback to invoke in lazy mode to load new data."
                        },
                        {
                            "name": "onSelectAllChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectSelectAllChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when all data is selected."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "updateModel",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                },
                                {
                                    "name": "event",
                                    "type": "any"
                                }
                            ],
                            "description": "Updates the model value."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "type": "any"
                                }
                            ],
                            "description": "Displays the panel."
                        },
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "type": "any"
                                }
                            ],
                            "description": "Hides the panel."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "MultiSelectChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Current selected values."
                            },
                            {
                                "name": "itemValue",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Toggled item value."
                            }
                        ]
                    },
                    {
                        "name": "MultiSelectSelectAllChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "checked",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Boolean value indicates whether all data is selected."
                            }
                        ]
                    },
                    {
                        "name": "MultiSelectFilterEvent",
                        "description": "Custom filter event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "filter",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Filter value."
                            }
                        ]
                    },
                    {
                        "name": "MultiSelectFocusEvent",
                        "description": "Custom focus event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            }
                        ]
                    },
                    {
                        "name": "MultiSelectBlurEvent",
                        "description": "Custom blur event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            }
                        ]
                    },
                    {
                        "name": "MultiSelectLazyLoadEvent",
                        "description": "Custom lazy load event.",
                        "props": [
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the first element in viewport."
                            },
                            {
                                "name": "last",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the last element in viewport."
                            }
                        ]
                    },
                    {
                        "name": "MultiSelectRemoveEvent",
                        "description": "Custom remove event.",
                        "props": [
                            {
                                "name": "newValue",
                                "optional": false,
                                "readonly": false,
                                "type": "object",
                                "description": "Value after the item removed."
                            },
                            {
                                "name": "removed",
                                "optional": false,
                                "readonly": false,
                                "type": "MultiSelectItem",
                                "description": "Removed value."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "multiselect",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Data of the option.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "selectedItems",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Selected option value.\n  \t removeChip: undefined, // undefined\n  }",
                                "description": "selected items data."
                            }
                        ],
                        "description": "Custom selected item template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "filter",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: MultiSelectFilterOptions, // Filter options.\n  }"
                            }
                        ],
                        "description": "Custom filter template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "emptyfilter",
                        "parameters": [],
                        "description": "Custom empty filter template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "empty",
                        "parameters": [],
                        "description": "Custom empty template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "group",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Data of the item.\n  }"
                            }
                        ],
                        "description": "Custom group template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "loader",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: ScrollerOptions, // Virtual scroller options.\n  }"
                            }
                        ],
                        "description": "Custom loader template. This template can be used with virtualScroll."
                    },
                    {
                        "parent": "multiselect",
                        "name": "dropdownicon",
                        "parameters": [],
                        "description": "Custom dropdown trigger icon template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "filtericon",
                        "parameters": [],
                        "description": "Custom filter icon template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "checkicon",
                        "parameters": [],
                        "description": "Custom check icon template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "closeicon",
                        "parameters": [],
                        "description": "Custom close icon template."
                    },
                    {
                        "parent": "multiselect",
                        "name": "removetokenicon",
                        "parameters": [],
                        "description": "Custom remove token icon template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "MultiSelectFilterOptions",
                        "description": "Callbacks to invoke on filter or reset.",
                        "props": [
                            {
                                "name": "filter",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "reset",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            }
                        ]
                    }
                ]
            }
        }
    },
    "orderlist": {
        "components": {
            "OrderList": {
                "description": "OrderList is used to managed the order of a collection.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text for the caption."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies one or more IDs in the DOM that labels the input field."
                        },
                        {
                            "name": "listStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the list element."
                        },
                        {
                            "name": "responsive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "A boolean value that indicates whether the component should be responsive."
                        },
                        {
                            "name": "filterBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "When specified displays an input field to filter the items on keyup and decides which fields to search against."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Placeholder of the filter input."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "dragdrop",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to enable dragdrop based reordering."
                        },
                        {
                            "name": "controlsPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "Defines the location of the buttons with respect to the list."
                        },
                        {
                            "name": "ariaFilterLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the filter input."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "default": "contains",
                            "description": "Defines how the items are filtered."
                        },
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "Indicates the width of the screen at which the component should change its behavior."
                        },
                        {
                            "name": "stripedRows",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "trackBy",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": "...",
                            "description": "Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity."
                        },
                        {
                            "name": "selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]"
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "selectionChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke on selection change."
                        },
                        {
                            "name": "onReorder",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when list is reordered."
                        },
                        {
                            "name": "onSelectionChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OrderListSelectionChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when selection changes."
                        },
                        {
                            "name": "onFilterEvent",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OrderListFilterEvent"
                                }
                            ],
                            "description": "Callback to invoke when filtering occurs."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the list is focused"
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the list is blurred"
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "resetFilter",
                            "parameters": [],
                            "description": "Callback to invoke on filter reset."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "OrderListSelectionChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Current selected values."
                            }
                        ]
                    },
                    {
                        "name": "OrderListFilterEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Filtered options."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "orderlist",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  \t index: number, // Index of the item.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "filter",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: OrderListFilterOptions, // Filter options.\n  }"
                            }
                        ],
                        "description": "Custom filter template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "emptyfilter",
                        "parameters": [],
                        "description": "Custom empty filter template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "empty",
                        "parameters": [],
                        "description": "Custom empty template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "filtericon",
                        "parameters": [],
                        "description": "Custom filter icon template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "moveupicon",
                        "parameters": [],
                        "description": "Custom move up icon template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "movetopicon",
                        "parameters": [],
                        "description": "Custom move top icon template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "movedownicon",
                        "parameters": [],
                        "description": "Custom move down icon template."
                    },
                    {
                        "parent": "orderlist",
                        "name": "movebottomicon",
                        "parameters": [],
                        "description": "Custom move bottom icon template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "OrderListFilterOptions",
                        "description": "Callbacks to invoke on filter.",
                        "props": [
                            {
                                "name": "filter",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "reset",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            }
                        ]
                    }
                ]
            }
        }
    },
    "organizationchart": {
        "components": {
            "OrganizationChart": {
                "description": "OrganizationChart visualizes hierarchical organization data.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode<any>[]",
                            "description": "An array of nested TreeNodes."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "selectionMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "preserveSpace",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the space allocated by a node is preserved when hidden."
                        },
                        {
                            "name": "selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "A single treenode instance or an array to refer to the selections."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "selectionChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke on selection change."
                        },
                        {
                            "name": "onNodeSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OrganizationChartNodeSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "onNodeUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OrganizationChartNodeUnSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "onNodeExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OrganizationChartNodeExpandEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "onNodeCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OrganizationChartNodeCollapseEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is collapsed."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "OrganizationChartNodeSelectEvent",
                        "description": "Custom node select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "OrganizationChartNodeUnSelectEvent",
                        "description": "Custom node unselect event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "OrganizationChartNodeExpandEvent",
                        "description": "Custom node expand event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "OrganizationChartNodeCollapseEvent",
                        "description": "Custom node collapse event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "organizationchart",
                        "name": "togglericon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Expanded state of the node.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom toggler icon template."
                    }
                ]
            }
        }
    },
    "overlay": {
        "components": {
            "Overlay": {
                "description": "This API allows overlay components to be controlled from the PrimeNGConfig. In this way, all overlay components in the application can have the same behavior.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "The visible property is an input that determines the visibility of the component."
                        },
                        {
                            "name": "mode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The mode property is an input that determines the overlay mode type or string."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "The style property is an input that determines the style object for the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The styleClass property is an input that determines the CSS class(es) for the component."
                        },
                        {
                            "name": "contentStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "The contentStyle property is an input that determines the style object for the content of the component."
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The contentStyleClass property is an input that determines the CSS class(es) for the content of the component."
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The target property is an input that specifies the target element or selector for the component."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement | \"body\"",
                            "description": "Overlay can be mounted into its location, body or DOM element instance using this option."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "The autoZIndex determines whether to automatically manage layering. Its default value is 'false'."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The baseZIndex is base zIndex value to use in layering."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the show or hide animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The hideTransitionOptions property is an input that determines the CSS transition options for hiding the component."
                        },
                        {
                            "name": "listener",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "The listener property is an input that specifies the listener object for the component."
                        },
                        {
                            "name": "responsive",
                            "optional": false,
                            "readonly": false,
                            "type": "ResponsiveOverlayOptions",
                            "description": "It is the option used to determine in which mode it should appear according to the given media or breakpoint."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayOptions",
                            "description": "The options property is an input that specifies the overlay options for the component."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "visibleChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "This EventEmitter is used to notify changes in the visibility state of a component."
                        },
                        {
                            "name": "onBeforeShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OverlayOnBeforeShowEvent"
                                }
                            ],
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OverlayOnShowEvent"
                                }
                            ],
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "onBeforeHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OverlayOnBeforeHideEvent"
                                }
                            ],
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "OverlayOnHideEvent"
                                }
                            ],
                            "description": "Callback to invoke when the overlay is hidden"
                        },
                        {
                            "name": "onAnimationStart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AnimationEvent_2"
                                }
                            ],
                            "description": "Callback to invoke when the animation is started."
                        },
                        {
                            "name": "onAnimationDone",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "AnimationEvent_2"
                                }
                            ],
                            "description": "Callback to invoke when the animation is done."
                        }
                    ]
                }
            }
        }
    },
    "overlaypanel": {
        "components": {
            "OverlayPanel": {
                "description": "OverlayPanel is a container component positioned as connected to its target.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "dismissable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables to hide the overlay when outside is clicked."
                        },
                        {
                            "name": "showCloseIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays a close icon at top right corner."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "body",
                            "description": "Target element to attach the panel, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "ariaCloseLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Aria label of the close icon."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "focusOnShow",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, first button receives focus on show."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when an overlay becomes visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when an overlay gets hidden."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "any",
                                    "description": "Browser event"
                                },
                                {
                                    "name": "target",
                                    "type": "any",
                                    "description": "Target element."
                                }
                            ],
                            "description": "Toggles the visibility of the panel."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "any",
                                    "description": "Browser event"
                                },
                                {
                                    "name": "target",
                                    "type": "any",
                                    "description": "Target element."
                                }
                            ],
                            "description": "Displays the panel."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "description": "Hides the panel."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "overlaypanel",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "overlaypanel",
                        "name": "closeicon",
                        "parameters": [],
                        "description": "Custom template of closeicon."
                    }
                ]
            }
        }
    },
    "paginator": {
        "components": {
            "Paginator": {
                "description": "Paginator is a generic component to display content in paged format.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "pageLinkSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "alwaysShow",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "dropdownAppendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "templateLeft",
                            "optional": false,
                            "readonly": false,
                            "type": "TemplateRef<PaginatorState>",
                            "description": "Template instance to inject into the left side of the paginator."
                        },
                        {
                            "name": "templateRight",
                            "optional": false,
                            "readonly": false,
                            "type": "TemplateRef<PaginatorState>",
                            "description": "Template instance to inject into the right side of the paginator."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "dropdownScrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "{currentPage} of {totalPages}",
                            "description": "Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}"
                        },
                        {
                            "name": "showCurrentPageReport",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display current page report."
                        },
                        {
                            "name": "showFirstLastIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, icons are displayed on paginator to go first and last page."
                        },
                        {
                            "name": "totalRecords",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of total records."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Data count to display per page."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Array of integer/object values to display inside rows per page dropdown. A object that have 'showAll' key can be added to it to show all data. Exp; [10,20,30,{showAll:'All'}]"
                        },
                        {
                            "name": "showJumpToPageDropdown",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a dropdown to navigate to any page."
                        },
                        {
                            "name": "showJumpToPageInput",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a input to navigate to any page."
                        },
                        {
                            "name": "showPageLinks",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show page links."
                        },
                        {
                            "name": "locale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to be used in formatting."
                        },
                        {
                            "name": "dropdownItemTemplate",
                            "optional": false,
                            "readonly": false,
                            "type": "TemplateRef<Object>",
                            "description": "Template instance to inject into the dropdown item inside in the paginator."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Zero-relative number of the first row to be displayed."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onPageChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "PaginatorState"
                                }
                            ],
                            "description": "Callback to invoke when page changes, the event object contains information about the new state."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "paginator",
                        "name": "dropdownicon",
                        "parameters": [],
                        "description": "Custom dropdown trigger icon template."
                    },
                    {
                        "parent": "paginator",
                        "name": "firstpagelinkicon",
                        "parameters": [],
                        "description": "Custom first page link icon template."
                    },
                    {
                        "parent": "paginator",
                        "name": "previouspagelinkicon",
                        "parameters": [],
                        "description": "Custom previous page link icon template."
                    },
                    {
                        "parent": "paginator",
                        "name": "lastpagelinkicon",
                        "parameters": [],
                        "description": "Custom last page link icon template."
                    },
                    {
                        "parent": "paginator",
                        "name": "nextpagelinkicon",
                        "parameters": [],
                        "description": "Custom next page link icon template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "PaginatorState",
                        "description": "Paginator state.",
                        "props": [
                            {
                                "name": "page",
                                "optional": true,
                                "readonly": false,
                                "type": "number"
                            },
                            {
                                "name": "first",
                                "optional": true,
                                "readonly": false,
                                "type": "number"
                            },
                            {
                                "name": "rows",
                                "optional": true,
                                "readonly": false,
                                "type": "number"
                            },
                            {
                                "name": "pageCount",
                                "optional": true,
                                "readonly": false,
                                "type": "number"
                            }
                        ]
                    }
                ]
            }
        }
    },
    "panel": {
        "components": {
            "Panel": {
                "description": "Panel is a container with the optional content toggle feature.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "toggleable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if content of panel can be expanded and collapsed."
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Header text of the panel."
                        },
                        {
                            "name": "collapsed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the initial state of panel content, supports one or two-way binding as well."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "iconPos",
                            "optional": false,
                            "readonly": false,
                            "type": "\"center\" | \"end\" | \"start\"",
                            "default": "end",
                            "description": "Position of the icons."
                        },
                        {
                            "name": "expandIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Expand icon of the toggle button.",
                            "deprecated": "since v15.4.2, use "
                        },
                        {
                            "name": "collapseIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Collapse icon of the toggle button.",
                            "deprecated": "since v15.4.2, use "
                        },
                        {
                            "name": "showHeader",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if header of panel cannot be displayed.",
                            "deprecated": "since v15.4.2, use "
                        },
                        {
                            "name": "toggler",
                            "optional": false,
                            "readonly": false,
                            "type": "\"header\" | \"icon\"",
                            "default": "icon",
                            "description": "Specifies the toggler element to toggle the panel content."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "400ms cubic-bezier(0.86, 0, 0.07, 1)",
                            "description": "Transition options of the animation."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "collapsedChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Emitted when the collapsed changes."
                        },
                        {
                            "name": "onBeforeToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PanelBeforeToggleEvent"
                                }
                            ],
                            "description": "Callback to invoke before panel toggle."
                        },
                        {
                            "name": "onAfterToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PanelAfterToggleEvent"
                                }
                            ],
                            "description": "Callback to invoke after panel toggle."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "PanelBeforeToggleEvent",
                        "description": "Custom panel toggle event, emits before panel toggle.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "collapsed",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Collapsed state of the panel."
                            }
                        ]
                    },
                    {
                        "name": "PanelAfterToggleEvent",
                        "description": "Custom panel toggle event, emits after panel toggle.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "collapsed",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Collapsed state of the panel."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "panel",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "panel",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom content template."
                    },
                    {
                        "parent": "panel",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "panel",
                        "name": "headericons",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Collapsed state as a boolean\n  }",
                                "description": "header icon data."
                            }
                        ],
                        "description": "Custom icons template of the panel toggler."
                    },
                    {
                        "parent": "panel",
                        "name": "icons",
                        "parameters": [],
                        "description": "Custom icons template of the panel header."
                    }
                ]
            }
        }
    },
    "panelmenu": {
        "components": {
            "PanelMenu": {
                "description": "PanelMenu is a hybrid of Accordion and Tree components.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "multiple",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether multiple tabs can be activated at the same time or not."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "400ms cubic-bezier(0.86, 0, 0.07, 1)",
                            "description": "Transition options of the animation."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "collapseAll",
                            "parameters": [],
                            "description": "Collapses open panels."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "panelmenu",
                        "name": "submenuicon",
                        "parameters": [],
                        "description": "Custom template of submenuicon."
                    }
                ]
            }
        }
    },
    "password": {
        "components": {
            "PasswordDirective": {
                "description": "Password directive.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "promptLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "Enter a password",
                            "description": "Text to prompt password entry. Defaults to PrimeNG I18N API configuration."
                        },
                        {
                            "name": "weakLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "Weak",
                            "description": "Text for a weak password. Defaults to PrimeNG I18N API configuration."
                        },
                        {
                            "name": "mediumLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "Medium",
                            "description": "Text for a medium password. Defaults to PrimeNG I18N API configuration."
                        },
                        {
                            "name": "strongLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "Strong",
                            "description": "Text for a strong password. Defaults to PrimeNG I18N API configuration."
                        },
                        {
                            "name": "feedback",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the strength indicator or not."
                        },
                        {
                            "name": "showPassword",
                            "optional": false,
                            "readonly": false,
                            "type": null
                        }
                    ]
                }
            },
            "Password": {
                "description": "Password displays strength indicator for password fields.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies one or more IDs in the DOM that labels the input field."
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the input for accessibility."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Indicates whether the component is disabled or not."
                        },
                        {
                            "name": "promptLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text to prompt password entry. Defaults to PrimeNG I18N API configuration."
                        },
                        {
                            "name": "mediumRegex",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})",
                            "description": "Regex value for medium regex."
                        },
                        {
                            "name": "strongRegex",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})",
                            "description": "Regex value for strong regex."
                        },
                        {
                            "name": "weakLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text for a weak password. Defaults to PrimeNG I18N API configuration."
                        },
                        {
                            "name": "mediumLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text for a medium password. Defaults to PrimeNG I18N API configuration."
                        },
                        {
                            "name": "maxLength",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "specifies the maximum number of characters allowed in the input element."
                        },
                        {
                            "name": "strongLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text for a strong password. Defaults to PrimeNG I18N API configuration."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the accessible input element."
                        },
                        {
                            "name": "feedback",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the strength indicator or not."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Id of the element or \"body\" for document where the overlay should be appended to."
                        },
                        {
                            "name": "toggleMask",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show an icon to display the password as plain text."
                        },
                        {
                            "name": "inputStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "inputStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        },
                        {
                            "name": "autocomplete",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specify automated assistance in filling out password by browser."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Advisory information to display on input."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when clear button is clicked."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "password",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom template of header."
                    },
                    {
                        "parent": "password",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "password",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom template of footer."
                    },
                    {
                        "parent": "password",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom template of clear icon."
                    },
                    {
                        "parent": "password",
                        "name": "hideicon",
                        "parameters": [],
                        "description": "Custom template of hide icon."
                    },
                    {
                        "parent": "password",
                        "name": "showicon",
                        "parameters": [],
                        "description": "Custom template of show icon."
                    }
                ]
            }
        }
    },
    "picklist": {
        "components": {
            "PickList": {
                "description": "PickList is used to reorder items between different lists.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects for the source list."
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects for the target list."
                        },
                        {
                            "name": "sourceHeader",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text for the source list caption"
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "rightButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the move to right button for accessibility."
                        },
                        {
                            "name": "leftButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the move to left button for accessibility."
                        },
                        {
                            "name": "allRightButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the move to all right button for accessibility."
                        },
                        {
                            "name": "allLeftButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the move to all left button for accessibility."
                        },
                        {
                            "name": "upButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the move to up button for accessibility."
                        },
                        {
                            "name": "downButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the move to down button for accessibility."
                        },
                        {
                            "name": "topButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the move to top button for accessibility."
                        },
                        {
                            "name": "bottomButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the move to bottom button for accessibility."
                        },
                        {
                            "name": "targetHeader",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text for the target list caption"
                        },
                        {
                            "name": "responsive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled orderlist adjusts its controls based on screen size."
                        },
                        {
                            "name": "filterBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "When specified displays an input field to filter the items on keyup and decides which field to search (Accepts multiple fields with a comma)."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "trackBy",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": "...",
                            "description": "Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity. Use sourceTrackBy or targetTrackBy in case different algorithms are needed per list."
                        },
                        {
                            "name": "sourceTrackBy",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "description": "Function to optimize the dom operations by delegating to ngForTrackBy in source list, default algorithm checks for object identity."
                        },
                        {
                            "name": "targetTrackBy",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "description": "Function to optimize the dom operations by delegating to ngForTrackBy in target list, default algorithm checks for object identity."
                        },
                        {
                            "name": "showSourceFilter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show filter input for source list when filterBy is enabled."
                        },
                        {
                            "name": "showTargetFilter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show filter input for target list when filterBy is enabled."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "dragdrop",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to enable dragdrop based reordering."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "sourceStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the source list element."
                        },
                        {
                            "name": "targetStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the target list element."
                        },
                        {
                            "name": "showSourceControls",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show buttons of source list."
                        },
                        {
                            "name": "showTargetControls",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show buttons of target list."
                        },
                        {
                            "name": "sourceFilterPlaceholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Placeholder text on source filter input."
                        },
                        {
                            "name": "targetFilterPlaceholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Placeholder text on target filter input."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "ariaSourceFilterLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the filter input of source list."
                        },
                        {
                            "name": "ariaTargetFilterLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the filter input of target list."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                            "default": "contains",
                            "description": "Defines how the items are filtered."
                        },
                        {
                            "name": "stripedRows",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "keepSelection",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Keeps selection on the transfer list."
                        },
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Indicates the width of the screen at which the component should change its behavior."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onMoveToSource",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListMoveToSourceEvent"
                                }
                            ],
                            "description": "Callback to invoke when items are moved from target to source."
                        },
                        {
                            "name": "onMoveAllToSource",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListMoveAllToSourceEvent"
                                }
                            ],
                            "description": "Callback to invoke when all items are moved from target to source."
                        },
                        {
                            "name": "onMoveAllToTarget",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListMoveAllToTargetEvent"
                                }
                            ],
                            "description": "Callback to invoke when all items are moved from source to target."
                        },
                        {
                            "name": "onMoveToTarget",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListMoveToTargetEvent"
                                }
                            ],
                            "description": "Callback to invoke when items are moved from source to target."
                        },
                        {
                            "name": "onSourceReorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListSourceReorderEvent"
                                }
                            ],
                            "description": "Callback to invoke when items are reordered within source list."
                        },
                        {
                            "name": "onTargetReorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListTargetReorderEvent"
                                }
                            ],
                            "description": "Callback to invoke when items are reordered within target list."
                        },
                        {
                            "name": "onSourceSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListSourceSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when items are selected within source list."
                        },
                        {
                            "name": "onTargetSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListTargetSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when items are selected within target list."
                        },
                        {
                            "name": "onSourceFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListSourceFilterEvent"
                                }
                            ],
                            "description": "Callback to invoke when the source list is filtered"
                        },
                        {
                            "name": "onTargetFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "PickListTargetFilterEvent"
                                }
                            ],
                            "description": "Callback to invoke when the target list is filtered"
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the list is focused"
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the list is blurred"
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "PickListMoveToSourceEvent",
                        "description": "Custom move to source event.",
                        "props": [
                            {
                                "name": "items",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Moved items."
                            }
                        ]
                    },
                    {
                        "name": "PickListMoveAllToSourceEvent",
                        "description": "Custom move all to source event.",
                        "props": [
                            {
                                "name": "items",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Moved items."
                            }
                        ]
                    },
                    {
                        "name": "PickListMoveAllToTargetEvent",
                        "description": "Custom move all to target event.",
                        "props": [
                            {
                                "name": "items",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Moved items."
                            }
                        ]
                    },
                    {
                        "name": "PickListMoveToTargetEvent",
                        "description": "Custom move to target event.",
                        "props": [
                            {
                                "name": "items",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Moved items."
                            }
                        ]
                    },
                    {
                        "name": "PickListSourceReorderEvent",
                        "description": "Custom move source reorder event.",
                        "props": [
                            {
                                "name": "items",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Moved items."
                            }
                        ]
                    },
                    {
                        "name": "PickListTargetReorderEvent",
                        "description": "Custom move target reorder event.",
                        "props": [
                            {
                                "name": "items",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Moved items."
                            }
                        ]
                    },
                    {
                        "name": "PickListSourceSelectEvent",
                        "description": "Custom source select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "items",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Selected items."
                            }
                        ]
                    },
                    {
                        "name": "PickListTargetSelectEvent",
                        "description": "Custom target select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "items",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Selected items."
                            }
                        ]
                    },
                    {
                        "name": "PickListSourceFilterEvent",
                        "description": "Custom source filter event.",
                        "props": [
                            {
                                "name": "query",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Filter value."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Filtered items."
                            }
                        ]
                    },
                    {
                        "name": "PickListTargetFilterEvent",
                        "description": "Custom target filter event.",
                        "props": [
                            {
                                "name": "query",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Filter value."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Filtered items."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "picklist",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  \t index: number, // Item index.\n  }"
                            }
                        ],
                        "description": "Custom item template."
                    },
                    {
                        "parent": "picklist",
                        "name": "sourceHeader",
                        "parameters": [],
                        "description": "Custom source header template."
                    },
                    {
                        "parent": "picklist",
                        "name": "targetHeader",
                        "parameters": [],
                        "description": "Custom target header template."
                    },
                    {
                        "parent": "picklist",
                        "name": "sourceFilter",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: PickListFilterOptions, // Source filter options.\n  }"
                            }
                        ],
                        "description": "Custom source filter template."
                    },
                    {
                        "parent": "picklist",
                        "name": "targetFilter",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: PickListFilterOptions, // Target filter options.\n  }"
                            }
                        ],
                        "description": "Custom target filter template."
                    },
                    {
                        "parent": "picklist",
                        "name": "emptymessagesource",
                        "parameters": [],
                        "description": "Custom source list empty message template."
                    },
                    {
                        "parent": "picklist",
                        "name": "emptyfiltermessagesource",
                        "parameters": [],
                        "description": "Custom source list empty filter message template."
                    },
                    {
                        "parent": "picklist",
                        "name": "emptymessagetarget",
                        "parameters": [],
                        "description": "Custom target list empty message template."
                    },
                    {
                        "parent": "picklist",
                        "name": "emptyfiltermessagetarget",
                        "parameters": [],
                        "description": "Custom target list empty filter message template."
                    },
                    {
                        "parent": "picklist",
                        "name": "moveupicon",
                        "parameters": [],
                        "description": "Custom move up icon template."
                    },
                    {
                        "parent": "picklist",
                        "name": "movetopicon",
                        "parameters": [],
                        "description": "Custom move top icon template."
                    },
                    {
                        "parent": "picklist",
                        "name": "movedownicon",
                        "parameters": [],
                        "description": "Custom move down icon template."
                    },
                    {
                        "parent": "picklist",
                        "name": "movebottomicon",
                        "parameters": [],
                        "description": "Custom move bottom icon template."
                    },
                    {
                        "parent": "picklist",
                        "name": "movetotargeticon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Boolean value indicates if the view is changed according to breakpoints.\n  }"
                            }
                        ],
                        "description": "Custom move to target icon template."
                    },
                    {
                        "parent": "picklist",
                        "name": "movealltotargeticon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Boolean value indicates if the view is changed according to breakpoints.\n  }"
                            }
                        ],
                        "description": "Custom move all to target icon template."
                    },
                    {
                        "parent": "picklist",
                        "name": "movetosourceicon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Boolean value indicates if the view is changed according to breakpoints.\n  }"
                            }
                        ],
                        "description": "Custom move to source icon template."
                    },
                    {
                        "parent": "picklist",
                        "name": "movealltosourceicon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Boolean value indicates if the view is changed according to breakpoints.\n  }"
                            }
                        ],
                        "description": "Custom move all to source icon template."
                    },
                    {
                        "parent": "picklist",
                        "name": "targetfiltericon",
                        "parameters": [],
                        "description": "Custom target filter icon template."
                    },
                    {
                        "parent": "picklist",
                        "name": "sourcefiltericon",
                        "parameters": [],
                        "description": "Custom source filter icon template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "PickListFilterOptions",
                        "description": "Callbacks to invoke on filter.",
                        "props": [
                            {
                                "name": "filter",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "reset",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            }
                        ]
                    }
                ]
            }
        }
    },
    "progressbar": {
        "components": {
            "ProgressBar": {
                "description": "ProgressBar is a process status indicator.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Current value of the progress."
                        },
                        {
                            "name": "showValue",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the progress bar value."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "unit",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "%",
                            "description": "Unit sign appended to the value."
                        },
                        {
                            "name": "mode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "determinate",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "color",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Color for the background of the progress."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "progressbar",
                        "name": "content",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Value of the progressbar.\n  }"
                            }
                        ],
                        "description": "Custom template of content."
                    }
                ]
            }
        }
    },
    "progressspinner": {
        "components": {
            "ProgressSpinner": {
                "description": "ProgressSpinner is a process status indicator.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "strokeWidth",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "2",
                            "description": "Width of the circle stroke."
                        },
                        {
                            "name": "fill",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "none",
                            "description": "Color for the background of the circle."
                        },
                        {
                            "name": "animationDuration",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "2s",
                            "description": "Duration of the rotate animation."
                        }
                    ]
                }
            }
        }
    },
    "radiobutton": {
        "components": {
            "RadioButton": {
                "description": "RadioButton is an extension to standard radio button element with theming.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Value of the radiobutton."
                        },
                        {
                            "name": "formControlName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The name of the form control."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the radiobutton group."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the radiobutton."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that labels the input element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "labelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the label."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "RadioButtonClickEvent"
                                }
                            ],
                            "description": "Callback to invoke on radio button click."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the loses focus."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "focus",
                            "parameters": [],
                            "description": "Applies focus to input field."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "RadioButtonClickEvent",
                        "description": "Custom click event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Browser event."
                            }
                        ]
                    }
                ]
            }
        }
    },
    "rating": {
        "components": {
            "Rating": {
                "description": "Rating is an extension to standard radio button element with theming.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, changing the value is not possible."
                        },
                        {
                            "name": "stars",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of stars."
                        },
                        {
                            "name": "cancel",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When specified a cancel icon is displayed to allow removing the value."
                        },
                        {
                            "name": "iconOnClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the on icon."
                        },
                        {
                            "name": "iconOnStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the on icon."
                        },
                        {
                            "name": "iconOffClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the off icon."
                        },
                        {
                            "name": "iconOffStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the off icon."
                        },
                        {
                            "name": "iconCancelClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the cancel icon."
                        },
                        {
                            "name": "iconCancelStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the cancel icon."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onRate",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "RatingRateEvent"
                                }
                            ],
                            "description": "Emitted on value change."
                        },
                        {
                            "name": "onCancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Emitted when the rating is cancelled."
                        },
                        {
                            "name": "onFocus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Emitted when the rating receives focus."
                        },
                        {
                            "name": "onBlur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent"
                                }
                            ],
                            "description": "Emitted when the rating loses focus."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "RatingRateEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event"
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Selected option value"
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "rating",
                        "name": "onicon",
                        "parameters": [],
                        "description": "Custom on icon template."
                    },
                    {
                        "parent": "rating",
                        "name": "officon",
                        "parameters": [],
                        "description": "Custom off icon template."
                    },
                    {
                        "parent": "rating",
                        "name": "cancelicon",
                        "parameters": [],
                        "description": "Custom cancel icon template."
                    }
                ]
            }
        }
    },
    "ripple": {
        "components": {
            "Ripple": {
                "description": "Ripple directive adds ripple effect to the host element."
            }
        }
    },
    "scroller": {
        "components": {
            "Scroller": {
                "description": "Scroller is a performance-approach to handle huge data efficiently.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "itemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number | number[]",
                            "description": "The height/width of item according to orientation."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Height of the scroll viewport."
                        },
                        {
                            "name": "scrollWidth",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Width of the scroll viewport."
                        },
                        {
                            "name": "orientation",
                            "optional": false,
                            "readonly": false,
                            "type": "\"both\" | \"vertical\" | \"horizontal\"",
                            "description": "The orientation of scrollbar."
                        },
                        {
                            "name": "step",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Used to specify how many items to load in each load method in lazy mode."
                        },
                        {
                            "name": "delay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay in scroll before new data is loaded."
                        },
                        {
                            "name": "resizeDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay after window's resize finishes."
                        },
                        {
                            "name": "appendOnly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash."
                        },
                        {
                            "name": "inline",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies whether the scroller should be displayed inline or not."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "If disabled, the scroller feature is eliminated and the content is displayed directly."
                        },
                        {
                            "name": "loaderDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Used to implement a custom loader instead of using the loader feature in the scroller."
                        },
                        {
                            "name": "columns",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Columns to display."
                        },
                        {
                            "name": "showSpacer",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Used to implement a custom spacer instead of using the spacer feature in the scroller."
                        },
                        {
                            "name": "showLoader",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines whether to show loader."
                        },
                        {
                            "name": "numToleratedItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Determines how many additional elements to add to the DOM outside of the view. According to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number. Default value is half the number of items shown in the view."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines whether the data is loaded."
                        },
                        {
                            "name": "autoSize",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines whether to dynamically change the height or width of scrollable container."
                        },
                        {
                            "name": "trackBy",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "description": "Function to optimize the dom operations by delegating to ngForTrackBy, default algoritm checks for object identity."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollerOptions",
                            "description": "Defines whether to use the scroller feature. The properties of scroller component can be used like an object in it."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ScrollerLazyLoadEvent"
                                }
                            ],
                            "description": "Callback to invoke in lazy mode to load new data."
                        },
                        {
                            "name": "onScroll",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ScrollerScrollEvent"
                                }
                            ],
                            "description": "Callback to invoke when scroll position changes."
                        },
                        {
                            "name": "onScrollIndexChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ScrollerScrollIndexChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke when scroll position and item's range in view changes."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "ScrollerLazyLoadEvent",
                        "description": "Custom lazy load event.",
                        "props": [
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "First element index in viewport."
                            },
                            {
                                "name": "last",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Last element index in viewport."
                            }
                        ]
                    },
                    {
                        "name": "ScrollerScrollIndexChangeEvent",
                        "description": "Custom scroll index change event.",
                        "props": [
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "First element index in viewport."
                            },
                            {
                                "name": "last",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Last element index in viewport."
                            }
                        ]
                    },
                    {
                        "name": "ScrollerScrollEvent",
                        "description": "Custom scroll event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "scroller",
                        "name": "content",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Loaded items.\n  \t options: ScrollerContentOptions, // undefined\n  }",
                                "description": "Content data."
                            }
                        ],
                        "description": "Custom content template."
                    },
                    {
                        "parent": "scroller",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  \t options: ScrollerItemOptions, // Scroller item options.\n  }",
                                "description": "Item data."
                            }
                        ],
                        "description": "Custom item template."
                    },
                    {
                        "parent": "scroller",
                        "name": "loader",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: ScrollerLoaderOptions, // Options.\n  }",
                                "description": "Options instance."
                            }
                        ],
                        "description": "Custom loader template."
                    },
                    {
                        "parent": "scroller",
                        "name": "loadericon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: ScrollerLoaderIconOptions, // Options.\n  }",
                                "description": "Icon options."
                            }
                        ],
                        "description": "Custom loader icon template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "ScrollerContentOptions",
                        "description": "Scroller content options.",
                        "props": [
                            {
                                "name": "contentStyleClass",
                                "optional": true,
                                "readonly": false,
                                "type": "string"
                            },
                            {
                                "name": "items",
                                "optional": true,
                                "readonly": false,
                                "type": "any[]"
                            },
                            {
                                "name": "loading",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean"
                            },
                            {
                                "name": "itemSize",
                                "optional": true,
                                "readonly": false,
                                "type": "number"
                            },
                            {
                                "name": "rows",
                                "optional": true,
                                "readonly": false,
                                "type": "any[]"
                            },
                            {
                                "name": "columns",
                                "optional": true,
                                "readonly": false,
                                "type": "any[]"
                            },
                            {
                                "name": "spacerStyle",
                                "optional": true,
                                "readonly": false,
                                "type": "Object"
                            },
                            {
                                "name": "contentStyle",
                                "optional": true,
                                "readonly": false,
                                "type": "Object"
                            },
                            {
                                "name": "vertical",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean"
                            },
                            {
                                "name": "horizontal",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean"
                            },
                            {
                                "name": "both",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean"
                            },
                            {
                                "name": "getItemOptions",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "getLoaderOptions",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            }
                        ]
                    },
                    {
                        "name": "ScrollerItemOptions",
                        "description": "Scroller item options.",
                        "props": [
                            {
                                "name": "index",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the item."
                            },
                            {
                                "name": "count",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Item count."
                            },
                            {
                                "name": "first",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Index of the first element in viewport."
                            },
                            {
                                "name": "last",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Index of the last element in viewport."
                            },
                            {
                                "name": "even",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Defines if index is even number."
                            },
                            {
                                "name": "odd",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Defines if index is odd number."
                            }
                        ]
                    },
                    {
                        "name": "ScrollerLoaderOptions",
                        "description": "Loader settings.",
                        "props": [
                            {
                                "name": "index",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the item."
                            },
                            {
                                "name": "count",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Item count."
                            },
                            {
                                "name": "first",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Index of the first element in viewport."
                            },
                            {
                                "name": "last",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Index of the last element in viewport."
                            },
                            {
                                "name": "even",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Defines if index is even number."
                            },
                            {
                                "name": "odd",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Defines if index is odd number."
                            }
                        ]
                    }
                ]
            },
            "types": {
                "description": "Defines the custom types used by the module.",
                "values": [
                    {
                        "name": "ScrollerToType",
                        "value": "\"to-start\" | \"to-end\" | undefined",
                        "description": "Options of the scroll direction."
                    },
                    {
                        "name": "ScrollerOrientationType",
                        "value": "\"vertical\" | \"horizontal\" | \"both\"",
                        "description": "Options of the scroller orientation."
                    },
                    {
                        "name": "ScrollerLoaderIconOptions",
                        "value": "{\"[klass:string]\":\"any\"}",
                        "description": "Loader icon options."
                    }
                ]
            }
        }
    },
    "scrollpanel": {
        "components": {
            "ScrollPanel": {
                "description": "ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "step",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Step factor to scroll the content while pressing the arrow keys."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "scrollTop",
                            "parameters": [
                                {
                                    "name": "scrollTop",
                                    "type": "number",
                                    "description": ""
                                }
                            ],
                            "description": "Scrolls the top location to the given value."
                        },
                        {
                            "name": "refresh",
                            "parameters": [],
                            "description": "Refreshes the position and size of the scrollbar."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "scrollpanel",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom content template."
                    }
                ]
            }
        }
    },
    "scrolltop": {
        "components": {
            "ScrollTop": {
                "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "target",
                            "optional": false,
                            "readonly": false,
                            "type": "\"window\" | \"parent\"",
                            "default": "window",
                            "description": "Target of the ScrollTop."
                        },
                        {
                            "name": "threshold",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "400",
                            "description": "Defines the threshold value of the vertical scroll position of the target to toggle the visibility."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the icon or JSX.Element for icon."
                        },
                        {
                            "name": "behavior",
                            "optional": false,
                            "readonly": false,
                            "type": "\"auto\" | \"smooth\"",
                            "default": "smooth",
                            "description": "Defines the scrolling behavior, \"smooth\" adds an animation and \"auto\" scrolls with a jump."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".15s",
                            "description": "A string value used to determine the display transition options."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".15s",
                            "description": "A string value used to determine the hiding transition options."
                        },
                        {
                            "name": "buttonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes a string value that labels the scroll-top button."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "scrolltop",
                        "name": "icon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t styleClass: undefined, // Style class of the icon.\n  }"
                            }
                        ],
                        "description": "Icon of the component."
                    }
                ]
            }
        }
    },
    "selectbutton": {
        "components": {
            "SelectButton": {
                "description": "SelectButton is used to choose single or multiple items from a list using buttons.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the label field of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the value field of an option."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the disabled field of an option."
                        },
                        {
                            "name": "unselectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether selection can be cleared."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "multiple",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "allowEmpty",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether selection can not be cleared."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "A property to uniquely identify a value in options."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onOptionClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SelectButtonOptionClickEvent"
                                }
                            ],
                            "description": "Callback to invoke on input click."
                        },
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SelectButtonChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke on selection change."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "SelectButtonOptionClickEvent",
                        "description": "Custom click event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "option",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Selected option."
                            },
                            {
                                "name": "index",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the selected option."
                            }
                        ]
                    },
                    {
                        "name": "SelectButtonChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Selected option."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "selectbutton",
                        "name": "item",
                        "parameters": [],
                        "description": "Custom item template."
                    }
                ]
            }
        }
    },
    "sidebar": {
        "components": {
            "Sidebar": {
                "description": "Sidebar is a panel component displayed as an overlay at the edges of the screen.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the dialog, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "blockScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to block scrolling of the document when sidebar is active."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "ariaCloseLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Aria label of the close icon."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "modal",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether an overlay mask is displayed behind the sidebar."
                        },
                        {
                            "name": "dismissible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to dismiss sidebar on click of the mask."
                        },
                        {
                            "name": "showCloseIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the close icon."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the sidebar."
                        },
                        {
                            "name": "transitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "150ms cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the animation."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies the visibility of the dialog."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies the position of the sidebar, valid values are \"left\", \"right\", \"bottom\" and \"top\"."
                        },
                        {
                            "name": "fullScreen",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Adds a close icon to the header to hide the dialog."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when dialog is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when dialog is hidden."
                        },
                        {
                            "name": "visibleChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Callback to invoke when dialog visibility is changed."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "sidebar",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom template of header."
                    },
                    {
                        "parent": "sidebar",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "sidebar",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom template of footer."
                    },
                    {
                        "parent": "sidebar",
                        "name": "closeicon",
                        "parameters": [],
                        "description": "Custom template of closeicon."
                    },
                    {
                        "parent": "sidebar",
                        "name": "headless",
                        "parameters": [],
                        "description": "Headless template."
                    }
                ]
            }
        }
    },
    "skeleton": {
        "components": {
            "Skeleton": {
                "description": "Skeleton is a placeholder to display instead of the actual content.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "shape",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "rectangle",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "borderRadius",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Border radius of the element, defaults to value from theme."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Size of the Circle or Square."
                        },
                        {
                            "name": "width",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "100%",
                            "description": "Width of the element."
                        },
                        {
                            "name": "height",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "1rem",
                            "description": "Height of the element."
                        }
                    ]
                }
            }
        }
    },
    "slidemenu": {
        "components": {
            "SlideMenu": {
                "description": "SlideMenu displays submenus with slide animation.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]"
                        },
                        {
                            "name": "menuWidth",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "190",
                            "description": "Width of the submenus."
                        },
                        {
                            "name": "viewportHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "180",
                            "description": "Height of the scrollable area, a scrollbar appears if a menu height is longer than this value."
                        },
                        {
                            "name": "effectDuration",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "250",
                            "description": "Duration of the sliding animation in milliseconds."
                        },
                        {
                            "name": "easing",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "ease-out",
                            "description": "Easing animation to use for sliding."
                        },
                        {
                            "name": "backLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "Back",
                            "description": "Label of element to navigate back."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "popup",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoDisplay",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show a root submenu on mouse over."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when overlay menu is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when overlay menu is hidden."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "any"
                                },
                                {
                                    "name": "isFocus",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Hides the popup menu."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "any",
                                    "description": "Browser event."
                                }
                            ],
                            "description": "Toggles the visibility of the popup menu."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "any"
                                },
                                {
                                    "name": "isFocus",
                                    "type": "any"
                                }
                            ],
                            "description": "Displays the popup menu."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "slidemenu",
                        "name": "backicon",
                        "parameters": [],
                        "description": "Custom template of backicon."
                    },
                    {
                        "parent": "slidemenu",
                        "name": "submenuicon",
                        "parameters": [],
                        "description": "Custom template of submenuicon."
                    }
                ]
            }
        }
    },
    "slider": {
        "components": {
            "Slider": {
                "description": "Slider is a component to provide input with a drag handle.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "animate",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays an animation on click of the slider bar."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "min",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "orientation",
                            "optional": false,
                            "readonly": false,
                            "type": "\"vertical\" | \"horizontal\"",
                            "default": "horizontal",
                            "description": "Orientation of the slider."
                        },
                        {
                            "name": "step",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "range",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows two boundary values to be picked."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SliderChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "onSlideEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SliderSlideEndEvent"
                                }
                            ],
                            "description": "Callback to invoke when slide ended."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "SliderChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "event",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "values",
                                "optional": true,
                                "readonly": false,
                                "type": "number[]",
                                "description": "New values."
                            },
                            {
                                "name": "value",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "New value."
                            }
                        ]
                    },
                    {
                        "name": "SliderSlideEndEvent",
                        "description": "Custom slide end event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Original event"
                            },
                            {
                                "name": "value",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "New value."
                            },
                            {
                                "name": "values",
                                "optional": true,
                                "readonly": false,
                                "type": "number[]",
                                "description": "New values."
                            }
                        ]
                    }
                ]
            }
        }
    },
    "speeddial": {
        "components": {
            "SpeedDial": {
                "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "List of items id."
                        },
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "null",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Specifies the visibility of the overlay."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "className",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "transitionDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "30",
                            "description": "Transition delay step for each action item."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                            "default": "linear",
                            "description": "Specifies the opening type of actions."
                        },
                        {
                            "name": "radius",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Radius for *circle types."
                        },
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show a mask element behind the speeddial."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component is disabled."
                        },
                        {
                            "name": "hideOnClickOutside",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the actions close when clicked outside."
                        },
                        {
                            "name": "buttonStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the button element."
                        },
                        {
                            "name": "buttonClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the button element."
                        },
                        {
                            "name": "maskStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the mask element."
                        },
                        {
                            "name": "maskClassName",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the mask element."
                        },
                        {
                            "name": "showIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Show icon of the button element."
                        },
                        {
                            "name": "hideIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Hide icon of the button element."
                        },
                        {
                            "name": "rotateAnimation",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defined to rotate showIcon when hideIcon is not present."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onVisibleChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Fired when the visibility of element changed."
                        },
                        {
                            "name": "visibleChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Fired when the visibility of element changed."
                        },
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent"
                                }
                            ],
                            "description": "Fired when the button element clicked."
                        },
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Fired when the actions are visible."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Fired when the actions are hidden."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "speeddial",
                        "name": "button",
                        "parameters": [],
                        "description": "Custom template of button."
                    }
                ]
            }
        }
    },
    "splitbutton": {
        "components": {
            "SplitButton": {
                "description": "SplitButton groups a set of commands in an overlay with a default command.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "description": "MenuModel instance to define the overlay items."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the icon."
                        },
                        {
                            "name": "iconPos",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonIconPosition",
                            "default": "left",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Text of the button."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "menuStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the overlay menu."
                        },
                        {
                            "name": "menuStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the overlay menu."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Indicates the direction of the element."
                        },
                        {
                            "name": "expandAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the expand button for accessibility."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent"
                                }
                            ],
                            "description": "Callback to invoke when default command button is clicked."
                        },
                        {
                            "name": "onDropdownClick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent"
                                }
                            ],
                            "description": "Callback to invoke when dropdown button is clicked."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "splitbutton",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom template of content."
                    },
                    {
                        "parent": "splitbutton",
                        "name": "dropdownicon",
                        "parameters": [],
                        "description": "Custom template of dropdownicon."
                    }
                ]
            }
        }
    },
    "splitter": {
        "components": {
            "Splitter": {
                "description": "Splitter is utilized to separate and resize panels.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "panelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the panel."
                        },
                        {
                            "name": "stateStorage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "session",
                            "description": "Defines where a stateful splitter keeps its state, valid values are 'session' for sessionStorage and 'local' for localStorage."
                        },
                        {
                            "name": "stateKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "null",
                            "description": "Storage identifier of a stateful Splitter."
                        },
                        {
                            "name": "layout",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "horizontal",
                            "description": "Orientation of the panels. Valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "gutterSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "4",
                            "description": "Size of the divider in pixels."
                        },
                        {
                            "name": "step",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Step factor to increment/decrement the size of the panels while pressing the arrow keys."
                        },
                        {
                            "name": "minSizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "[]",
                            "description": "Minimum size of the elements relative to 100%."
                        },
                        {
                            "name": "panelSizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "description": "Size of the elements relative to 100%."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onResizeEnd",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SplitterResizeEndEvent"
                                }
                            ],
                            "description": "Callback to invoke when resize ends."
                        },
                        {
                            "name": "onResizeStart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "SplitterResizeStartEvent"
                                }
                            ],
                            "description": "Callback to invoke when resize starts."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "SplitterResizeStartEvent",
                        "description": "Custom panel resize start event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "MouseEvent | TouchEvent",
                                "description": "Browser event."
                            },
                            {
                                "name": "sizes",
                                "optional": false,
                                "readonly": false,
                                "type": "number[]",
                                "description": "Collapsed state of the panel."
                            }
                        ]
                    },
                    {
                        "name": "SplitterResizeEndEvent",
                        "description": "Custom panel resize end event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "MouseEvent | TouchEvent",
                                "description": "Browser event."
                            },
                            {
                                "name": "sizes",
                                "optional": false,
                                "readonly": false,
                                "type": "number[]",
                                "description": "Collapsed state of the panel."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "splitter",
                        "name": "panel",
                        "parameters": [],
                        "description": "Custom panel template."
                    }
                ]
            }
        }
    },
    "steps": {
        "components": {
            "Steps": {
                "description": "Steps components is an indicator for the steps in a wizard workflow.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the active item."
                        },
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "description": "An array of menu items."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the items are clickable or not."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "exact",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "activeIndexChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ],
                            "description": "Callback to invoke when the new step is selected."
                        }
                    ]
                }
            }
        }
    },
    "styleclass": {
        "components": {
            "StyleClass": {
                "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "selector",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Selector to define the target element. Available selectors are '@next', '@prev', '@parent' and '@grandparent'."
                        },
                        {
                            "name": "enterClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "enterFromClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "enterActiveClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class to add during enter animation."
                        },
                        {
                            "name": "enterToClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "leaveClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        },
                        {
                            "name": "leaveFromClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class to add when item begins to get hidden."
                        },
                        {
                            "name": "leaveActiveClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class to add during leave animation."
                        },
                        {
                            "name": "leaveToClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class to add when leave animation is completed."
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked."
                        },
                        {
                            "name": "toggleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Adds or removes a class when no enter-leave animation is required."
                        },
                        {
                            "name": "hideOnEscape",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when escape key pressed."
                        }
                    ]
                }
            }
        }
    },
    "columnfilter": {
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "columnfilter",
                        "name": "filterTemplate",
                        "parameters": [],
                        "description": "Custom filter template."
                    },
                    {
                        "parent": "columnfilter",
                        "name": "headerTemplate",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "columnfilter",
                        "name": "footerTemplate",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "columnfilter",
                        "name": "filterIconTemplate",
                        "parameters": [],
                        "description": "Custom filter icon template."
                    },
                    {
                        "parent": "columnfilter",
                        "name": "removeRuleIconTemplate",
                        "parameters": [],
                        "description": "Custom remove rule icon template."
                    },
                    {
                        "parent": "columnfilter",
                        "name": "addRuleIconTemplate",
                        "parameters": [],
                        "description": "Custom add rule icon template."
                    },
                    {
                        "parent": "columnfilter",
                        "name": "clearFilterIconTemplate",
                        "parameters": [],
                        "description": "Custom clear filter icon template."
                    }
                ]
            }
        }
    },
    "table": {
        "components": {
            "Table": {
                "description": "Table displays data in tabular format.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "frozenColumns",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to represent dynamic columns that are frozen."
                        },
                        {
                            "name": "frozenValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display as frozen."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "tableStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the table."
                        },
                        {
                            "name": "tableStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the table."
                        },
                        {
                            "name": "paginator",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "pageLinks",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display in paginator."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Array of integer/object values to display inside rows per page dropdown of paginator"
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are \"top\", \"bottom\" or \"both\"."
                        },
                        {
                            "name": "paginatorStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Custom style class for paginator"
                        },
                        {
                            "name": "paginatorDropdownAppendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the paginator dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "paginatorDropdownScrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Paginator dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "{currentPage} of {totalPages}",
                            "description": "Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}"
                        },
                        {
                            "name": "showCurrentPageReport",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display current page report."
                        },
                        {
                            "name": "showJumpToPageDropdown",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a dropdown to navigate to any page."
                        },
                        {
                            "name": "showJumpToPageInput",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a input to navigate to any page."
                        },
                        {
                            "name": "showFirstLastIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, icons are displayed on paginator to go first and last page."
                        },
                        {
                            "name": "showPageLinks",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show page links."
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Sort order to use when an unsorted column gets sorted by user interaction."
                        },
                        {
                            "name": "sortMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "resetPageOnSort",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When true, resets paginator to first page after sorting. Available only when sortMode is set to single."
                        },
                        {
                            "name": "selectionMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "description": "Specifies the selection mode, valid values are \"single\" and \"multiple\"."
                        },
                        {
                            "name": "selectionPageOnly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled with paginator and checkbox selection mode, the select all checkbox in the header will select all rows on the current page."
                        },
                        {
                            "name": "contextMenuSelection",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected row with a context menu."
                        },
                        {
                            "name": "contextMenuSelectionMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "separate",
                            "description": "Defines the behavior of context menu selection, in \"separate\" mode context menu updates contextMenuSelection property whereas in joint mode selection property is used instead so that when row selection is enabled, both row selection and context menu selection use the same property."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "A property to uniquely identify a record in data."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines whether metaKey should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "rowSelectable",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Defines if the row is selectable."
                        },
                        {
                            "name": "rowTrackBy",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": "...",
                            "description": "Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "lazyLoadOnInit",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to call lazy loading on initialization."
                        },
                        {
                            "name": "compareSelectionBy",
                            "optional": false,
                            "readonly": false,
                            "type": "\"equals\" | \"deepEquals\"",
                            "default": "deepEquals",
                            "description": "Algorithm to define if a row is selected, valid values are \"equals\" that compares by reference and \"deepEquals\" that compares all fields."
                        },
                        {
                            "name": "csvSeparator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ",",
                            "description": "Character to use as the csv separator."
                        },
                        {
                            "name": "exportFilename",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "download",
                            "description": "Name of the exported file."
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "default": "{}",
                            "description": "An array of FilterMetadata objects to provide external filters."
                        },
                        {
                            "name": "globalFilterFields",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "description": "An array of fields as string to use in global filtering."
                        },
                        {
                            "name": "filterDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Delay in milliseconds before filtering the data."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "expandedRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "default": "{}",
                            "description": "Map instance to keep the expanded rows where key of the map is the data key of the row."
                        },
                        {
                            "name": "editingRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "default": "{}",
                            "description": "Map instance to keep the rows being edited where key of the map is the data key of the row."
                        },
                        {
                            "name": "rowExpandMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "multiple",
                            "description": "Whether multiple rows can be expanded at any time. Valid values are \"multiple\" and \"single\"."
                        },
                        {
                            "name": "scrollable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Enables scrollable tables."
                        },
                        {
                            "name": "scrollDirection",
                            "optional": false,
                            "readonly": false,
                            "type": "\"both\" | \"vertical\" | \"horizontal\"",
                            "default": "vertical",
                            "description": "Orientation of the scrolling, options are \"vertical\", \"horizontal\" and \"both\".",
                            "deprecated": "Property is obselete since v14.2.0."
                        },
                        {
                            "name": "rowGroupMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"subheader\" | \"rowspan\"",
                            "description": "Type of the row grouping, valid values are \"subheader\" and \"rowspan\"."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Height of the scroll viewport in fixed pixels or the \"flex\" keyword for a dynamic size."
                        },
                        {
                            "name": "virtualScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the data should be loaded on demand during scroll."
                        },
                        {
                            "name": "virtualScrollItemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Height of a row to use in calculations of virtual scrolling."
                        },
                        {
                            "name": "virtualScrollOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollerOptions",
                            "description": "Whether to use the scroller feature. The properties of scroller component can be used like an object in it."
                        },
                        {
                            "name": "virtualScrollDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "250",
                            "description": "Threshold in milliseconds to delay lazy loading during scrolling."
                        },
                        {
                            "name": "frozenWidth",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Width of the frozen columns container."
                        },
                        {
                            "name": "responsive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if the table is responsive.",
                            "deprecated": "table is always responsive with scrollable behavior."
                        },
                        {
                            "name": "contextMenu",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Local ng-template varilable of a ContextMenu."
                        },
                        {
                            "name": "resizableColumns",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "fit",
                            "description": "Defines whether the overall table width should change on column resize, valid values are \"fit\" and \"expand\"."
                        },
                        {
                            "name": "reorderableColumns",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be reordered using drag and drop."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "showLoader",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the loading mask when loading property is true."
                        },
                        {
                            "name": "rowHover",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Adds hover effect to rows without the need for selectionMode. Note that tr elements that can be hovered need to have \"p-selectable-row\" class for rowHover to work."
                        },
                        {
                            "name": "customSort",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to use the default sorting or a custom one using sortFunction."
                        },
                        {
                            "name": "showInitialSortBadge",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to use the initial sort badge or not."
                        },
                        {
                            "name": "autoLayout",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the cell widths scale according to their content or not.  Deprecated:  Table layout is always \"auto\"."
                        },
                        {
                            "name": "exportFunction",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "description": "Export function."
                        },
                        {
                            "name": "exportHeader",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Custom export header of the column to be exported as CSV."
                        },
                        {
                            "name": "stateKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Unique identifier of a stateful table to use in state storage."
                        },
                        {
                            "name": "stateStorage",
                            "optional": false,
                            "readonly": false,
                            "type": "\"session\" | \"local\"",
                            "default": "session",
                            "description": "Defines where a stateful table keeps its state, valid values are \"session\" for sessionStorage and \"local\" for localStorage."
                        },
                        {
                            "name": "editMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"cell\" | \"row\"",
                            "default": "cell",
                            "description": "Defines the editing mode, valid values are \"cell\" and \"row\"."
                        },
                        {
                            "name": "groupRowsBy",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Field name to use in row grouping."
                        },
                        {
                            "name": "groupRowsByOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Order to sort when default row grouping is enabled."
                        },
                        {
                            "name": "responsiveLayout",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "scroll",
                            "description": "Defines the responsive mode, valid options are \"stack\" and \"scroll\"."
                        },
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "640px",
                            "description": "The breakpoint to define the maximum width boundary when using stack responsive layout."
                        },
                        {
                            "name": "paginatorLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to be used in paginator formatting."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "columns",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to represent dynamic columns."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "totalRecords",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the field to sort data by default."
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Order to sort when default sorting is enabled."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "SortMeta[]",
                            "description": "An array of SortMeta objects to sort the data by default in multiple sort mode."
                        },
                        {
                            "name": "selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected row in single mode or an array of values in multiple mode."
                        },
                        {
                            "name": "selectAll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "virtualRowHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Indicates the height of rows to be scrolled.",
                            "deprecated": "use virtualScrollItemSize property instead."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "contextMenuSelectionChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke on context menu selection change."
                        },
                        {
                            "name": "selectAllChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableSelectAllChangeEvent"
                                }
                            ],
                            "description": "Emits when the all of the items selected or unselected."
                        },
                        {
                            "name": "selectionChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke on selection changed."
                        },
                        {
                            "name": "onRowSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableRowSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a row is selected."
                        },
                        {
                            "name": "onRowUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableRowUnSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a row is unselected."
                        },
                        {
                            "name": "onPage",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TablePageEvent"
                                }
                            ],
                            "description": "Callback to invoke when pagination occurs."
                        },
                        {
                            "name": "onSort",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when a column gets sorted."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableFilterEvent"
                                }
                            ],
                            "description": "Callback to invoke when data is filtered."
                        },
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableLazyLoadEvent"
                                }
                            ],
                            "description": "Callback to invoke when paging, sorting or filtering happens in lazy mode."
                        },
                        {
                            "name": "onRowExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableRowExpandEvent"
                                }
                            ],
                            "description": "Callback to invoke when a row is expanded."
                        },
                        {
                            "name": "onRowCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableRowCollapseEvent"
                                }
                            ],
                            "description": "Callback to invoke when a row is collapsed."
                        },
                        {
                            "name": "onContextMenuSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableContextMenuSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a row is selected with right click."
                        },
                        {
                            "name": "onColResize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableColResizeEvent"
                                }
                            ],
                            "description": "Callback to invoke when a column is resized."
                        },
                        {
                            "name": "onColReorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableColumnReorderEvent"
                                }
                            ],
                            "description": "Callback to invoke when a column is reordered."
                        },
                        {
                            "name": "onRowReorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableRowReorderEvent"
                                }
                            ],
                            "description": "Callback to invoke when a row is reordered."
                        },
                        {
                            "name": "onEditInit",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableEditInitEvent"
                                }
                            ],
                            "description": "Callback to invoke when a cell switches to edit mode."
                        },
                        {
                            "name": "onEditComplete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableEditCompleteEvent"
                                }
                            ],
                            "description": "Callback to invoke when cell edit is completed."
                        },
                        {
                            "name": "onEditCancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableEditCancelEvent"
                                }
                            ],
                            "description": "Callback to invoke when cell edit is cancelled with escape key."
                        },
                        {
                            "name": "onHeaderCheckboxToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TableHeaderCheckboxToggleEvent"
                                }
                            ],
                            "description": "Callback to invoke when state of header checkbox changes."
                        },
                        {
                            "name": "sortFunction",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "A function to implement custom sorting, refer to sorting section for details."
                        },
                        {
                            "name": "firstChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ],
                            "description": "Callback to invoke on pagination."
                        },
                        {
                            "name": "rowsChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ],
                            "description": "Callback to invoke on rows change."
                        },
                        {
                            "name": "onStateSave",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "TableState"
                                }
                            ],
                            "description": "Callback to invoke table state is saved."
                        },
                        {
                            "name": "onStateRestore",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "TableState"
                                }
                            ],
                            "description": "Callback to invoke table state is restored."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "exportCSV",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "ExportCSVOptions"
                                }
                            ],
                            "description": "Data export method."
                        },
                        {
                            "name": "resetScrollTop",
                            "parameters": [],
                            "description": "Resets scroll to top."
                        },
                        {
                            "name": "scrollToVirtualIndex",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": "number",
                                    "description": "index of the element."
                                }
                            ],
                            "description": "Scrolls to given index when using virtual scroll."
                        },
                        {
                            "name": "scrollTo",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "any",
                                    "description": "scroll options."
                                }
                            ],
                            "description": "Scrolls to given index."
                        }
                    ]
                }
            },
            "ColumnFilter": {
                "description": "Column Filter element of Table.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Property represented by the column."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "text",
                            "description": "Type of the input."
                        },
                        {
                            "name": "display",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "row",
                            "description": "Filter display."
                        },
                        {
                            "name": "showMenu",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Decides whether to display filter menu popup."
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Filter match mode."
                        },
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "FilterOperator.AND",
                            "description": "Filter operator."
                        },
                        {
                            "name": "showOperator",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Decides whether to display filter operator."
                        },
                        {
                            "name": "showClearButton",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Decides whether to display clear filter button."
                        },
                        {
                            "name": "showApplyButton",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Decides whether to display apply filter button."
                        },
                        {
                            "name": "showMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Decides whether to display filter match modes."
                        },
                        {
                            "name": "showAddButton",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Decides whether to display add filter button."
                        },
                        {
                            "name": "hideOnClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Decides whether to close popup on clear button click."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Filter placeholder."
                        },
                        {
                            "name": "matchModeOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectItem<any>[]",
                            "description": "Filter match mode options."
                        },
                        {
                            "name": "maxConstraints",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "2",
                            "description": "Defines maximum amount of constraints."
                        },
                        {
                            "name": "minFractionDigits",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Defines minimum fraction of digits."
                        },
                        {
                            "name": "maxFractionDigits",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Defines maximum fraction of digits."
                        },
                        {
                            "name": "prefix",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines prefix of the filter."
                        },
                        {
                            "name": "suffix",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines suffix of the filter."
                        },
                        {
                            "name": "locale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines filter locale."
                        },
                        {
                            "name": "localeMatcher",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines filter locale matcher."
                        },
                        {
                            "name": "currency",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Enables currency input."
                        },
                        {
                            "name": "currencyDisplay",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines the display of the currency input."
                        },
                        {
                            "name": "useGrouping",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines if filter grouping will be enabled."
                        },
                        {
                            "name": "showButtons",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines the visibility of buttons."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "TableRowSelectEvent",
                        "description": "Custom select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "data",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Row data."
                            },
                            {
                                "name": "type",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Selection type."
                            },
                            {
                                "name": "index",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the selected row."
                            }
                        ]
                    },
                    {
                        "name": "TableRowUnSelectEvent",
                        "description": "Custom unselect event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "data",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Row data."
                            },
                            {
                                "name": "type",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Selection type."
                            },
                            {
                                "name": "index",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the selected row."
                            }
                        ]
                    },
                    {
                        "name": "TableFilterEvent",
                        "description": "Custom filter event.",
                        "props": [
                            {
                                "name": "filters",
                                "optional": true,
                                "readonly": false,
                                "type": "Object",
                                "description": "Filter meta."
                            },
                            {
                                "name": "filteredValue",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Value after filter."
                            }
                        ]
                    },
                    {
                        "name": "TableLazyLoadEvent",
                        "description": "Custom lazy load event.",
                        "props": [
                            {
                                "name": "rows",
                                "optional": true,
                                "readonly": false,
                                "type": "number"
                            },
                            {
                                "name": "sortField",
                                "optional": true,
                                "readonly": false,
                                "type": "string | string[]"
                            },
                            {
                                "name": "sortOrder",
                                "optional": true,
                                "readonly": false,
                                "type": "number"
                            },
                            {
                                "name": "filters",
                                "optional": true,
                                "readonly": false,
                                "type": "Object"
                            },
                            {
                                "name": "globalFilter",
                                "optional": true,
                                "readonly": false,
                                "type": "string | string[]"
                            },
                            {
                                "name": "multiSortMeta",
                                "optional": true,
                                "readonly": false,
                                "type": "SortMeta[]"
                            },
                            {
                                "name": "forceUpdate",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "first",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "First element in viewport."
                            },
                            {
                                "name": "last",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Last element in viewport."
                            }
                        ]
                    },
                    {
                        "name": "TableRowExpandEvent",
                        "description": "Custom row expand event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "data",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Row data."
                            }
                        ]
                    },
                    {
                        "name": "TableRowCollapseEvent",
                        "description": "Custom row collapse event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "data",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Row data."
                            }
                        ]
                    },
                    {
                        "name": "TableContextMenuSelectEvent",
                        "description": "Custom context menu select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "data",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Row data."
                            },
                            {
                                "name": "index",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Row index."
                            }
                        ]
                    },
                    {
                        "name": "TableContextMenuSelectionChangeEvent",
                        "description": "Custom context menu selection change event.",
                        "props": [
                            {
                                "name": "data",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Row data."
                            }
                        ]
                    },
                    {
                        "name": "TableColResizeEvent",
                        "description": "Custom column resize event.",
                        "props": [
                            {
                                "name": "element",
                                "optional": false,
                                "readonly": false,
                                "type": "HTMLElement",
                                "description": "Instance of resized column."
                            },
                            {
                                "name": "delta",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Position."
                            }
                        ]
                    },
                    {
                        "name": "TableColumnReorderEvent",
                        "description": "Custom column reorder event.",
                        "props": [
                            {
                                "name": "dragIndex",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the dragged item."
                            },
                            {
                                "name": "dropIndex",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the drop position."
                            },
                            {
                                "name": "columns",
                                "optional": true,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Columns after reorder."
                            }
                        ]
                    },
                    {
                        "name": "TableRowReorderEvent",
                        "description": "Custom row reorder event.",
                        "props": [
                            {
                                "name": "dragIndex",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the dragged item."
                            },
                            {
                                "name": "dropIndex",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the drop position."
                            }
                        ]
                    },
                    {
                        "name": "TableEditEvent",
                        "description": "Custom edit event.",
                        "props": [
                            {
                                "name": "field",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Field to be edited."
                            },
                            {
                                "name": "data",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "New value."
                            }
                        ]
                    },
                    {
                        "name": "TableEditInitEvent",
                        "description": "Custom edit init event.",
                        "props": [
                            {
                                "name": "field",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Field to be edited."
                            },
                            {
                                "name": "data",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "New value."
                            },
                            {
                                "name": "index",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Edited element index."
                            }
                        ]
                    },
                    {
                        "name": "TableEditCancelEvent",
                        "description": "Custom edit cancel event.",
                        "props": [
                            {
                                "name": "field",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Field to be edited."
                            },
                            {
                                "name": "data",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "New value."
                            },
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "index",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Edited element index."
                            }
                        ]
                    },
                    {
                        "name": "TableEditCompleteEvent",
                        "description": "Custom edit complete event.",
                        "props": [
                            {
                                "name": "field",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Field to be edited."
                            },
                            {
                                "name": "data",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "New value."
                            },
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "index",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Edited element index."
                            }
                        ]
                    },
                    {
                        "name": "TableHeaderCheckboxToggleEvent",
                        "description": "Custom checkbox toggle event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "checked",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Checked state."
                            }
                        ]
                    },
                    {
                        "name": "TableSelectAllChangeEvent",
                        "description": "Custom all selection change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "checked",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Checked state."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "table",
                        "name": "caption",
                        "parameters": [],
                        "description": "Custom caption template."
                    },
                    {
                        "parent": "table",
                        "name": "headergrouped",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Row data.\n  \t rowIndex: number, // Row index.\n  \t columns: any, // Columns.\n  \t editing: boolean, // Editing state.\n  \t frozen: boolean, // Frozen state.\n  }",
                                "description": "row data."
                            }
                        ],
                        "description": "Custom grouped header template."
                    },
                    {
                        "parent": "table",
                        "name": "header",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: string, // Field.\n  }",
                                "description": "header data."
                            }
                        ],
                        "description": "Custom grouped header template."
                    },
                    {
                        "parent": "table",
                        "name": "body",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns.\n  \t frozen: boolean, // Frozen state.\n  }",
                                "description": "body data."
                            }
                        ],
                        "description": "Custom body template."
                    },
                    {
                        "parent": "table",
                        "name": "loadingbody",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t rowspan: number, // Row span.\n  \t rowgroup: number, // Row group.\n  }",
                                "description": "loading body data."
                            }
                        ],
                        "description": "Custom loading body template."
                    },
                    {
                        "parent": "table",
                        "name": "footer",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: string, // Field.\n  }",
                                "description": "footer data."
                            }
                        ],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "table",
                        "name": "footergrouped",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns.\n  }",
                                "description": "footer data."
                            }
                        ],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "table",
                        "name": "colgroup",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns.\n  }",
                                "description": "columns data."
                            }
                        ],
                        "description": "Custom column group template."
                    },
                    {
                        "parent": "table",
                        "name": "summary",
                        "parameters": [],
                        "description": "Custom summary template."
                    },
                    {
                        "parent": "table",
                        "name": "rowexpansion",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t rowspan: number, // Row span.\n  \t rowgroup: number, // Row group.\n  \t expanded: boolean, // Expanded state.\n  }",
                                "description": "expanded row data."
                            }
                        ],
                        "description": "Custom expanded row template."
                    },
                    {
                        "parent": "table",
                        "name": "groupheader",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Row data.\n  \t rowIndex: number, // Row index.\n  \t columns: any, // Columns.\n  \t editing: boolean, // Editing state.\n  \t frozen: boolean, // Frozen state.\n  }",
                                "description": "row data."
                            }
                        ],
                        "description": "Custom group header template."
                    },
                    {
                        "parent": "table",
                        "name": "groupfooter",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Row data.\n  \t rowIndex: number, // Row index.\n  \t columns: any, // Columns.\n  \t editing: boolean, // Editing state.\n  \t frozen: boolean, // Frozen state.\n  }",
                                "description": "row data."
                            }
                        ],
                        "description": "Custom group footer template."
                    },
                    {
                        "parent": "table",
                        "name": "frozenheader",
                        "parameters": [],
                        "description": "Custom frozen header template."
                    },
                    {
                        "parent": "table",
                        "name": "frozenbody",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Row data.\n  \t rowIndex: number, // Row index.\n  \t columns: any, // Columns.\n  \t editing: boolean, // Editing state.\n  \t frozen: boolean, // Frozen state.\n  }",
                                "description": "row data."
                            }
                        ],
                        "description": "Custom frozen body template."
                    },
                    {
                        "parent": "table",
                        "name": "frozenfooter",
                        "parameters": [],
                        "description": "Custom frozen footer template."
                    },
                    {
                        "parent": "table",
                        "name": "frozencolgroup",
                        "parameters": [],
                        "description": "Custom frozen column group template."
                    },
                    {
                        "parent": "table",
                        "name": "frozenrowexpansion",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t rowspan: number, // Row span.\n  \t rowgroup: number, // Row group.\n  \t expanded: boolean, // Expanded state.\n  }",
                                "description": "row data."
                            }
                        ],
                        "description": "Custom frozen expanded row template."
                    },
                    {
                        "parent": "table",
                        "name": "emptymessage",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns\n  \t frozen: boolean, // Frozen state.\n  }"
                            }
                        ],
                        "description": "Custom empty message template."
                    },
                    {
                        "parent": "table",
                        "name": "paginatorleft",
                        "parameters": [],
                        "description": "Custom paginator left template."
                    },
                    {
                        "parent": "table",
                        "name": "paginatorright",
                        "parameters": [],
                        "description": "Custom paginator right template."
                    },
                    {
                        "parent": "table",
                        "name": "paginatordropdownicon",
                        "parameters": [],
                        "description": "Custom paginator dropdown trigger icon template."
                    },
                    {
                        "parent": "table",
                        "name": "paginatordropdownitem",
                        "parameters": [],
                        "description": "Custom paginator dropdown item template."
                    },
                    {
                        "parent": "table",
                        "name": "paginatorfirstpagelinkicon",
                        "parameters": [],
                        "description": "Custom paginator first page link icon template."
                    },
                    {
                        "parent": "table",
                        "name": "paginatorlastpagelinkicon",
                        "parameters": [],
                        "description": "Custom paginator last page link icon template."
                    },
                    {
                        "parent": "table",
                        "name": "paginatorpreviouspagelinkicon",
                        "parameters": [],
                        "description": "Custom paginator previous page link icon template."
                    },
                    {
                        "parent": "table",
                        "name": "paginatornextpagelinkicon",
                        "parameters": [],
                        "description": "Custom paginator next page link icon template."
                    },
                    {
                        "parent": "table",
                        "name": "loadingicon",
                        "parameters": [],
                        "description": "Custom loading icon template."
                    },
                    {
                        "parent": "table",
                        "name": "reorderindicatorupicon",
                        "parameters": [],
                        "description": "Custom reorder indicator up icon template."
                    },
                    {
                        "parent": "table",
                        "name": "reorderindicatordownicon",
                        "parameters": [],
                        "description": "Custom reorder indicator down icon template."
                    },
                    {
                        "parent": "table",
                        "name": "sorticon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: number, // Sort order.\n  }"
                            }
                        ],
                        "description": "Custom sort icon template."
                    },
                    {
                        "parent": "table",
                        "name": "checkboxicon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Checkbox state.\n  \t partialSelected: boolean, // Partial selection state of row node.\n  }",
                                "description": "checkbox data."
                            }
                        ],
                        "description": "Custom checkbox icon template."
                    },
                    {
                        "parent": "table",
                        "name": "headercheckboxicon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Checked state.\n  }",
                                "description": "checkbox data."
                            }
                        ],
                        "description": "Custom header checkbox icon template."
                    }
                ]
            }
        }
    },
    "tabmenu": {
        "components": {
            "TabMenu": {
                "description": "TabMenu is a navigation component that displays items as tab headers.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]"
                        },
                        {
                            "name": "activeItem",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "description": "Defines the default active menuitem"
                        },
                        {
                            "name": "scrollable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled displays buttons at each side of the tab headers to scroll the tab list."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Class of the element."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "activeItemChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "MenuItem"
                                }
                            ],
                            "description": "Event fired when a tab is selected."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "tabmenu",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  \t index: number, // Item index.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom template of item."
                    },
                    {
                        "parent": "tabmenu",
                        "name": "nexticon",
                        "parameters": [],
                        "description": "Custom template of nexticon."
                    },
                    {
                        "parent": "tabmenu",
                        "name": "previousicon",
                        "parameters": [],
                        "description": "Custom template of previousicon."
                    }
                ]
            }
        }
    },
    "tabpanel": {
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "tabpanel",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "tabpanel",
                        "name": "content",
                        "parameters": [],
                        "description": "Custom content template(Default)."
                    },
                    {
                        "parent": "tabpanel",
                        "name": "righticon",
                        "parameters": [],
                        "description": "Custom right icon template."
                    },
                    {
                        "parent": "tabpanel",
                        "name": "lefticon",
                        "parameters": [],
                        "description": "Custom left icon template."
                    },
                    {
                        "parent": "tabpanel",
                        "name": "closeicon",
                        "parameters": [],
                        "description": "Custom close icon template."
                    }
                ]
            }
        }
    },
    "tabview": {
        "components": {
            "TabPanel": {
                "description": "TabPanel is a helper component for TabView component.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "closable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if tab can be removed."
                        },
                        {
                            "name": "headerStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the tab header."
                        },
                        {
                            "name": "headerStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tab header."
                        },
                        {
                            "name": "cache",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether a lazy loaded panel should avoid getting loaded again on reselection."
                        },
                        {
                            "name": "tooltip",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Advisory information to display in a tooltip on hover."
                        },
                        {
                            "name": "tooltipPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "top",
                            "description": "Position of the tooltip."
                        },
                        {
                            "name": "tooltipPositionStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "absolute",
                            "description": "Type of CSS position."
                        },
                        {
                            "name": "tooltipStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tooltip."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "Defines if tab is active."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When true, tab cannot be activated."
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Title of the tabPanel."
                        },
                        {
                            "name": "leftIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Left icon of the tabPanel.",
                            "deprecated": "since v15.4.2, use "
                        },
                        {
                            "name": "rightIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Left icon of the tabPanel.",
                            "deprecated": "since v15.4.2, use "
                        }
                    ]
                }
            },
            "TabView": {
                "description": "TabView is a container component to group content with tabs.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "controlClose",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether tab close is controlled at onClose event or not."
                        },
                        {
                            "name": "scrollable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled displays buttons at each side of the tab headers to scroll the tab list."
                        },
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the active tab to change selected tab programmatically."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "nextButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string aria label attribute the forward navigation button."
                        },
                        {
                            "name": "prevButtonAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string aria label attribute the backward navigation button."
                        },
                        {
                            "name": "autoHideButtons",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When activated, navigation buttons will automatically hide or show based on the available space within the container."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TabViewChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke on tab change."
                        },
                        {
                            "name": "onClose",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TabViewCloseEvent"
                                }
                            ],
                            "description": "Callback to invoke on tab close."
                        },
                        {
                            "name": "activeIndexChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "number"
                                }
                            ],
                            "description": "Callback to invoke on the active tab change."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "TabViewChangeEvent",
                        "description": "Custom tab change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event"
                            },
                            {
                                "name": "index",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the selected tab"
                            }
                        ]
                    },
                    {
                        "name": "TabViewCloseEvent",
                        "description": "Custom tab close event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event"
                            },
                            {
                                "name": "index",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the closed tab"
                            },
                            {
                                "name": "close",
                                "optional": true,
                                "readonly": false
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "tabview",
                        "name": "previousicon",
                        "parameters": [],
                        "description": "Previous button icon template for the scrollable component."
                    },
                    {
                        "parent": "tabview",
                        "name": "nexticon",
                        "parameters": [],
                        "description": "Next button icon template for the scrollable component."
                    }
                ]
            }
        }
    },
    "tag": {
        "components": {
            "Tag": {
                "description": "Tag component is used to categorize content.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "severity",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Severity type of the tag."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Value to display inside the tag."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon of the tag to display next to the value.",
                            "deprecated": "since 15.4.2. Use 'icon' template."
                        },
                        {
                            "name": "rounded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the corners of the tag are rounded."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "tag",
                        "name": "icon",
                        "parameters": [],
                        "description": "Custom icon template"
                    }
                ]
            }
        }
    },
    "terminal": {
        "components": {
            "Terminal": {
                "description": "Terminal is a text based user interface.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "welcomeMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Initial text to display on terminal."
                        },
                        {
                            "name": "prompt",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Prompt text for each command."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "TerminalService",
                        "description": "Defines Terminal service options.",
                        "props": [
                            {
                                "name": "sendCommand",
                                "optional": false,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "sendResponse",
                                "optional": false,
                                "readonly": false,
                                "type": "Function"
                            }
                        ]
                    }
                ]
            }
        }
    },
    "terminalservice": {
        "components": {}
    },
    "tieredmenu": {
        "components": {
            "TieredMenu": {
                "description": "TieredMenu displays submenus in nested overlays.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "model",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]"
                        },
                        {
                            "name": "popup",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoDisplay",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show a root submenu on mouse over."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".12s cubic-bezier(0, 0, 0.2, 1)",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ".1s linear",
                            "description": "Transition options of the hide animation."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when overlay menu is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when overlay menu is hidden."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "any"
                                },
                                {
                                    "name": "isFocus",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Hides the popup menu."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "any",
                                    "description": "Browser event."
                                }
                            ],
                            "description": "Toggles the visibility of the popup menu."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "any"
                                },
                                {
                                    "name": "isFocus",
                                    "type": "any"
                                }
                            ],
                            "description": "Displays the popup menu."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "tieredmenu",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  \t hasSubmenu: boolean, // Submenu control of the item.\n  }"
                            }
                        ],
                        "description": "Custom template of item."
                    },
                    {
                        "parent": "tieredmenu",
                        "name": "submenuicon",
                        "parameters": [],
                        "description": "Custom template of submenuicon."
                    }
                ]
            }
        }
    },
    "timeline": {
        "components": {
            "Timeline": {
                "description": "Timeline visualizes a series of chained events.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of events to display."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "align",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "left",
                            "description": "Position of the timeline bar relative to the content. Valid values are \"left\", \"right\" for vertical layout and \"top\", \"bottom\" for horizontal layout."
                        },
                        {
                            "name": "layout",
                            "optional": false,
                            "readonly": false,
                            "type": "\"vertical\" | \"horizontal\"",
                            "default": "vertical",
                            "description": "Orientation of the timeline."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "timeline",
                        "name": "content",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom content template."
                    },
                    {
                        "parent": "timeline",
                        "name": "opposite",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom opposite item template."
                    },
                    {
                        "parent": "timeline",
                        "name": "marker",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom marker template."
                    }
                ]
            }
        }
    },
    "toast": {
        "components": {
            "Toast": {
                "description": "Toast is used to display messages in an overlay.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "key",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Key of the message in case message is targeted to a specific toast component."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "life",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "3000",
                            "description": "The default time to display messages for in milliseconds."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Inline class of the component."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "ToastPositionType",
                            "description": "Position of the toast in viewport."
                        },
                        {
                            "name": "preventOpenDuplicates",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "It does not add the new message if there is already a toast displayed with the same content"
                        },
                        {
                            "name": "preventDuplicates",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays only once a message with the same content."
                        },
                        {
                            "name": "showTransformOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "translateY(100%)",
                            "description": "Transform options of the show animation."
                        },
                        {
                            "name": "hideTransformOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "translateY(-100%)",
                            "description": "Transform options of the hide animation."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "300ms ease-out",
                            "description": "Transition options of the show animation."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "250ms ease-in",
                            "description": "Transition options of the hide animation."
                        },
                        {
                            "name": "breakpoints",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Object literal to define styles per screen size."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onClose",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ToastCloseEvent"
                                }
                            ],
                            "description": "Callback to invoke when a message is closed."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "ToastCloseEvent",
                        "description": "Custom close event.",
                        "props": [
                            {
                                "name": "message",
                                "optional": false,
                                "readonly": false,
                                "type": "Message",
                                "description": "Message of the closed element."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "toast",
                        "name": "message",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Data of the message.\n  }"
                            }
                        ],
                        "description": "Custom template of message."
                    },
                    {
                        "parent": "toast",
                        "name": "headless",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Data of the message.\n  }"
                            }
                        ],
                        "description": "Headless template."
                    }
                ]
            }
        }
    },
    "togglebutton": {
        "components": {
            "ToggleButton": {
                "description": "ToggleButton is used to select a boolean value using a button.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "onLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label for the on state."
                        },
                        {
                            "name": "offLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label for the off state."
                        },
                        {
                            "name": "onIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon for the on state."
                        },
                        {
                            "name": "offIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Icon for the off state."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "iconPos",
                            "optional": false,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "Position of the icon."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "ToggleButtonChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke on value change."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "ToggleButtonChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "checked",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Boolean value to represent checked state."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "togglebutton",
                        "name": "icon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Checked.\n  }",
                                "description": "checked state as boolean."
                            }
                        ],
                        "description": "Custom icon template."
                    }
                ]
            }
        }
    },
    "toolbar": {
        "components": {
            "Toolbar": {
                "description": "Toolbar is a grouping component for buttons and other content.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string value that labels an interactive element."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "toolbar",
                        "name": "start",
                        "parameters": [],
                        "description": "Custom start content."
                    },
                    {
                        "parent": "toolbar",
                        "name": "end",
                        "parameters": [],
                        "description": "Custom end content."
                    },
                    {
                        "parent": "toolbar",
                        "name": "center",
                        "parameters": [],
                        "description": "Custom center content."
                    }
                ]
            }
        }
    },
    "tooltip": {
        "components": {
            "Tooltip": {
                "description": "Tooltip directive provides advisory information for a component.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "tooltipPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Position of the tooltip."
                        },
                        {
                            "name": "tooltipEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "hover",
                            "description": "Event to show the tooltip."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the overlay, valid values are \"body\", \"target\" or a local ng-F variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "positionStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Type of CSS position."
                        },
                        {
                            "name": "tooltipStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the tooltip."
                        },
                        {
                            "name": "tooltipZIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Whether the z-index should be managed automatically to always go on top or have a fixed value."
                        },
                        {
                            "name": "escape",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "By default the tooltip contents are rendered as text. Set to false to support html tags in the content."
                        },
                        {
                            "name": "showDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay to show the tooltip in milliseconds."
                        },
                        {
                            "name": "hideDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Delay to hide the tooltip in milliseconds."
                        },
                        {
                            "name": "life",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Time to wait in milliseconds to hide the tooltip even it is active."
                        },
                        {
                            "name": "positionTop",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Specifies the additional vertical offset of the tooltip from its default position."
                        },
                        {
                            "name": "positionLeft",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Specifies the additional horizontal offset of the tooltip from its default position."
                        },
                        {
                            "name": "autoHide",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to hide tooltip when hovering over tooltip content."
                        },
                        {
                            "name": "fitContent",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Automatically adjusts the element position when there is not enough space on the selected position."
                        },
                        {
                            "name": "hideOnEscape",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to hide tooltip on escape key press."
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "type": "string | TemplateRef<HTMLElement>",
                            "description": "Content of the tooltip."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "TooltipOptions",
                            "description": "Specifies the tooltip configuration options for the component."
                        }
                    ]
                }
            }
        }
    },
    "tree": {
        "components": {
            "Tree": {
                "description": "Tree is used to display hierarchical data.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "selectionMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "A single treenode instance or an array to refer to the selections."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "contextMenu",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Context menu instance."
                        },
                        {
                            "name": "layout",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "vertical",
                            "description": "Defines the orientation of the tree, valid values are 'vertical' and 'horizontal'."
                        },
                        {
                            "name": "draggableScope",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Scope of the draggable nodes to match a droppableScope."
                        },
                        {
                            "name": "droppableScope",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Scope of the droppable nodes to match a draggableScope."
                        },
                        {
                            "name": "draggableNodes",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the nodes are draggable."
                        },
                        {
                            "name": "droppableNodes",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the nodes are droppable."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "propagateSelectionUp",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to ancestor nodes."
                        },
                        {
                            "name": "propagateSelectionDown",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to descendant nodes."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display when there is no data."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Used to define a string that labels the tree."
                        },
                        {
                            "name": "togglerAriaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the toggler icon for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "validateDrop",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, drop can be accepted or rejected based on condition defined at onNodeDrop."
                        },
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items."
                        },
                        {
                            "name": "filterBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "lenient",
                            "description": "Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filteredNodes",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode<any>[]",
                            "description": "Values after the tree nodes are filtered."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Height of the scrollable viewport."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "virtualScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the data should be loaded on demand during scroll."
                        },
                        {
                            "name": "virtualScrollItemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Height of an item in the list for VirtualScrolling."
                        },
                        {
                            "name": "virtualScrollOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollerOptions",
                            "description": "Whether to use the scroller feature. The properties of scroller component can be used like an object in it."
                        },
                        {
                            "name": "indentation",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1.5",
                            "description": "Indentation factor for spacing of the nested node when virtual scrolling is enabled."
                        },
                        {
                            "name": "_templateMap",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Custom templates of the component."
                        },
                        {
                            "name": "trackBy",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": "...",
                            "description": "Function to optimize the node list rendering, default algorithm checks for object identity."
                        },
                        {
                            "name": "_virtualNodeHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Height of the node.",
                            "deprecated": "use virtualScrollItemSize property instead."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "selectionChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "TreeNode<any"
                                }
                            ],
                            "description": "Callback to invoke on selection change."
                        },
                        {
                            "name": "onNodeSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "onNodeUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeUnSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "onNodeExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeExpandEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "onNodeCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeCollapseEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "onNodeContextMenuSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeContextMenuSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is selected with right click."
                        },
                        {
                            "name": "onNodeDrop",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeDropEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is dropped."
                        },
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeLazyLoadEvent"
                                }
                            ],
                            "description": "Callback to invoke in lazy mode to load new data."
                        },
                        {
                            "name": "onScroll",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeScrollEvent"
                                }
                            ],
                            "description": "Callback to invoke in virtual scroll mode when scroll position changes."
                        },
                        {
                            "name": "onScrollIndexChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeScrollIndexChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke in virtual scroll mode when scroll position and item's range in view changes."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeFilterEvent"
                                }
                            ],
                            "description": "Callback to invoke when data is filtered."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "resetFilter",
                            "parameters": [],
                            "description": "Resets filter."
                        },
                        {
                            "name": "scrollToVirtualIndex",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": "number"
                                }
                            ],
                            "description": "Scrolls to virtual index."
                        },
                        {
                            "name": "scrollTo",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "any",
                                    "description": "Scroll options."
                                }
                            ],
                            "description": "Scrolls to virtual index."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "TreeNodeSelectEvent",
                        "description": "Custom node select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event"
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "TreeNodeUnSelectEvent",
                        "description": "Custom node unselect event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event"
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "TreeNodeExpandEvent",
                        "description": "Custom node expand event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event"
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "TreeNodeCollapseEvent",
                        "description": "Custom node collapse event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event"
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "TreeNodeContextMenuSelectEvent",
                        "description": "Custom context menu select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event"
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "TreeNodeDropEvent",
                        "description": "Custom node drop event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "DragEvent",
                                "description": "Browser drag event."
                            },
                            {
                                "name": "dragNode",
                                "optional": true,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Dragged node instance."
                            },
                            {
                                "name": "dropNode",
                                "optional": true,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Dropped node instance."
                            },
                            {
                                "name": "index",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the dragged node."
                            },
                            {
                                "name": "accept",
                                "optional": true,
                                "readonly": false,
                                "type": "Function",
                                "description": "Callback to invoke on drop."
                            }
                        ]
                    },
                    {
                        "name": "TreeLazyLoadEvent",
                        "description": "Custom lazy load event.",
                        "props": [
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "First element index in viewport."
                            },
                            {
                                "name": "last",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Last element index in viewport."
                            }
                        ]
                    },
                    {
                        "name": "TreeScrollIndexChangeEvent",
                        "description": "Custom scroll index change event.",
                        "props": [
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "First element index in viewport."
                            },
                            {
                                "name": "last",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Last element index in viewport."
                            }
                        ]
                    },
                    {
                        "name": "TreeScrollEvent",
                        "description": "Custom scroll event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            }
                        ]
                    },
                    {
                        "name": "TreeFilterEvent",
                        "description": "Custom filter event.",
                        "props": [
                            {
                                "name": "filter",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Filter value."
                            },
                            {
                                "name": "filteredValue",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>[]",
                                "description": "Filtered nodes."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "tree",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "tree",
                        "name": "empty",
                        "parameters": [],
                        "description": "Custom empty message template."
                    },
                    {
                        "parent": "tree",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "tree",
                        "name": "loader",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t options: ScrollerOptions, // Scroller options.\n  }",
                                "description": "loader options."
                            }
                        ],
                        "description": "Custom loader template."
                    },
                    {
                        "parent": "tree",
                        "name": "togglericon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Expanded state of the node.\n  }",
                                "description": "expand data."
                            }
                        ],
                        "description": "Custom toggler icon template."
                    },
                    {
                        "parent": "tree",
                        "name": "checkboxicon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Checked state of the node.\n  \t partialSelected: boolean, // Partial selection state of the node.\n  }",
                                "description": "node data."
                            }
                        ],
                        "description": "Custom checkbox icon template."
                    },
                    {
                        "parent": "tree",
                        "name": "loadingicon",
                        "parameters": [],
                        "description": "Custom loading icon template."
                    },
                    {
                        "parent": "tree",
                        "name": "filtericon",
                        "parameters": [],
                        "description": "Custom filter icon template."
                    }
                ]
            }
        }
    },
    "treeselect": {
        "components": {
            "TreeSelect": {
                "description": "TreeSelect is a form component to choose from hierarchical data.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "400px",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "display",
                            "optional": false,
                            "readonly": false,
                            "type": "\"comma\" | \"chip\"",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed."
                        },
                        {
                            "name": "selectionMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "single",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "placeholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label to display when there are no selections."
                        },
                        {
                            "name": "panelClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string | string[] | Set<string> | Object",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the panel element."
                        },
                        {
                            "name": "panelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the panel element."
                        },
                        {
                            "name": "containerStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the container element."
                        },
                        {
                            "name": "containerStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the container element."
                        },
                        {
                            "name": "labelStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the label element."
                        },
                        {
                            "name": "labelStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the label element."
                        },
                        {
                            "name": "overlayOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayOptions",
                            "description": "Specifies the options for the overlay."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeNG locale configuration."
                        },
                        {
                            "name": "appendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are \"body\" for document body and \"self\" for the element itself."
                        },
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items."
                        },
                        {
                            "name": "filterBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "lenient",
                            "description": "Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterInputAutoFocus",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Determines whether the filter input should be automatically focused when the component is rendered."
                        },
                        {
                            "name": "propagateSelectionDown",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to descendant nodes."
                        },
                        {
                            "name": "propagateSelectionUp",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to ancestor nodes."
                        },
                        {
                            "name": "showClear",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode<any>[]",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "showTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the show animation.",
                            "deprecated": "since v14.2.0 use overlayOptions property instead."
                        },
                        {
                            "name": "hideTransitionOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Transition options of the hide animation.",
                            "deprecated": "since v14.2.0 use overlayOptions property instead."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onNodeExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectNodeExpandEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "onNodeCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectNodeCollapseEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "onShow",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "onHide",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event"
                                }
                            ],
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "onClear",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when input field is cleared."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when data is filtered."
                        },
                        {
                            "name": "onNodeUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeUnSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "onNodeSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is selected."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "TreeSelectNodeCollapseEvent",
                        "description": "Custom node collapse event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "TreeSelectNodeExpandEvent",
                        "description": "Custom node expand event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "treeselect",
                        "name": "value",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: TreeNode, // Value of the component.\n  \t placeholder: string, // Placeholder of the component.\n  }",
                                "description": "value data."
                            }
                        ],
                        "description": "Custom value template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "header",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: TreeNode, // Value of the component.\n  \t options: TreeNode, // Placeholder of the component.\n  }",
                                "description": "header data."
                            }
                        ],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "empty",
                        "parameters": [],
                        "description": "Custom empty template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "clearicon",
                        "parameters": [],
                        "description": "Custom clear icon template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "triggericon",
                        "parameters": [],
                        "description": "Custom dropdown trigger icon template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "filtericon",
                        "parameters": [],
                        "description": "Custom filter icon template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "closeicon",
                        "parameters": [],
                        "description": "Custom close icon template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "itemtogglericon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Expanded state of the node.\n  }",
                                "description": "toggler icon data."
                            }
                        ],
                        "description": "Custom node toggler template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "itemcheckboxicon",
                        "parameters": [],
                        "description": "Custom node checkbox icon template."
                    },
                    {
                        "parent": "treeselect",
                        "name": "itemloadingicon",
                        "parameters": [],
                        "description": "Custom loading icon template."
                    }
                ]
            }
        }
    },
    "treetable": {
        "components": {
            "TreeTable": {
                "description": "TreeTable is used to display hierarchical data in tabular format.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "columns",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to represent dynamic columns."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "tableStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the table."
                        },
                        {
                            "name": "tableStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the table."
                        },
                        {
                            "name": "autoLayout",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the cell widths scale according to their content or not."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "lazyLoadOnInit",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to call lazy loading on initialization."
                        },
                        {
                            "name": "paginator",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "pageLinks",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display in paginator."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "Array of integer/object values to display inside rows per page dropdown of paginator"
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": false,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator."
                        },
                        {
                            "name": "paginatorStyleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Custom style class for paginator"
                        },
                        {
                            "name": "paginatorDropdownAppendTo",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Target element to attach the paginator dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name)."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "{currentPage} of {totalPages}",
                            "description": "Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}"
                        },
                        {
                            "name": "showCurrentPageReport",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display current page report."
                        },
                        {
                            "name": "showJumpToPageDropdown",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a dropdown to navigate to any page."
                        },
                        {
                            "name": "showFirstLastIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, icons are displayed on paginator to go first and last page."
                        },
                        {
                            "name": "showPageLinks",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show page links."
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Sort order to use when an unsorted column gets sorted by user interaction."
                        },
                        {
                            "name": "sortMode",
                            "optional": false,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "resetPageOnSort",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When true, resets paginator to first page after sorting."
                        },
                        {
                            "name": "customSort",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to use the default sorting or a custom one using sortFunction."
                        },
                        {
                            "name": "selectionMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies the selection mode, valid values are \"single\" and \"multiple\"."
                        },
                        {
                            "name": "contextMenuSelection",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected row with a context menu."
                        },
                        {
                            "name": "contextMenuSelectionMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "separate",
                            "description": "Mode of the contet menu selection."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "A property to uniquely identify a record in data."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines whether metaKey is should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "compareSelectionBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "deepEquals",
                            "description": "Algorithm to define if a row is selected, valid values are \"equals\" that compares by reference and \"deepEquals\" that compares all fields."
                        },
                        {
                            "name": "rowHover",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Adds hover effect to rows without the need for selectionMode."
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "showLoader",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the loading mask when loading property is true."
                        },
                        {
                            "name": "scrollable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specifies, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Height of the scroll viewport in fixed pixels or the \"flex\" keyword for a dynamic size."
                        },
                        {
                            "name": "virtualScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the data should be loaded on demand during scroll."
                        },
                        {
                            "name": "virtualScrollItemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Height of a row to use in calculations of virtual scrolling."
                        },
                        {
                            "name": "virtualScrollOptions",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollerOptions",
                            "description": "Whether to use the scroller feature. The properties of scroller component can be used like an object in it."
                        },
                        {
                            "name": "virtualScrollDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "150",
                            "description": "The delay (in milliseconds) before triggering the virtual scroll. This determines the time gap between the user's scroll action and the actual rendering of the next set of items in the virtual scroll."
                        },
                        {
                            "name": "frozenWidth",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Width of the frozen columns container."
                        },
                        {
                            "name": "frozenColumns",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "An array of objects to represent dynamic columns that are frozen."
                        },
                        {
                            "name": "resizableColumns",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "fit",
                            "description": "Defines whether the overall table width should change on column resize, valid values are \"fit\" and \"expand\"."
                        },
                        {
                            "name": "reorderableColumns",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be reordered using drag and drop."
                        },
                        {
                            "name": "contextMenu",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Local ng-template varilable of a ContextMenu."
                        },
                        {
                            "name": "rowTrackBy",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": "...",
                            "description": "Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity."
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "default": "{}",
                            "description": "An array of FilterMetadata objects to provide external filters."
                        },
                        {
                            "name": "globalFilterFields",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "description": "An array of fields as string to use in global filtering."
                        },
                        {
                            "name": "filterDelay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Delay in milliseconds before filtering the data."
                        },
                        {
                            "name": "filterMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "lenient",
                            "description": "Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient."
                        },
                        {
                            "name": "filterLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "paginatorLocale",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Locale to be used in paginator formatting."
                        },
                        {
                            "name": "totalRecords",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the field to sort data by default."
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Order to sort when default sorting is enabled."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "SortMeta[]",
                            "description": "An array of SortMeta objects to sort the data by default in multiple sort mode."
                        },
                        {
                            "name": "selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Selected row in single mode or an array of values in multiple mode."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode<any>[]",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "virtualRowHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Indicates the height of rows to be scrolled.",
                            "deprecated": "use virtualScrollItemSize property instead."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "selectionChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "TreeTableNode<any"
                                }
                            ],
                            "description": "Callback to invoke on selected node change."
                        },
                        {
                            "name": "contextMenuSelectionChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "TreeTableNode<any"
                                }
                            ],
                            "description": "Callback to invoke on context menu selection change."
                        },
                        {
                            "name": "onFilter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableFilterEvent"
                                }
                            ],
                            "description": "Callback to invoke when data is filtered."
                        },
                        {
                            "name": "onNodeExpand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableNodeExpandEvent<any"
                                }
                            ],
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "onNodeCollapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableNodeCollapseEvent<any"
                                }
                            ],
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "onPage",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "TreeTablePaginatorState"
                                }
                            ],
                            "description": "Callback to invoke when pagination occurs."
                        },
                        {
                            "name": "onSort",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "description": "Callback to invoke when a column gets sorted."
                        },
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableLazyLoadEvent"
                                }
                            ],
                            "description": "Callback to invoke when paging, sorting or filtering happens in lazy mode."
                        },
                        {
                            "name": "sortFunction",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableSortEvent"
                                }
                            ],
                            "description": "An event emitter to invoke on custom sorting, refer to sorting section for details."
                        },
                        {
                            "name": "onColResize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableColResizeEvent"
                                }
                            ],
                            "description": "Callback to invoke when a column is resized."
                        },
                        {
                            "name": "onColReorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableColumnReorderEvent"
                                }
                            ],
                            "description": "Callback to invoke when a column is reordered."
                        },
                        {
                            "name": "onNodeSelect",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "TreeTableNode<any"
                                }
                            ],
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "onNodeUnselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableNodeUnSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "onContextMenuSelect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableContextMenuSelectEvent"
                                }
                            ],
                            "description": "Callback to invoke when a node is selected with right click."
                        },
                        {
                            "name": "onHeaderCheckboxToggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableHeaderCheckboxToggleEvent"
                                }
                            ],
                            "description": "Callback to invoke when state of header checkbox changes."
                        },
                        {
                            "name": "onEditInit",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableEditEvent"
                                }
                            ],
                            "description": "Callback to invoke when a cell switches to edit mode."
                        },
                        {
                            "name": "onEditComplete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableEditEvent"
                                }
                            ],
                            "description": "Callback to invoke when cell edit is completed."
                        },
                        {
                            "name": "onEditCancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TreeTableEditEvent"
                                }
                            ],
                            "description": "Callback to invoke when cell edit is cancelled with escape key."
                        }
                    ]
                },
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "resetScrollTop",
                            "parameters": [],
                            "description": "Resets scroll to top."
                        },
                        {
                            "name": "scrollToVirtualIndex",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": "number",
                                    "description": "index of the element."
                                }
                            ],
                            "description": "Scrolls to given index when using virtual scroll."
                        },
                        {
                            "name": "scrollTo",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "ScrollToOptions",
                                    "description": "Scroll options."
                                }
                            ],
                            "description": "Scrolls to given index."
                        },
                        {
                            "name": "reset",
                            "parameters": [],
                            "description": "Clears the sort and paginator state."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "TreeTableLazyLoadEvent",
                        "description": "Custom lazy load event.",
                        "props": [
                            {
                                "name": "rows",
                                "optional": true,
                                "readonly": false,
                                "type": "number"
                            },
                            {
                                "name": "sortField",
                                "optional": true,
                                "readonly": false,
                                "type": "string | string[]"
                            },
                            {
                                "name": "sortOrder",
                                "optional": true,
                                "readonly": false,
                                "type": "number"
                            },
                            {
                                "name": "filters",
                                "optional": true,
                                "readonly": false,
                                "type": "Object"
                            },
                            {
                                "name": "globalFilter",
                                "optional": true,
                                "readonly": false,
                                "type": "string | string[]"
                            },
                            {
                                "name": "multiSortMeta",
                                "optional": true,
                                "readonly": false,
                                "type": "SortMeta[]"
                            },
                            {
                                "name": "forceUpdate",
                                "optional": true,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "first",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "First element in viewport."
                            },
                            {
                                "name": "last",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Last element in viewport."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableColumnReorderEvent",
                        "description": "Custom column reorder event.",
                        "props": [
                            {
                                "name": "dragIndex",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the dragged item."
                            },
                            {
                                "name": "dropIndex",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the drop position."
                            },
                            {
                                "name": "columns",
                                "optional": true,
                                "readonly": false,
                                "type": "any[]",
                                "description": "Columns after reorder."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableFilterEvent",
                        "description": "Custom filter event.",
                        "props": [
                            {
                                "name": "filters",
                                "optional": true,
                                "readonly": false,
                                "type": "Object",
                                "description": "Filter meta."
                            },
                            {
                                "name": "filteredValue",
                                "optional": true,
                                "readonly": false,
                                "type": "TreeNode<any>[]",
                                "description": "Value after filter."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableNodeExpandEvent",
                        "description": "Custom node expand event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeTableNode<T>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableNodeCollapseEvent",
                        "description": "Custom node collapse event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeTableNode<T>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableSortEvent",
                        "description": "Custom sort event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "data",
                                "optional": true,
                                "readonly": false,
                                "type": "TreeNode<any>[]",
                                "description": "Value to be sorted."
                            },
                            {
                                "name": "mode",
                                "optional": true,
                                "readonly": false,
                                "type": "\"multiple\" | \"single\"",
                                "description": "Sort mode."
                            },
                            {
                                "name": "field",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Sort field."
                            },
                            {
                                "name": "order",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Sort order."
                            },
                            {
                                "name": "multiSortMeta",
                                "optional": true,
                                "readonly": false,
                                "type": "SortMeta[]",
                                "description": "Multiple sort meta."
                            },
                            {
                                "name": "multisortmeta",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Multiple sort meta."
                            },
                            {
                                "name": "sortMeta",
                                "optional": true,
                                "readonly": false,
                                "type": "SortMeta",
                                "description": "Sort meta."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableColResizeEvent",
                        "description": "Custom column resize event.",
                        "props": [
                            {
                                "name": "element",
                                "optional": false,
                                "readonly": false,
                                "type": "HTMLElement",
                                "description": "Instance of resized column."
                            },
                            {
                                "name": "delta",
                                "optional": false,
                                "readonly": false,
                                "type": "number",
                                "description": "Position."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableNodeSelectEvent",
                        "description": "Custom node select event.",
                        "props": [
                            {
                                "name": "label",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Label of the node."
                            },
                            {
                                "name": "data",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Data represented by the node."
                            },
                            {
                                "name": "icon",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Icon of the node to display next to content."
                            },
                            {
                                "name": "expandedIcon",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Icon to use in expanded state."
                            },
                            {
                                "name": "collapsedIcon",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Icon to use in collapsed state."
                            },
                            {
                                "name": "children",
                                "optional": true,
                                "readonly": false,
                                "type": "TreeNode<any>[]",
                                "description": "An array of treenodes as children."
                            },
                            {
                                "name": "leaf",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Specifies if the node has children. Used in lazy loading."
                            },
                            {
                                "name": "expanded",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Expanded state of the node."
                            },
                            {
                                "name": "parent",
                                "optional": true,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Parent of the node."
                            },
                            {
                                "name": "partialSelected",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Defines if value is partially selected."
                            },
                            {
                                "name": "style",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Inline style of the node."
                            },
                            {
                                "name": "styleClass",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Style class of the node."
                            },
                            {
                                "name": "draggable",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Defines if the node is draggable."
                            },
                            {
                                "name": "droppable",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Defines if the node is droppable."
                            },
                            {
                                "name": "selectable",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Whether the node is selectable when selection mode is enabled."
                            },
                            {
                                "name": "key",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Mandatory unique key of the node."
                            },
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "rowNode",
                                "optional": true,
                                "readonly": false,
                                "type": "any",
                                "description": "Row of the node."
                            },
                            {
                                "name": "node",
                                "optional": true,
                                "readonly": false,
                                "type": "TreeNode<any>",
                                "description": "Node instance."
                            },
                            {
                                "name": "type",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Selection type."
                            },
                            {
                                "name": "index",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Node index."
                            },
                            {
                                "name": "level",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Node level."
                            },
                            {
                                "name": "visible",
                                "optional": true,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Boolean value indicates if node is in viewport."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableNodeUnSelectEvent",
                        "description": "Custom node unselect event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": true,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": true,
                                "readonly": false,
                                "type": "TreeTableNode<any>",
                                "description": "Node instance."
                            },
                            {
                                "name": "type",
                                "optional": true,
                                "readonly": false,
                                "type": "string",
                                "description": "Selection type."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableContextMenuSelectEvent",
                        "description": "Custom context menu select event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "node",
                                "optional": false,
                                "readonly": false,
                                "type": "TreeTableNode<any>",
                                "description": "Node instance."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableHeaderCheckboxToggleEvent",
                        "description": "Custom checkbox toggle event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "checked",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Checked state."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableEditEvent",
                        "description": "Custom edit event.",
                        "props": [
                            {
                                "name": "field",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Field to be edited."
                            },
                            {
                                "name": "data",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "New value."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "treetable",
                        "name": "caption",
                        "parameters": [],
                        "description": "Custom caption template."
                    },
                    {
                        "parent": "treetable",
                        "name": "header",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns instance.\n  }",
                                "description": "header data."
                            }
                        ],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "treetable",
                        "name": "body",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: TreeNode, // undefined\n  \t node: TreeNode, // Serialized node.\n  \t rowData: any, // Row data.\n  \t columns: any, // Columns instance.\n  }",
                                "description": "body data."
                            }
                        ],
                        "description": "Custom body template."
                    },
                    {
                        "parent": "treetable",
                        "name": "footer",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns instance.\n  }",
                                "description": "footer data."
                            }
                        ],
                        "description": "Custom footer template."
                    },
                    {
                        "parent": "treetable",
                        "name": "summary",
                        "parameters": [],
                        "description": "Custom summary template."
                    },
                    {
                        "parent": "treetable",
                        "name": "colgroup",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns instance.\n  }",
                                "description": "column group data."
                            }
                        ],
                        "description": "Custom colgroup template."
                    },
                    {
                        "parent": "treetable",
                        "name": "emptymessage",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns instance.\n  \t frozen: boolean, // Boolean value indicates whether column is frozen.\n  }"
                            }
                        ],
                        "description": "Custom emptymessage template."
                    },
                    {
                        "parent": "treetable",
                        "name": "paginatorleft",
                        "parameters": [],
                        "description": "Custom paginator left section template."
                    },
                    {
                        "parent": "treetable",
                        "name": "paginatorright",
                        "parameters": [],
                        "description": "Custom paginator right section template."
                    },
                    {
                        "parent": "treetable",
                        "name": "paginatordropdownitem",
                        "parameters": [],
                        "description": "Custom paginator dropdown template."
                    },
                    {
                        "parent": "treetable",
                        "name": "frozenheader",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns instance.\n  }",
                                "description": "frozen header data."
                            }
                        ],
                        "description": "Custom frozenheader template."
                    },
                    {
                        "parent": "treetable",
                        "name": "frozenbody",
                        "parameters": [],
                        "description": "Custom frozenbody template."
                    },
                    {
                        "parent": "treetable",
                        "name": "frozenfooter",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns instance.\n  }",
                                "description": "frozen footer data."
                            }
                        ],
                        "description": "Custom frozenfooter template."
                    },
                    {
                        "parent": "treetable",
                        "name": "frozencolgroup",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Columns instance.\n  }",
                                "description": "group data."
                            }
                        ],
                        "description": "Custom frozen column group template."
                    },
                    {
                        "parent": "treetable",
                        "name": "loadingicon",
                        "parameters": [],
                        "description": "Custom loading icon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "reorderindicatorupicon",
                        "parameters": [],
                        "description": "Custom reorder indicator up icon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "reorderindicatordownicon",
                        "parameters": [],
                        "description": "Custom reorder indicator down icon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "sorticon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: number, // Sort order.\n  }",
                                "description": "sort data."
                            }
                        ],
                        "description": "Custom sort icon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "checkboxicon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Checkbox state.\n  \t partialSelected: boolean, // Partial selection state of row node.\n  }",
                                "description": "checkbox data."
                            }
                        ],
                        "description": "Custom checkbox icon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "headercheckboxicon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Checkbox state.\n  }",
                                "description": "checkbox data."
                            }
                        ],
                        "description": "Custom header checkbox icon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "togglericon",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: boolean, // Expand state of row node.\n  }",
                                "description": "toggle icon data."
                            }
                        ],
                        "description": "Custom toggler icon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "paginatorfirstpagelinkicon",
                        "parameters": [],
                        "description": "Custom paginator first page link icon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "paginatorlastpagelinkicon",
                        "parameters": [],
                        "description": "Custom paginatorlastpagelinkicon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "paginatorpreviouspagelinkicon",
                        "parameters": [],
                        "description": "Custom paginatorpreviouspagelinkicon template."
                    },
                    {
                        "parent": "treetable",
                        "name": "paginatornextpagelinkicon",
                        "parameters": [],
                        "description": "Custom paginatornextpagelinkicon template."
                    }
                ]
            },
            "interfaces": {
                "description": "Defines the custom interfaces used by the module.",
                "values": [
                    {
                        "name": "TreeTablePaginatorState",
                        "description": "Paginator state.",
                        "props": [
                            {
                                "name": "page",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Current page."
                            },
                            {
                                "name": "first",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Index of the first element."
                            },
                            {
                                "name": "rows",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Row count."
                            },
                            {
                                "name": "pageCount",
                                "optional": true,
                                "readonly": false,
                                "type": "number",
                                "description": "Page count."
                            }
                        ]
                    },
                    {
                        "name": "TreeTableFilterOptions",
                        "description": "Filtering options.",
                        "props": [
                            {
                                "name": "filterField",
                                "optional": false,
                                "readonly": false,
                                "type": "string",
                                "description": "Field to be filtered."
                            },
                            {
                                "name": "filterValue",
                                "optional": false,
                                "readonly": false,
                                "type": "any",
                                "description": "Value to use when filtering."
                            },
                            {
                                "name": "filterConstraint",
                                "optional": false,
                                "readonly": false,
                                "type": "Function"
                            },
                            {
                                "name": "isStrictMode",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Boolean value that defines if strict mode enabled."
                            }
                        ]
                    }
                ]
            }
        }
    },
    "tristatecheckbox": {
        "components": {
            "TriStateCheckbox": {
                "description": "TriStateCheckbox is used to select either 'true', 'false' or 'null' as the value.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Name of the component."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Defines a string that labels the input for accessibility."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "tabindex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Identifier of the focus input to match a label defined for the component."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Label of the checkbox."
                        },
                        {
                            "name": "readonly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component cannot be edited."
                        },
                        {
                            "name": "checkboxTrueIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies the icon for checkbox true value."
                        },
                        {
                            "name": "checkboxFalseIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Specifies the icon for checkbox false value."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onChange",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "TriStateCheckboxChangeEvent"
                                }
                            ],
                            "description": "Callback to invoke on value change."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "events": {
                "description": "Defines the custom events used by the component's emitters.",
                "values": [
                    {
                        "name": "TriStateCheckboxChangeEvent",
                        "description": "Custom change event.",
                        "props": [
                            {
                                "name": "originalEvent",
                                "optional": false,
                                "readonly": false,
                                "type": "Event",
                                "description": "Browser event."
                            },
                            {
                                "name": "value",
                                "optional": false,
                                "readonly": false,
                                "type": "boolean",
                                "description": "Value of the checkbox."
                            }
                        ]
                    }
                ]
            },
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "tristatecheckbox",
                        "name": "checkicon",
                        "parameters": [],
                        "description": "Custom check icon template."
                    },
                    {
                        "parent": "tristatecheckbox",
                        "name": "uncheckicon",
                        "parameters": [],
                        "description": "Custom uncheck icon template."
                    }
                ]
            }
        }
    },
    "objectutils": {
        "components": {}
    },
    "uniquecomponentid": {
        "components": {}
    },
    "zindexutils": {
        "components": {}
    },
    "virtualscroller": {
        "components": {
            "VirtualScroller": {
                "description": "VirtualScroller is a performant approach to handle huge data efficiently.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "itemSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "Height of an item in the list."
                        },
                        {
                            "name": "style",
                            "optional": false,
                            "readonly": false,
                            "type": "Object",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "description": "Max height of the content area in inline mode."
                        },
                        {
                            "name": "lazy",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollerOptions",
                            "description": "Whether to use the scroller feature. The properties of scroller component can be used like an object in it."
                        },
                        {
                            "name": "delay",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "250",
                            "description": "Threshold in milliseconds to delay lazy loading during scrolling."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "VirtualScrollerLazyLoadEvent"
                                }
                            ],
                            "description": "Callback to invoke in lazy mode to load new data."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "components": {},
            "templates": {
                "description": "Defines the templates used by the component.",
                "values": [
                    {
                        "parent": "virtualscroller",
                        "name": "item",
                        "parameters": [
                            {
                                "name": "context",
                                "type": "{\n  \t $implicit: any, // Item instance.\n  \t options: ScrollerOptions, // Scroller options.\n  }",
                                "description": "item data."
                            }
                        ],
                        "description": "Custom item template."
                    },
                    {
                        "parent": "virtualscroller",
                        "name": "header",
                        "parameters": [],
                        "description": "Custom header template."
                    },
                    {
                        "parent": "virtualscroller",
                        "name": "footer",
                        "parameters": [],
                        "description": "Custom header template."
                    }
                ]
            }
        }
    }
}